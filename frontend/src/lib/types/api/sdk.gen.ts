// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer, urlSearchParamsBodySerializer } from './client';
import type { GetCategoriesCategoriesGetData, GetCategoriesCategoriesGetResponses, GetCategoriesCategoriesGetErrors, GetCategoriesTreeCategoriesTreeGetData, GetCategoriesTreeCategoriesTreeGetResponses, GetCategoriesTreeCategoriesTreeGetErrors, GetCategoryCategoriesCategoryIdGetData, GetCategoryCategoriesCategoryIdGetResponses, GetCategoryCategoriesCategoryIdGetErrors, GetSubcategoriesCategoriesCategoryIdSubcategoriesGetData, GetSubcategoriesCategoriesCategoryIdSubcategoriesGetResponses, GetSubcategoriesCategoriesCategoryIdSubcategoriesGetErrors, GetCategorySubtreeCategoriesCategoryIdSubcategoriesTreeGetData, GetCategorySubtreeCategoriesCategoryIdSubcategoriesTreeGetResponses, GetCategorySubtreeCategoriesCategoryIdSubcategoriesTreeGetErrors, GetSubcategoryCategoriesCategoryIdSubcategoriesSubcategoryIdGetData, GetSubcategoryCategoriesCategoryIdSubcategoriesSubcategoryIdGetResponses, GetSubcategoryCategoriesCategoryIdSubcategoriesSubcategoryIdGetErrors, GetTaxonomiesTaxonomiesGetData, GetTaxonomiesTaxonomiesGetResponses, GetTaxonomiesTaxonomiesGetErrors, GetTaxonomyTaxonomiesTaxonomyIdGetData, GetTaxonomyTaxonomiesTaxonomyIdGetResponses, GetTaxonomyTaxonomiesTaxonomyIdGetErrors, GetTaxonomyCategoryTreeTaxonomiesTaxonomyIdCategoriesGetData, GetTaxonomyCategoryTreeTaxonomiesTaxonomyIdCategoriesGetResponses, GetTaxonomyCategoryTreeTaxonomiesTaxonomyIdCategoriesGetErrors, GetTaxonomyCategoryTaxonomiesTaxonomyIdCategoriesCategoryIdGetData, GetTaxonomyCategoryTaxonomiesTaxonomyIdCategoriesCategoryIdGetResponses, GetTaxonomyCategoryTaxonomiesTaxonomyIdCategoriesCategoryIdGetErrors, GetMaterialsMaterialsGetData, GetMaterialsMaterialsGetResponses, GetMaterialsMaterialsGetErrors, GetMaterialMaterialsMaterialIdGetData, GetMaterialMaterialsMaterialIdGetResponses, GetMaterialMaterialsMaterialIdGetErrors, GetCategoriesForMaterialMaterialsMaterialIdCategoriesGetData, GetCategoriesForMaterialMaterialsMaterialIdCategoriesGetResponses, GetCategoriesForMaterialMaterialsMaterialIdCategoriesGetErrors, GetCategoryForMaterialMaterialsMaterialIdCategoriesCategoryIdGetData, GetCategoryForMaterialMaterialsMaterialIdCategoriesCategoryIdGetResponses, GetCategoryForMaterialMaterialsMaterialIdCategoriesCategoryIdGetErrors, GetItemsMaterialsMaterialIdFilesGetData, GetItemsMaterialsMaterialIdFilesGetResponses, GetItemsMaterialsMaterialIdFilesGetErrors, GetItemMaterialsMaterialIdFilesFileIdGetData, GetItemMaterialsMaterialIdFilesFileIdGetResponses, GetItemMaterialsMaterialIdFilesFileIdGetErrors, GetItemsMaterialsMaterialIdImagesGetData, GetItemsMaterialsMaterialIdImagesGetResponses, GetItemsMaterialsMaterialIdImagesGetErrors, GetItemMaterialsMaterialIdImagesImageIdGetData, GetItemMaterialsMaterialIdImagesImageIdGetResponses, GetItemMaterialsMaterialIdImagesImageIdGetErrors, GetProductTypesProductTypesGetData, GetProductTypesProductTypesGetResponses, GetProductTypesProductTypesGetErrors, GetProductTypeProductTypesProductTypeIdGetData, GetProductTypeProductTypesProductTypeIdGetResponses, GetProductTypeProductTypesProductTypeIdGetErrors, GetCategoriesForProductTypeProductTypesProductTypeIdCategoriesGetData, GetCategoriesForProductTypeProductTypesProductTypeIdCategoriesGetResponses, GetCategoriesForProductTypeProductTypesProductTypeIdCategoriesGetErrors, GetCategoryForProductTypeProductTypesProductTypeIdCategoriesCategoryIdGetData, GetCategoryForProductTypeProductTypesProductTypeIdCategoriesCategoryIdGetResponses, GetCategoryForProductTypeProductTypesProductTypeIdCategoriesCategoryIdGetErrors, GetItemsProductTypesProductTypeIdFilesGetData, GetItemsProductTypesProductTypeIdFilesGetResponses, GetItemsProductTypesProductTypeIdFilesGetErrors, GetItemProductTypesProductTypeIdFilesFileIdGetData, GetItemProductTypesProductTypeIdFilesFileIdGetResponses, GetItemProductTypesProductTypeIdFilesFileIdGetErrors, GetItemsProductTypesProductTypeIdImagesGetData, GetItemsProductTypesProductTypeIdImagesGetResponses, GetItemsProductTypesProductTypeIdImagesGetErrors, GetItemProductTypesProductTypeIdImagesImageIdGetData, GetItemProductTypesProductTypeIdImagesImageIdGetResponses, GetItemProductTypesProductTypeIdImagesImageIdGetErrors, GetCurrentUserProductsUsersMeProductsGetData, GetCurrentUserProductsUsersMeProductsGetResponses, GetCurrentUserProductsUsersMeProductsGetErrors, GetProductsProductsGetData, GetProductsProductsGetResponses, GetProductsProductsGetErrors, CreateProductProductsPostData, CreateProductProductsPostResponses, CreateProductProductsPostErrors, GetProductsTreeProductsTreeGetData, GetProductsTreeProductsTreeGetResponses, GetProductsTreeProductsTreeGetErrors, DeleteProductProductsProductIdDeleteData, DeleteProductProductsProductIdDeleteResponses, DeleteProductProductsProductIdDeleteErrors, GetProductProductsProductIdGetData, GetProductProductsProductIdGetResponses, GetProductProductsProductIdGetErrors, UpdateProductProductsProductIdPatchData, UpdateProductProductsProductIdPatchResponses, UpdateProductProductsProductIdPatchErrors, GetProductSubtreeProductsProductIdComponentsTreeGetData, GetProductSubtreeProductsProductIdComponentsTreeGetResponses, GetProductSubtreeProductsProductIdComponentsTreeGetErrors, GetProductComponentsProductsProductIdComponentsGetData, GetProductComponentsProductsProductIdComponentsGetResponses, GetProductComponentsProductsProductIdComponentsGetErrors, AddComponentToProductProductsProductIdComponentsPostData, AddComponentToProductProductsProductIdComponentsPostResponses, AddComponentToProductProductsProductIdComponentsPostErrors, DeleteProductComponentProductsProductIdComponentsComponentIdDeleteData, DeleteProductComponentProductsProductIdComponentsComponentIdDeleteResponses, DeleteProductComponentProductsProductIdComponentsComponentIdDeleteErrors, GetProductComponentProductsProductIdComponentsComponentIdGetData, GetProductComponentProductsProductIdComponentsComponentIdGetResponses, GetProductComponentProductsProductIdComponentsComponentIdGetErrors, GetItemsProductsProductIdFilesGetData, GetItemsProductsProductIdFilesGetResponses, GetItemsProductsProductIdFilesGetErrors, UploadFileProductsProductIdFilesPostData, UploadFileProductsProductIdFilesPostResponses, UploadFileProductsProductIdFilesPostErrors, DeleteItemProductsProductIdFilesFileIdDeleteData, DeleteItemProductsProductIdFilesFileIdDeleteResponses, DeleteItemProductsProductIdFilesFileIdDeleteErrors, GetItemProductsProductIdFilesFileIdGetData, GetItemProductsProductIdFilesFileIdGetResponses, GetItemProductsProductIdFilesFileIdGetErrors, GetItemsProductsProductIdImagesGetData, GetItemsProductsProductIdImagesGetResponses, GetItemsProductsProductIdImagesGetErrors, UploadImageProductsProductIdImagesPostData, UploadImageProductsProductIdImagesPostResponses, UploadImageProductsProductIdImagesPostErrors, DeleteItemProductsProductIdImagesImageIdDeleteData, DeleteItemProductsProductIdImagesImageIdDeleteResponses, DeleteItemProductsProductIdImagesImageIdDeleteErrors, GetItemProductsProductIdImagesImageIdGetData, GetItemProductsProductIdImagesImageIdGetResponses, GetItemProductsProductIdImagesImageIdGetErrors, DeleteProductPhysicalPropertiesProductsProductIdPhysicalPropertiesDeleteData, DeleteProductPhysicalPropertiesProductsProductIdPhysicalPropertiesDeleteResponses, DeleteProductPhysicalPropertiesProductsProductIdPhysicalPropertiesDeleteErrors, GetProductPhysicalPropertiesProductsProductIdPhysicalPropertiesGetData, GetProductPhysicalPropertiesProductsProductIdPhysicalPropertiesGetResponses, GetProductPhysicalPropertiesProductsProductIdPhysicalPropertiesGetErrors, UpdateProductPhysicalPropertiesProductsProductIdPhysicalPropertiesPatchData, UpdateProductPhysicalPropertiesProductsProductIdPhysicalPropertiesPatchResponses, UpdateProductPhysicalPropertiesProductsProductIdPhysicalPropertiesPatchErrors, CreateProductPhysicalPropertiesProductsProductIdPhysicalPropertiesPostData, CreateProductPhysicalPropertiesProductsProductIdPhysicalPropertiesPostResponses, CreateProductPhysicalPropertiesProductsProductIdPhysicalPropertiesPostErrors, GetProductVideosProductsProductIdVideosGetData, GetProductVideosProductsProductIdVideosGetResponses, GetProductVideosProductsProductIdVideosGetErrors, CreateProductVideoProductsProductIdVideosPostData, CreateProductVideoProductsProductIdVideosPostResponses, CreateProductVideoProductsProductIdVideosPostErrors, DeleteProductVideoProductsProductIdVideosVideoIdDeleteData, DeleteProductVideoProductsProductIdVideosVideoIdDeleteResponses, DeleteProductVideoProductsProductIdVideosVideoIdDeleteErrors, GetProductVideoProductsProductIdVideosVideoIdGetData, GetProductVideoProductsProductIdVideosVideoIdGetResponses, GetProductVideoProductsProductIdVideosVideoIdGetErrors, RemoveMaterialsFromProductBulkProductsProductIdMaterialsDeleteData, RemoveMaterialsFromProductBulkProductsProductIdMaterialsDeleteResponses, RemoveMaterialsFromProductBulkProductsProductIdMaterialsDeleteErrors, GetProductBillOfMaterialsProductsProductIdMaterialsGetData, GetProductBillOfMaterialsProductsProductIdMaterialsGetResponses, GetProductBillOfMaterialsProductsProductIdMaterialsGetErrors, AddMaterialsToProductProductsProductIdMaterialsPostData, AddMaterialsToProductProductsProductIdMaterialsPostResponses, AddMaterialsToProductProductsProductIdMaterialsPostErrors, RemoveMaterialFromProductProductsProductIdMaterialsMaterialIdDeleteData, RemoveMaterialFromProductProductsProductIdMaterialsMaterialIdDeleteResponses, RemoveMaterialFromProductProductsProductIdMaterialsMaterialIdDeleteErrors, GetMaterialInProductBillOfMaterialsProductsProductIdMaterialsMaterialIdGetData, GetMaterialInProductBillOfMaterialsProductsProductIdMaterialsMaterialIdGetResponses, GetMaterialInProductBillOfMaterialsProductsProductIdMaterialsMaterialIdGetErrors, UpdateProductBillOfMaterialsProductsProductIdMaterialsMaterialIdPatchData, UpdateProductBillOfMaterialsProductsProductIdMaterialsMaterialIdPatchResponses, UpdateProductBillOfMaterialsProductsProductIdMaterialsMaterialIdPatchErrors, AddMaterialToProductProductsProductIdMaterialsMaterialIdPostData, AddMaterialToProductProductsProductIdMaterialsMaterialIdPostResponses, AddMaterialToProductProductsProductIdMaterialsMaterialIdPostErrors, GetUnitsUnitsGetData, GetUnitsUnitsGetResponses, AuthBearerLoginAuthBearerLoginPostData, AuthBearerLoginAuthBearerLoginPostResponses, AuthBearerLoginAuthBearerLoginPostErrors, AuthBearerLogoutAuthBearerLogoutPostData, AuthBearerLogoutAuthBearerLogoutPostResponses, AuthBearerLogoutAuthBearerLogoutPostErrors, AuthCookieLoginAuthCookieLoginPostData, AuthCookieLoginAuthCookieLoginPostResponses, AuthCookieLoginAuthCookieLoginPostErrors, AuthCookieLogoutAuthCookieLogoutPostData, AuthCookieLogoutAuthCookieLogoutPostResponses, AuthCookieLogoutAuthCookieLogoutPostErrors, GetOrganizationsOrganizationsGetData, GetOrganizationsOrganizationsGetResponses, GetOrganizationsOrganizationsGetErrors, CreateOrganizationOrganizationsPostData, CreateOrganizationOrganizationsPostResponses, CreateOrganizationOrganizationsPostErrors, GetOrganizationOrganizationsOrganizationIdGetData, GetOrganizationOrganizationsOrganizationIdGetResponses, GetOrganizationOrganizationsOrganizationIdGetErrors, GetOrganizationMembersOrganizationsOrganizationIdMembersGetData, GetOrganizationMembersOrganizationsOrganizationIdMembersGetResponses, GetOrganizationMembersOrganizationsOrganizationIdMembersGetErrors, JoinOrganizationOrganizationsOrganizationIdMembersMePostData, JoinOrganizationOrganizationsOrganizationIdMembersMePostResponses, JoinOrganizationOrganizationsOrganizationIdMembersMePostErrors, UsersCurrentUserUsersMeGetData, UsersCurrentUserUsersMeGetResponses, UsersCurrentUserUsersMeGetErrors, UsersPatchCurrentUserUsersMePatchData, UsersPatchCurrentUserUsersMePatchResponses, UsersPatchCurrentUserUsersMePatchErrors, UsersDeleteUserUsersIdDeleteData, UsersDeleteUserUsersIdDeleteResponses, UsersDeleteUserUsersIdDeleteErrors, UsersUserUsersIdGetData, UsersUserUsersIdGetResponses, UsersUserUsersIdGetErrors, UsersPatchUserUsersIdPatchData, UsersPatchUserUsersIdPatchResponses, UsersPatchUserUsersIdPatchErrors, DeleteMyOrganizationUsersMeOrganizationDeleteData, DeleteMyOrganizationUsersMeOrganizationDeleteResponses, GetUserOrganizationUsersMeOrganizationGetData, GetUserOrganizationUsersMeOrganizationGetResponses, UpdateOrganizationUsersMeOrganizationPatchData, UpdateOrganizationUsersMeOrganizationPatchResponses, UpdateOrganizationUsersMeOrganizationPatchErrors, GetUserOrganizationMembersUsersMeOrganizationMembersGetData, GetUserOrganizationMembersUsersMeOrganizationMembersGetResponses, LeaveOrganizationUsersMeOrganizationMembershipDeleteData, LeaveOrganizationUsersMeOrganizationMembershipDeleteResponses, GetUserCamerasPluginsRpiCamCamerasGetData, GetUserCamerasPluginsRpiCamCamerasGetResponses, GetUserCamerasPluginsRpiCamCamerasGetErrors, RegisterUserCameraPluginsRpiCamCamerasPostData, RegisterUserCameraPluginsRpiCamCamerasPostResponses, RegisterUserCameraPluginsRpiCamCamerasPostErrors, DeleteUserCameraPluginsRpiCamCamerasCameraIdDeleteData, DeleteUserCameraPluginsRpiCamCamerasCameraIdDeleteResponses, DeleteUserCameraPluginsRpiCamCamerasCameraIdDeleteErrors, GetUserCameraPluginsRpiCamCamerasCameraIdGetData, GetUserCameraPluginsRpiCamCamerasCameraIdGetResponses, GetUserCameraPluginsRpiCamCamerasCameraIdGetErrors, UpdateUserCameraPluginsRpiCamCamerasCameraIdPatchData, UpdateUserCameraPluginsRpiCamCamerasCameraIdPatchResponses, UpdateUserCameraPluginsRpiCamCamerasCameraIdPatchErrors, GetUserCameraStatusPluginsRpiCamCamerasCameraIdStatusGetData, GetUserCameraStatusPluginsRpiCamCamerasCameraIdStatusGetResponses, GetUserCameraStatusPluginsRpiCamCamerasCameraIdStatusGetErrors, RegenerateApiKeyPluginsRpiCamCamerasCameraIdRegenerateApiKeyPostData, RegenerateApiKeyPluginsRpiCamCamerasCameraIdRegenerateApiKeyPostResponses, RegenerateApiKeyPluginsRpiCamCamerasCameraIdRegenerateApiKeyPostErrors, CaptureImagePluginsRpiCamCamerasCameraIdImagePostData, CaptureImagePluginsRpiCamCamerasCameraIdImagePostResponses, CaptureImagePluginsRpiCamCamerasCameraIdImagePostErrors, GetCameraStreamStatusPluginsRpiCamCamerasCameraIdStreamStatusGetData, GetCameraStreamStatusPluginsRpiCamCamerasCameraIdStreamStatusGetResponses, GetCameraStreamStatusPluginsRpiCamCamerasCameraIdStreamStatusGetErrors, StopAllStreamsPluginsRpiCamCamerasCameraIdStreamStopDeleteData, StopAllStreamsPluginsRpiCamCamerasCameraIdStreamStopDeleteResponses, StopAllStreamsPluginsRpiCamCamerasCameraIdStreamStopDeleteErrors, StartRecordingPluginsRpiCamCamerasCameraIdStreamRecordStartPostData, StartRecordingPluginsRpiCamCamerasCameraIdStreamRecordStartPostResponses, StartRecordingPluginsRpiCamCamerasCameraIdStreamRecordStartPostErrors, StopRecordingPluginsRpiCamCamerasCameraIdStreamRecordStopDeleteData, StopRecordingPluginsRpiCamCamerasCameraIdStreamRecordStopDeleteResponses, StopRecordingPluginsRpiCamCamerasCameraIdStreamRecordStopDeleteErrors, StartPreviewPluginsRpiCamCamerasCameraIdStreamPreviewStartPostData, StartPreviewPluginsRpiCamCamerasCameraIdStreamPreviewStartPostResponses, StartPreviewPluginsRpiCamCamerasCameraIdStreamPreviewStartPostErrors, StopPreviewPluginsRpiCamCamerasCameraIdStreamPreviewStopDeleteData, StopPreviewPluginsRpiCamCamerasCameraIdStreamPreviewStopDeleteResponses, StopPreviewPluginsRpiCamCamerasCameraIdStreamPreviewStopDeleteErrors, HlsFileProxyPluginsRpiCamCamerasCameraIdStreamPreviewHlsFilePathGetData, HlsFileProxyPluginsRpiCamCamerasCameraIdStreamPreviewHlsFilePathGetResponses, HlsFileProxyPluginsRpiCamCamerasCameraIdStreamPreviewHlsFilePathGetErrors, WatchPreviewPluginsRpiCamCamerasCameraIdStreamPreviewWatchGetData, WatchPreviewPluginsRpiCamCamerasCameraIdStreamPreviewWatchGetResponses, WatchPreviewPluginsRpiCamCamerasCameraIdStreamPreviewWatchGetErrors, InitCameraPluginsRpiCamCamerasCameraIdOpenPostData, InitCameraPluginsRpiCamCamerasCameraIdOpenPostResponses, InitCameraPluginsRpiCamCamerasCameraIdOpenPostErrors, CloseCameraPluginsRpiCamCamerasCameraIdClosePostData, CloseCameraPluginsRpiCamCamerasCameraIdClosePostResponses, CloseCameraPluginsRpiCamCamerasCameraIdClosePostErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get all categories with optional filtering and relationships
 * Get all categories with specified relationships.
 */
export const getCategoriesCategoriesGet = <ThrowOnError extends boolean = false>(options?: Options<GetCategoriesCategoriesGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCategoriesCategoriesGetResponses, GetCategoriesCategoriesGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/categories',
        ...options
    });
};

/**
 * Get categories tree
 * Get all base categories and their subcategories in a tree structure.
 */
export const getCategoriesTreeCategoriesTreeGet = <ThrowOnError extends boolean = false>(options?: Options<GetCategoriesTreeCategoriesTreeGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCategoriesTreeCategoriesTreeGetResponses, GetCategoriesTreeCategoriesTreeGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/categories/tree',
        ...options
    });
};

/**
 * Get Category
 * Get category by ID with specified relationships.
 */
export const getCategoryCategoriesCategoryIdGet = <ThrowOnError extends boolean = false>(options: Options<GetCategoryCategoriesCategoryIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCategoryCategoriesCategoryIdGetResponses, GetCategoryCategoriesCategoryIdGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/categories/{category_id}',
        ...options
    });
};

/**
 * Get category subcategories with optional filtering and relationships
 * Get all categories with specified relationships.
 */
export const getSubcategoriesCategoriesCategoryIdSubcategoriesGet = <ThrowOnError extends boolean = false>(options: Options<GetSubcategoriesCategoriesCategoryIdSubcategoriesGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSubcategoriesCategoriesCategoryIdSubcategoriesGetResponses, GetSubcategoriesCategoriesCategoryIdSubcategoriesGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/categories{category_id}/subcategories',
        ...options
    });
};

/**
 * Get category subtree
 * Get a category subcategories in a tree structure, up to a specified depth.
 */
export const getCategorySubtreeCategoriesCategoryIdSubcategoriesTreeGet = <ThrowOnError extends boolean = false>(options: Options<GetCategorySubtreeCategoriesCategoryIdSubcategoriesTreeGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCategorySubtreeCategoriesCategoryIdSubcategoriesTreeGetResponses, GetCategorySubtreeCategoriesCategoryIdSubcategoriesTreeGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/categories/{category_id}/subcategories/tree',
        ...options
    });
};

/**
 * Get subcategory by ID
 * Get subcategory by ID with specified relationships.
 */
export const getSubcategoryCategoriesCategoryIdSubcategoriesSubcategoryIdGet = <ThrowOnError extends boolean = false>(options: Options<GetSubcategoryCategoriesCategoryIdSubcategoriesSubcategoryIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSubcategoryCategoriesCategoryIdSubcategoriesSubcategoryIdGetResponses, GetSubcategoryCategoriesCategoryIdSubcategoriesSubcategoryIdGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/categories/{category_id}/subcategories/{subcategory_id}',
        ...options
    });
};

/**
 * Get all taxonomies with optional filtering and base categories
 * Get all taxonomies with specified relationships.
 */
export const getTaxonomiesTaxonomiesGet = <ThrowOnError extends boolean = false>(options?: Options<GetTaxonomiesTaxonomiesGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTaxonomiesTaxonomiesGetResponses, GetTaxonomiesTaxonomiesGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/taxonomies',
        ...options
    });
};

/**
 * Get Taxonomy
 * Get taxonomy by ID with base categories.
 */
export const getTaxonomyTaxonomiesTaxonomyIdGet = <ThrowOnError extends boolean = false>(options: Options<GetTaxonomyTaxonomiesTaxonomyIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTaxonomyTaxonomiesTaxonomyIdGetResponses, GetTaxonomyTaxonomiesTaxonomyIdGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/taxonomies/{taxonomy_id}',
        ...options
    });
};

/**
 * Get the categories of a taxonomy
 * Get a taxonomy with its category tree structure.
 */
export const getTaxonomyCategoryTreeTaxonomiesTaxonomyIdCategoriesGet = <ThrowOnError extends boolean = false>(options: Options<GetTaxonomyCategoryTreeTaxonomiesTaxonomyIdCategoriesGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTaxonomyCategoryTreeTaxonomiesTaxonomyIdCategoriesGetResponses, GetTaxonomyCategoryTreeTaxonomiesTaxonomyIdCategoriesGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/taxonomies/{taxonomy_id}/categories',
        ...options
    });
};

/**
 * Get taxonomy category by ID
 * Get category by ID with specified relationships.
 */
export const getTaxonomyCategoryTaxonomiesTaxonomyIdCategoriesCategoryIdGet = <ThrowOnError extends boolean = false>(options: Options<GetTaxonomyCategoryTaxonomiesTaxonomyIdCategoriesCategoryIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTaxonomyCategoryTaxonomiesTaxonomyIdCategoriesCategoryIdGetResponses, GetTaxonomyCategoryTaxonomiesTaxonomyIdCategoriesCategoryIdGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/taxonomies/{taxonomy_id}/categories/{category_id}',
        ...options
    });
};

/**
 * Get all materials with optional relationships
 * Get all materials with specified relationships.
 */
export const getMaterialsMaterialsGet = <ThrowOnError extends boolean = false>(options?: Options<GetMaterialsMaterialsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMaterialsMaterialsGetResponses, GetMaterialsMaterialsGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/materials',
        ...options
    });
};

/**
 * Get Material
 * Get material by ID with specified relationships.
 */
export const getMaterialMaterialsMaterialIdGet = <ThrowOnError extends boolean = false>(options: Options<GetMaterialMaterialsMaterialIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMaterialMaterialsMaterialIdGetResponses, GetMaterialMaterialsMaterialIdGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/materials/{material_id}',
        ...options
    });
};

/**
 * View categories of material
 * View categories of a material.
 */
export const getCategoriesForMaterialMaterialsMaterialIdCategoriesGet = <ThrowOnError extends boolean = false>(options: Options<GetCategoriesForMaterialMaterialsMaterialIdCategoriesGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCategoriesForMaterialMaterialsMaterialIdCategoriesGetResponses, GetCategoriesForMaterialMaterialsMaterialIdCategoriesGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/materials/{material_id}/categories',
        ...options
    });
};

/**
 * Get category by ID
 * Get a category by ID for a specific material.
 */
export const getCategoryForMaterialMaterialsMaterialIdCategoriesCategoryIdGet = <ThrowOnError extends boolean = false>(options: Options<GetCategoryForMaterialMaterialsMaterialIdCategoriesCategoryIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCategoryForMaterialMaterialsMaterialIdCategoriesCategoryIdGetResponses, GetCategoryForMaterialMaterialsMaterialIdCategoriesCategoryIdGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/materials/{material_id}/categories/{category_id}',
        ...options
    });
};

/**
 * Get Material Files
 * Get all Files associated with the Material
 */
export const getItemsMaterialsMaterialIdFilesGet = <ThrowOnError extends boolean = false>(options: Options<GetItemsMaterialsMaterialIdFilesGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetItemsMaterialsMaterialIdFilesGetResponses, GetItemsMaterialsMaterialIdFilesGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/materials/{material_id}/files',
        ...options
    });
};

/**
 * Get specific Material File
 * Get specific Material File by ID
 */
export const getItemMaterialsMaterialIdFilesFileIdGet = <ThrowOnError extends boolean = false>(options: Options<GetItemMaterialsMaterialIdFilesFileIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetItemMaterialsMaterialIdFilesFileIdGetResponses, GetItemMaterialsMaterialIdFilesFileIdGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/materials/{material_id}/files/{file_id}',
        ...options
    });
};

/**
 * Get Material Images
 * Get all Images associated with the Material
 */
export const getItemsMaterialsMaterialIdImagesGet = <ThrowOnError extends boolean = false>(options: Options<GetItemsMaterialsMaterialIdImagesGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetItemsMaterialsMaterialIdImagesGetResponses, GetItemsMaterialsMaterialIdImagesGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/materials/{material_id}/images',
        ...options
    });
};

/**
 * Get specific Material Image
 * Get specific Material Image by ID
 */
export const getItemMaterialsMaterialIdImagesImageIdGet = <ThrowOnError extends boolean = false>(options: Options<GetItemMaterialsMaterialIdImagesImageIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetItemMaterialsMaterialIdImagesImageIdGetResponses, GetItemMaterialsMaterialIdImagesImageIdGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/materials/{material_id}/images/{image_id}',
        ...options
    });
};

/**
 * Get all product types
 * Get a list of all product types.
 */
export const getProductTypesProductTypesGet = <ThrowOnError extends boolean = false>(options?: Options<GetProductTypesProductTypesGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetProductTypesProductTypesGetResponses, GetProductTypesProductTypesGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/product-types',
        ...options
    });
};

/**
 * Get product type by ID
 * Get a single product type by ID with its categories and products.
 */
export const getProductTypeProductTypesProductTypeIdGet = <ThrowOnError extends boolean = false>(options: Options<GetProductTypeProductTypesProductTypeIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProductTypeProductTypesProductTypeIdGetResponses, GetProductTypeProductTypesProductTypeIdGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/product-types/{product_type_id}',
        ...options
    });
};

/**
 * View categories of product type
 * View categories of a product type.
 */
export const getCategoriesForProductTypeProductTypesProductTypeIdCategoriesGet = <ThrowOnError extends boolean = false>(options: Options<GetCategoriesForProductTypeProductTypesProductTypeIdCategoriesGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCategoriesForProductTypeProductTypesProductTypeIdCategoriesGetResponses, GetCategoriesForProductTypeProductTypesProductTypeIdCategoriesGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/product-types/{product_type_id}/categories',
        ...options
    });
};

/**
 * Get category by ID
 * Get a category by ID for a product type.
 */
export const getCategoryForProductTypeProductTypesProductTypeIdCategoriesCategoryIdGet = <ThrowOnError extends boolean = false>(options: Options<GetCategoryForProductTypeProductTypesProductTypeIdCategoriesCategoryIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCategoryForProductTypeProductTypesProductTypeIdCategoriesCategoryIdGetResponses, GetCategoryForProductTypeProductTypesProductTypeIdCategoriesCategoryIdGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/product-types/{product_type_id}/categories/{category_id}',
        ...options
    });
};

/**
 * Get Product Type Files
 * Get all Files associated with the Product Type
 */
export const getItemsProductTypesProductTypeIdFilesGet = <ThrowOnError extends boolean = false>(options: Options<GetItemsProductTypesProductTypeIdFilesGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetItemsProductTypesProductTypeIdFilesGetResponses, GetItemsProductTypesProductTypeIdFilesGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/product-types/{product_type_id}/files',
        ...options
    });
};

/**
 * Get specific Product Type File
 * Get specific Product Type File by ID
 */
export const getItemProductTypesProductTypeIdFilesFileIdGet = <ThrowOnError extends boolean = false>(options: Options<GetItemProductTypesProductTypeIdFilesFileIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetItemProductTypesProductTypeIdFilesFileIdGetResponses, GetItemProductTypesProductTypeIdFilesFileIdGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/product-types/{product_type_id}/files/{file_id}',
        ...options
    });
};

/**
 * Get Product Type Images
 * Get all Images associated with the Product Type
 */
export const getItemsProductTypesProductTypeIdImagesGet = <ThrowOnError extends boolean = false>(options: Options<GetItemsProductTypesProductTypeIdImagesGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetItemsProductTypesProductTypeIdImagesGetResponses, GetItemsProductTypesProductTypeIdImagesGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/product-types/{product_type_id}/images',
        ...options
    });
};

/**
 * Get specific Product Type Image
 * Get specific Product Type Image by ID
 */
export const getItemProductTypesProductTypeIdImagesImageIdGet = <ThrowOnError extends boolean = false>(options: Options<GetItemProductTypesProductTypeIdImagesImageIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetItemProductTypesProductTypeIdImagesImageIdGetResponses, GetItemProductTypesProductTypeIdImagesImageIdGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/product-types/{product_type_id}/images/{image_id}',
        ...options
    });
};

/**
 * Get products collected by a user
 * Get products collected by the current user.
 */
export const getCurrentUserProductsUsersMeProductsGet = <ThrowOnError extends boolean = false>(options?: Options<GetCurrentUserProductsUsersMeProductsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCurrentUserProductsUsersMeProductsGetResponses, GetCurrentUserProductsUsersMeProductsGetErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'auth',
                type: 'apiKey'
            }
        ],
        url: '/users/me/products',
        ...options
    });
};

/**
 * Get all products with optional relationships
 * Get all products with specified relationships.
 *
 * Relationships that can be included:
 * - physical_properties: Physical measurements and attributes
 * - images: Product images
 * - videos: Product videos
 * - files: Related documents
 * - product_type: Type classification
 * - bill_of_materials: Material composition
 */
export const getProductsProductsGet = <ThrowOnError extends boolean = false>(options?: Options<GetProductsProductsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetProductsProductsGetResponses, GetProductsProductsGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/products',
        ...options
    });
};

/**
 * Create a new product, optionally with components
 * Create a new product.
 */
export const createProductProductsPost = <ThrowOnError extends boolean = false>(options: Options<CreateProductProductsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateProductProductsPostResponses, CreateProductProductsPostErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'auth',
                type: 'apiKey'
            }
        ],
        url: '/products',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get products tree
 * Get all base products and their components in a tree structure.
 */
export const getProductsTreeProductsTreeGet = <ThrowOnError extends boolean = false>(options?: Options<GetProductsTreeProductsTreeGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetProductsTreeProductsTreeGetResponses, GetProductsTreeProductsTreeGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/products/tree',
        ...options
    });
};

/**
 * Delete product
 * Delete a product, including components.
 */
export const deleteProductProductsProductIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteProductProductsProductIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteProductProductsProductIdDeleteResponses, DeleteProductProductsProductIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'auth',
                type: 'apiKey'
            }
        ],
        url: '/products/{product_id}',
        ...options
    });
};

/**
 * Get product by ID
 * Get product by ID with specified relationships.
 *
 * Relationships that can be included:
 * - physical_properties: Physical measurements and attributes
 * - images: Product images
 * - videos: Product videos
 * - files: Related documents
 * - product_type: Type classification
 * - bill_of_materials: Material composition
 */
export const getProductProductsProductIdGet = <ThrowOnError extends boolean = false>(options: Options<GetProductProductsProductIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProductProductsProductIdGetResponses, GetProductProductsProductIdGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/products/{product_id}',
        ...options
    });
};

/**
 * Update product
 * Update an existing product.
 */
export const updateProductProductsProductIdPatch = <ThrowOnError extends boolean = false>(options: Options<UpdateProductProductsProductIdPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateProductProductsProductIdPatchResponses, UpdateProductProductsProductIdPatchErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'auth',
                type: 'apiKey'
            }
        ],
        url: '/products/{product_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get product component subtree
 * Get a product's components in a tree structure, up to a specified depth.
 */
export const getProductSubtreeProductsProductIdComponentsTreeGet = <ThrowOnError extends boolean = false>(options: Options<GetProductSubtreeProductsProductIdComponentsTreeGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProductSubtreeProductsProductIdComponentsTreeGetResponses, GetProductSubtreeProductsProductIdComponentsTreeGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/products/{product_id}/components/tree',
        ...options
    });
};

/**
 * Get product components
 * Get all components of a product.
 */
export const getProductComponentsProductsProductIdComponentsGet = <ThrowOnError extends boolean = false>(options: Options<GetProductComponentsProductsProductIdComponentsGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProductComponentsProductsProductIdComponentsGetResponses, GetProductComponentsProductsProductIdComponentsGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/products/{product_id}/components',
        ...options
    });
};

/**
 * Create a new component in a product
 * Create a new component in an existing product.
 */
export const addComponentToProductProductsProductIdComponentsPost = <ThrowOnError extends boolean = false>(options: Options<AddComponentToProductProductsProductIdComponentsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddComponentToProductProductsProductIdComponentsPostResponses, AddComponentToProductProductsProductIdComponentsPostErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'auth',
                type: 'apiKey'
            }
        ],
        url: '/products/{product_id}/components',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete product component
 * Delete a component in a product, including subcomponents.
 */
export const deleteProductComponentProductsProductIdComponentsComponentIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteProductComponentProductsProductIdComponentsComponentIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteProductComponentProductsProductIdComponentsComponentIdDeleteResponses, DeleteProductComponentProductsProductIdComponentsComponentIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'auth',
                type: 'apiKey'
            }
        ],
        url: '/products/{product_id}/components/{component_id}',
        ...options
    });
};

/**
 * Get product component by ID
 * Get component by ID with specified relationships.
 */
export const getProductComponentProductsProductIdComponentsComponentIdGet = <ThrowOnError extends boolean = false>(options: Options<GetProductComponentProductsProductIdComponentsComponentIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProductComponentProductsProductIdComponentsComponentIdGetResponses, GetProductComponentProductsProductIdComponentsComponentIdGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/products/{product_id}/components/{component_id}',
        ...options
    });
};

/**
 * Get Product Files
 * Get all Files associated with the Product
 */
export const getItemsProductsProductIdFilesGet = <ThrowOnError extends boolean = false>(options: Options<GetItemsProductsProductIdFilesGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetItemsProductsProductIdFilesGetResponses, GetItemsProductsProductIdFilesGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/products/{product_id}/files',
        ...options
    });
};

/**
 * Add File to Product
 * Upload a new File for the Product
 */
export const uploadFileProductsProductIdFilesPost = <ThrowOnError extends boolean = false>(options: Options<UploadFileProductsProductIdFilesPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UploadFileProductsProductIdFilesPostResponses, UploadFileProductsProductIdFilesPostErrors, ThrowOnError>({
        ...formDataBodySerializer,
        responseType: 'json',
        url: '/products/{product_id}/files',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Remove File from Product
 * Remove File from the Product and delete it from the storage.
 */
export const deleteItemProductsProductIdFilesFileIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteItemProductsProductIdFilesFileIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteItemProductsProductIdFilesFileIdDeleteResponses, DeleteItemProductsProductIdFilesFileIdDeleteErrors, ThrowOnError>({
        responseType: 'json',
        url: '/products/{product_id}/files/{file_id}',
        ...options
    });
};

/**
 * Get specific Product File
 * Get specific Product File by ID
 */
export const getItemProductsProductIdFilesFileIdGet = <ThrowOnError extends boolean = false>(options: Options<GetItemProductsProductIdFilesFileIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetItemProductsProductIdFilesFileIdGetResponses, GetItemProductsProductIdFilesFileIdGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/products/{product_id}/files/{file_id}',
        ...options
    });
};

/**
 * Get Product Images
 * Get all Images associated with the Product
 */
export const getItemsProductsProductIdImagesGet = <ThrowOnError extends boolean = false>(options: Options<GetItemsProductsProductIdImagesGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetItemsProductsProductIdImagesGetResponses, GetItemsProductsProductIdImagesGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/products/{product_id}/images',
        ...options
    });
};

/**
 * Add Image to Product
 * Upload a new Image for the Product
 */
export const uploadImageProductsProductIdImagesPost = <ThrowOnError extends boolean = false>(options: Options<UploadImageProductsProductIdImagesPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UploadImageProductsProductIdImagesPostResponses, UploadImageProductsProductIdImagesPostErrors, ThrowOnError>({
        ...formDataBodySerializer,
        responseType: 'json',
        url: '/products/{product_id}/images',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Remove Image from Product
 * Remove Image from the Product and delete it from the storage.
 */
export const deleteItemProductsProductIdImagesImageIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteItemProductsProductIdImagesImageIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteItemProductsProductIdImagesImageIdDeleteResponses, DeleteItemProductsProductIdImagesImageIdDeleteErrors, ThrowOnError>({
        responseType: 'json',
        url: '/products/{product_id}/images/{image_id}',
        ...options
    });
};

/**
 * Get specific Product Image
 * Get specific Product Image by ID
 */
export const getItemProductsProductIdImagesImageIdGet = <ThrowOnError extends boolean = false>(options: Options<GetItemProductsProductIdImagesImageIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetItemProductsProductIdImagesImageIdGetResponses, GetItemProductsProductIdImagesImageIdGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/products/{product_id}/images/{image_id}',
        ...options
    });
};

/**
 * Delete product physical properties
 * Delete physical properties for a product.
 */
export const deleteProductPhysicalPropertiesProductsProductIdPhysicalPropertiesDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteProductPhysicalPropertiesProductsProductIdPhysicalPropertiesDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteProductPhysicalPropertiesProductsProductIdPhysicalPropertiesDeleteResponses, DeleteProductPhysicalPropertiesProductsProductIdPhysicalPropertiesDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'auth',
                type: 'apiKey'
            }
        ],
        url: '/products/{product_id}/physical_properties',
        ...options
    });
};

/**
 * Get product physical properties
 * Get physical properties for a product.
 */
export const getProductPhysicalPropertiesProductsProductIdPhysicalPropertiesGet = <ThrowOnError extends boolean = false>(options: Options<GetProductPhysicalPropertiesProductsProductIdPhysicalPropertiesGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProductPhysicalPropertiesProductsProductIdPhysicalPropertiesGetResponses, GetProductPhysicalPropertiesProductsProductIdPhysicalPropertiesGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/products/{product_id}/physical_properties',
        ...options
    });
};

/**
 * Update product physical properties
 * Update physical properties for a product.
 */
export const updateProductPhysicalPropertiesProductsProductIdPhysicalPropertiesPatch = <ThrowOnError extends boolean = false>(options: Options<UpdateProductPhysicalPropertiesProductsProductIdPhysicalPropertiesPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateProductPhysicalPropertiesProductsProductIdPhysicalPropertiesPatchResponses, UpdateProductPhysicalPropertiesProductsProductIdPhysicalPropertiesPatchErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'auth',
                type: 'apiKey'
            }
        ],
        url: '/products/{product_id}/physical_properties',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create product physical properties
 * Create physical properties for a product.
 */
export const createProductPhysicalPropertiesProductsProductIdPhysicalPropertiesPost = <ThrowOnError extends boolean = false>(options: Options<CreateProductPhysicalPropertiesProductsProductIdPhysicalPropertiesPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateProductPhysicalPropertiesProductsProductIdPhysicalPropertiesPostResponses, CreateProductPhysicalPropertiesProductsProductIdPhysicalPropertiesPostErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'auth',
                type: 'apiKey'
            }
        ],
        url: '/products/{product_id}/physical_properties',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get all videos for a product
 * Get all videos associated with a specific product.
 */
export const getProductVideosProductsProductIdVideosGet = <ThrowOnError extends boolean = false>(options: Options<GetProductVideosProductsProductIdVideosGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProductVideosProductsProductIdVideosGetResponses, GetProductVideosProductsProductIdVideosGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/products/{product_id}/videos',
        ...options
    });
};

/**
 * Create a new video for a product
 * Create a new video associated with a specific product.
 */
export const createProductVideoProductsProductIdVideosPost = <ThrowOnError extends boolean = false>(options: Options<CreateProductVideoProductsProductIdVideosPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateProductVideoProductsProductIdVideosPostResponses, CreateProductVideoProductsProductIdVideosPostErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'auth',
                type: 'apiKey'
            }
        ],
        url: '/products/{product_id}/videos',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete video by ID
 * Delete a video associated with a specific product.
 */
export const deleteProductVideoProductsProductIdVideosVideoIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteProductVideoProductsProductIdVideosVideoIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteProductVideoProductsProductIdVideosVideoIdDeleteResponses, DeleteProductVideoProductsProductIdVideosVideoIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'auth',
                type: 'apiKey'
            }
        ],
        url: '/products/{product_id}/videos/{video_id}',
        ...options
    });
};

/**
 * Get video by ID
 * Get a video associated with a specific product.
 */
export const getProductVideoProductsProductIdVideosVideoIdGet = <ThrowOnError extends boolean = false>(options: Options<GetProductVideoProductsProductIdVideosVideoIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProductVideoProductsProductIdVideosVideoIdGetResponses, GetProductVideoProductsProductIdVideosVideoIdGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/products/{product_id}/videos/{video_id}',
        ...options
    });
};

/**
 * Remove multiple materials from product bill of materials
 * Remove multiple materials from a product's bill of materials.
 */
export const removeMaterialsFromProductBulkProductsProductIdMaterialsDelete = <ThrowOnError extends boolean = false>(options: Options<RemoveMaterialsFromProductBulkProductsProductIdMaterialsDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemoveMaterialsFromProductBulkProductsProductIdMaterialsDeleteResponses, RemoveMaterialsFromProductBulkProductsProductIdMaterialsDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'auth',
                type: 'apiKey'
            }
        ],
        url: '/products/{product_id}/materials',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get product bill of materials
 * Get bill of materials for a product.
 */
export const getProductBillOfMaterialsProductsProductIdMaterialsGet = <ThrowOnError extends boolean = false>(options: Options<GetProductBillOfMaterialsProductsProductIdMaterialsGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProductBillOfMaterialsProductsProductIdMaterialsGetResponses, GetProductBillOfMaterialsProductsProductIdMaterialsGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/products/{product_id}/materials',
        ...options
    });
};

/**
 * Add multiple materials to product bill of materials
 * Add multiple materials to a product's bill of materials.
 */
export const addMaterialsToProductProductsProductIdMaterialsPost = <ThrowOnError extends boolean = false>(options: Options<AddMaterialsToProductProductsProductIdMaterialsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddMaterialsToProductProductsProductIdMaterialsPostResponses, AddMaterialsToProductProductsProductIdMaterialsPostErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'auth',
                type: 'apiKey'
            }
        ],
        url: '/products/{product_id}/materials',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Remove single material from product bill of materials
 * Remove a single material from a product's bill of materials.
 */
export const removeMaterialFromProductProductsProductIdMaterialsMaterialIdDelete = <ThrowOnError extends boolean = false>(options: Options<RemoveMaterialFromProductProductsProductIdMaterialsMaterialIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemoveMaterialFromProductProductsProductIdMaterialsMaterialIdDeleteResponses, RemoveMaterialFromProductProductsProductIdMaterialsMaterialIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'auth',
                type: 'apiKey'
            }
        ],
        url: '/products/{product_id}/materials/{material_id}',
        ...options
    });
};

/**
 * Get material in product bill of materials
 * Get a material in a product's bill of materials.
 */
export const getMaterialInProductBillOfMaterialsProductsProductIdMaterialsMaterialIdGet = <ThrowOnError extends boolean = false>(options: Options<GetMaterialInProductBillOfMaterialsProductsProductIdMaterialsMaterialIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMaterialInProductBillOfMaterialsProductsProductIdMaterialsMaterialIdGetResponses, GetMaterialInProductBillOfMaterialsProductsProductIdMaterialsMaterialIdGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/products/{product_id}/materials/{material_id}',
        ...options
    });
};

/**
 * Update material in product bill of materials
 * Update material in bill of materials for a product.
 */
export const updateProductBillOfMaterialsProductsProductIdMaterialsMaterialIdPatch = <ThrowOnError extends boolean = false>(options: Options<UpdateProductBillOfMaterialsProductsProductIdMaterialsMaterialIdPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateProductBillOfMaterialsProductsProductIdMaterialsMaterialIdPatchResponses, UpdateProductBillOfMaterialsProductsProductIdMaterialsMaterialIdPatchErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'auth',
                type: 'apiKey'
            }
        ],
        url: '/products/{product_id}/materials/{material_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Add single material to product bill of materials
 * Add a single material to a product's bill of materials.
 */
export const addMaterialToProductProductsProductIdMaterialsMaterialIdPost = <ThrowOnError extends boolean = false>(options: Options<AddMaterialToProductProductsProductIdMaterialsMaterialIdPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddMaterialToProductProductsProductIdMaterialsMaterialIdPostResponses, AddMaterialToProductProductsProductIdMaterialsMaterialIdPostErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'auth',
                type: 'apiKey'
            }
        ],
        url: '/products/{product_id}/materials/{material_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Units
 * Get a list of available units.
 */
export const getUnitsUnitsGet = <ThrowOnError extends boolean = false>(options?: Options<GetUnitsUnitsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUnitsUnitsGetResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/units',
        ...options
    });
};

/**
 * Auth:Bearer.Login
 */
export const authBearerLoginAuthBearerLoginPost = <ThrowOnError extends boolean = false>(options: Options<AuthBearerLoginAuthBearerLoginPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AuthBearerLoginAuthBearerLoginPostResponses, AuthBearerLoginAuthBearerLoginPostErrors, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        responseType: 'json',
        url: '/auth/bearer/login',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options.headers
        }
    });
};

/**
 * Auth:Bearer.Logout
 */
export const authBearerLogoutAuthBearerLogoutPost = <ThrowOnError extends boolean = false>(options?: Options<AuthBearerLogoutAuthBearerLogoutPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AuthBearerLogoutAuthBearerLogoutPostResponses, AuthBearerLogoutAuthBearerLogoutPostErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'auth',
                type: 'apiKey'
            }
        ],
        url: '/auth/bearer/logout',
        ...options
    });
};

/**
 * Auth:Cookie.Login
 */
export const authCookieLoginAuthCookieLoginPost = <ThrowOnError extends boolean = false>(options: Options<AuthCookieLoginAuthCookieLoginPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AuthCookieLoginAuthCookieLoginPostResponses, AuthCookieLoginAuthCookieLoginPostErrors, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        responseType: 'json',
        url: '/auth/cookie/login',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options.headers
        }
    });
};

/**
 * Auth:Cookie.Logout
 */
export const authCookieLogoutAuthCookieLogoutPost = <ThrowOnError extends boolean = false>(options?: Options<AuthCookieLogoutAuthCookieLogoutPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AuthCookieLogoutAuthCookieLogoutPostResponses, AuthCookieLogoutAuthCookieLogoutPostErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'auth',
                type: 'apiKey'
            }
        ],
        url: '/auth/cookie/logout',
        ...options
    });
};

/**
 * View all organizations
 * Get a list of all organizations with optional filtering.
 */
export const getOrganizationsOrganizationsGet = <ThrowOnError extends boolean = false>(options?: Options<GetOrganizationsOrganizationsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetOrganizationsOrganizationsGetResponses, GetOrganizationsOrganizationsGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/organizations',
        ...options
    });
};

/**
 * Create new organization
 * Create new organization with current user as owner.
 */
export const createOrganizationOrganizationsPost = <ThrowOnError extends boolean = false>(options: Options<CreateOrganizationOrganizationsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateOrganizationOrganizationsPostResponses, CreateOrganizationOrganizationsPostErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'auth',
                type: 'apiKey'
            }
        ],
        url: '/organizations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * View a single organization
 * Get an organization by ID.
 */
export const getOrganizationOrganizationsOrganizationIdGet = <ThrowOnError extends boolean = false>(options: Options<GetOrganizationOrganizationsOrganizationIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOrganizationOrganizationsOrganizationIdGetResponses, GetOrganizationOrganizationsOrganizationIdGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/organizations/{organization_id}',
        ...options
    });
};

/**
 * Get the members of an organization
 * Get the members of an organization.
 */
export const getOrganizationMembersOrganizationsOrganizationIdMembersGet = <ThrowOnError extends boolean = false>(options: Options<GetOrganizationMembersOrganizationsOrganizationIdMembersGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOrganizationMembersOrganizationsOrganizationIdMembersGetResponses, GetOrganizationMembersOrganizationsOrganizationIdMembersGetErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'auth',
                type: 'apiKey'
            }
        ],
        url: '/organizations/{organization_id}/members',
        ...options
    });
};

/**
 * Join organization
 * Join an organization as a member.
 */
export const joinOrganizationOrganizationsOrganizationIdMembersMePost = <ThrowOnError extends boolean = false>(options: Options<JoinOrganizationOrganizationsOrganizationIdMembersMePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<JoinOrganizationOrganizationsOrganizationIdMembersMePostResponses, JoinOrganizationOrganizationsOrganizationIdMembersMePostErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'auth',
                type: 'apiKey'
            }
        ],
        url: '/organizations/{organization_id}/members/me',
        ...options
    });
};

/**
 * Users:Current User
 */
export const usersCurrentUserUsersMeGet = <ThrowOnError extends boolean = false>(options?: Options<UsersCurrentUserUsersMeGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UsersCurrentUserUsersMeGetResponses, UsersCurrentUserUsersMeGetErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'auth',
                type: 'apiKey'
            }
        ],
        url: '/users/me',
        ...options
    });
};

/**
 * Users:Patch Current User
 */
export const usersPatchCurrentUserUsersMePatch = <ThrowOnError extends boolean = false>(options: Options<UsersPatchCurrentUserUsersMePatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UsersPatchCurrentUserUsersMePatchResponses, UsersPatchCurrentUserUsersMePatchErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'auth',
                type: 'apiKey'
            }
        ],
        url: '/users/me',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Users:Delete User
 */
export const usersDeleteUserUsersIdDelete = <ThrowOnError extends boolean = false>(options: Options<UsersDeleteUserUsersIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<UsersDeleteUserUsersIdDeleteResponses, UsersDeleteUserUsersIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'auth',
                type: 'apiKey'
            }
        ],
        url: '/users/{id}',
        ...options
    });
};

/**
 * Users:User
 */
export const usersUserUsersIdGet = <ThrowOnError extends boolean = false>(options: Options<UsersUserUsersIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UsersUserUsersIdGetResponses, UsersUserUsersIdGetErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'auth',
                type: 'apiKey'
            }
        ],
        url: '/users/{id}',
        ...options
    });
};

/**
 * Users:Patch User
 */
export const usersPatchUserUsersIdPatch = <ThrowOnError extends boolean = false>(options: Options<UsersPatchUserUsersIdPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UsersPatchUserUsersIdPatchResponses, UsersPatchUserUsersIdPatchErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'auth',
                type: 'apiKey'
            }
        ],
        url: '/users/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete your organization as owner
 * Delete organization as owner. Fails if organization has members.
 */
export const deleteMyOrganizationUsersMeOrganizationDelete = <ThrowOnError extends boolean = false>(options?: Options<DeleteMyOrganizationUsersMeOrganizationDeleteData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteMyOrganizationUsersMeOrganizationDeleteResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'auth',
                type: 'apiKey'
            }
        ],
        url: '/users/me/organization',
        ...options
    });
};

/**
 * Get the organization of the current user
 * Get the organization of the current user.
 */
export const getUserOrganizationUsersMeOrganizationGet = <ThrowOnError extends boolean = false>(options?: Options<GetUserOrganizationUsersMeOrganizationGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserOrganizationUsersMeOrganizationGetResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'auth',
                type: 'apiKey'
            }
        ],
        url: '/users/me/organization',
        ...options
    });
};

/**
 * Update your organization
 * Update organization as owner.
 */
export const updateOrganizationUsersMeOrganizationPatch = <ThrowOnError extends boolean = false>(options: Options<UpdateOrganizationUsersMeOrganizationPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateOrganizationUsersMeOrganizationPatchResponses, UpdateOrganizationUsersMeOrganizationPatchErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'auth',
                type: 'apiKey'
            }
        ],
        url: '/users/me/organization',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get the members of the organization of the current user
 * Get the members of the organization of the current user.
 */
export const getUserOrganizationMembersUsersMeOrganizationMembersGet = <ThrowOnError extends boolean = false>(options?: Options<GetUserOrganizationMembersUsersMeOrganizationMembersGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserOrganizationMembersUsersMeOrganizationMembersGetResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'auth',
                type: 'apiKey'
            }
        ],
        url: '/users/me/organization/members',
        ...options
    });
};

/**
 * Leave current organization
 * Leave current organization. Cannot be used by organization owner.
 */
export const leaveOrganizationUsersMeOrganizationMembershipDelete = <ThrowOnError extends boolean = false>(options?: Options<LeaveOrganizationUsersMeOrganizationMembershipDeleteData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<LeaveOrganizationUsersMeOrganizationMembershipDeleteResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'auth',
                type: 'apiKey'
            }
        ],
        url: '/users/me/organization/membership',
        ...options
    });
};

/**
 * Get Raspberry Pi cameras of the current user
 * Get all Raspberry Pi cameras of the current user.
 */
export const getUserCamerasPluginsRpiCamCamerasGet = <ThrowOnError extends boolean = false>(options?: Options<GetUserCamerasPluginsRpiCamCamerasGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserCamerasPluginsRpiCamCamerasGetResponses, GetUserCamerasPluginsRpiCamCamerasGetErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'auth',
                type: 'apiKey'
            }
        ],
        url: '/plugins/rpi-cam/cameras',
        ...options
    });
};

/**
 * Register new Raspberry Pi camera
 * Register a new Raspberry Pi camera.
 */
export const registerUserCameraPluginsRpiCamCamerasPost = <ThrowOnError extends boolean = false>(options: Options<RegisterUserCameraPluginsRpiCamCamerasPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RegisterUserCameraPluginsRpiCamCamerasPostResponses, RegisterUserCameraPluginsRpiCamCamerasPostErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'auth',
                type: 'apiKey'
            }
        ],
        url: '/plugins/rpi-cam/cameras',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Raspberry Pi camera
 * Delete Raspberry Pi camera.
 */
export const deleteUserCameraPluginsRpiCamCamerasCameraIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteUserCameraPluginsRpiCamCamerasCameraIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUserCameraPluginsRpiCamCamerasCameraIdDeleteResponses, DeleteUserCameraPluginsRpiCamCamerasCameraIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'auth',
                type: 'apiKey'
            }
        ],
        url: '/plugins/rpi-cam/cameras/{camera_id}',
        ...options
    });
};

/**
 * Get Raspberry Pi camera by ID
 * Get single Raspberry Pi camera by ID, if owned by the current user.
 */
export const getUserCameraPluginsRpiCamCamerasCameraIdGet = <ThrowOnError extends boolean = false>(options: Options<GetUserCameraPluginsRpiCamCamerasCameraIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserCameraPluginsRpiCamCamerasCameraIdGetResponses, GetUserCameraPluginsRpiCamCamerasCameraIdGetErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'auth',
                type: 'apiKey'
            }
        ],
        url: '/plugins/rpi-cam/cameras/{camera_id}',
        ...options
    });
};

/**
 * Update Raspberry Pi camera
 * Update Raspberry Pi camera.
 */
export const updateUserCameraPluginsRpiCamCamerasCameraIdPatch = <ThrowOnError extends boolean = false>(options: Options<UpdateUserCameraPluginsRpiCamCamerasCameraIdPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateUserCameraPluginsRpiCamCamerasCameraIdPatchResponses, UpdateUserCameraPluginsRpiCamCamerasCameraIdPatchErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'auth',
                type: 'apiKey'
            }
        ],
        url: '/plugins/rpi-cam/cameras/{camera_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Raspberry Pi camera online status
 * Get Raspberry Pi camera online status.
 */
export const getUserCameraStatusPluginsRpiCamCamerasCameraIdStatusGet = <ThrowOnError extends boolean = false>(options: Options<GetUserCameraStatusPluginsRpiCamCamerasCameraIdStatusGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserCameraStatusPluginsRpiCamCamerasCameraIdStatusGetResponses, GetUserCameraStatusPluginsRpiCamCamerasCameraIdStatusGetErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'auth',
                type: 'apiKey'
            }
        ],
        url: '/plugins/rpi-cam/cameras/{camera_id}/status',
        ...options
    });
};

/**
 * Regenerate API key for the Raspberry Pi camera
 * Regenerate API key for Raspberry Pi camera.
 */
export const regenerateApiKeyPluginsRpiCamCamerasCameraIdRegenerateApiKeyPost = <ThrowOnError extends boolean = false>(options: Options<RegenerateApiKeyPluginsRpiCamCamerasCameraIdRegenerateApiKeyPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RegenerateApiKeyPluginsRpiCamCamerasCameraIdRegenerateApiKeyPostResponses, RegenerateApiKeyPluginsRpiCamCamerasCameraIdRegenerateApiKeyPostErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'auth',
                type: 'apiKey'
            }
        ],
        url: '/plugins/rpi-cam/cameras/{camera_id}/regenerate-api-key',
        ...options
    });
};

/**
 * Capture a still image with a remote Raspberry Pi Camera
 * Capture a still image with a remote Raspberry Pi Camera and store it in the file storage. Send optional parent type and ID in the request body to associate the image with another object.
 */
export const captureImagePluginsRpiCamCamerasCameraIdImagePost = <ThrowOnError extends boolean = false>(options: Options<CaptureImagePluginsRpiCamCamerasCameraIdImagePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CaptureImagePluginsRpiCamCamerasCameraIdImagePostResponses, CaptureImagePluginsRpiCamCamerasCameraIdImagePostErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'auth',
                type: 'apiKey'
            }
        ],
        url: '/plugins/rpi-cam/cameras/{camera_id}/image',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Camera Stream Status
 * Get current stream status.
 */
export const getCameraStreamStatusPluginsRpiCamCamerasCameraIdStreamStatusGet = <ThrowOnError extends boolean = false>(options: Options<GetCameraStreamStatusPluginsRpiCamCamerasCameraIdStreamStatusGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCameraStreamStatusPluginsRpiCamCamerasCameraIdStreamStatusGetResponses, GetCameraStreamStatusPluginsRpiCamCamerasCameraIdStreamStatusGetErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'auth',
                type: 'apiKey'
            }
        ],
        url: '/plugins/rpi-cam/cameras/{camera_id}/stream/status',
        ...options
    });
};

/**
 * Stop the active stream
 * Stop the active stream (either youtube recording or preview stream).
 */
export const stopAllStreamsPluginsRpiCamCamerasCameraIdStreamStopDelete = <ThrowOnError extends boolean = false>(options: Options<StopAllStreamsPluginsRpiCamCamerasCameraIdStreamStopDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<StopAllStreamsPluginsRpiCamCamerasCameraIdStreamStopDeleteResponses, StopAllStreamsPluginsRpiCamCamerasCameraIdStreamStopDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'auth',
                type: 'apiKey'
            }
        ],
        url: '/plugins/rpi-cam/cameras/{camera_id}/stream/stop',
        ...options
    });
};

/**
 * Start recording to YouTube
 * Start recording to YouTube. Video will be stored and can be associated with a product.
 */
export const startRecordingPluginsRpiCamCamerasCameraIdStreamRecordStartPost = <ThrowOnError extends boolean = false>(options: Options<StartRecordingPluginsRpiCamCamerasCameraIdStreamRecordStartPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<StartRecordingPluginsRpiCamCamerasCameraIdStreamRecordStartPostResponses, StartRecordingPluginsRpiCamCamerasCameraIdStreamRecordStartPostErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'auth',
                type: 'apiKey'
            }
        ],
        url: '/plugins/rpi-cam/cameras/{camera_id}/stream/record/start',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Stop recording to YouTube
 * Stop recording and save video to database.
 */
export const stopRecordingPluginsRpiCamCamerasCameraIdStreamRecordStopDelete = <ThrowOnError extends boolean = false>(options: Options<StopRecordingPluginsRpiCamCamerasCameraIdStreamRecordStopDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<StopRecordingPluginsRpiCamCamerasCameraIdStreamRecordStopDeleteResponses, StopRecordingPluginsRpiCamCamerasCameraIdStreamRecordStopDeleteErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'auth',
                type: 'apiKey'
            }
        ],
        url: '/plugins/rpi-cam/cameras/{camera_id}/stream/record/stop',
        ...options
    });
};

/**
 * Start preview stream
 * Start local HLS preview stream. Stream will not be recorded.
 */
export const startPreviewPluginsRpiCamCamerasCameraIdStreamPreviewStartPost = <ThrowOnError extends boolean = false>(options: Options<StartPreviewPluginsRpiCamCamerasCameraIdStreamPreviewStartPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<StartPreviewPluginsRpiCamCamerasCameraIdStreamPreviewStartPostResponses, StartPreviewPluginsRpiCamCamerasCameraIdStreamPreviewStartPostErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'auth',
                type: 'apiKey'
            }
        ],
        url: '/plugins/rpi-cam/cameras/{camera_id}/stream/preview/start',
        ...options
    });
};

/**
 * Stop preview stream
 * Stop recording and save video to database.
 */
export const stopPreviewPluginsRpiCamCamerasCameraIdStreamPreviewStopDelete = <ThrowOnError extends boolean = false>(options: Options<StopPreviewPluginsRpiCamCamerasCameraIdStreamPreviewStopDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<StopPreviewPluginsRpiCamCamerasCameraIdStreamPreviewStopDeleteResponses, StopPreviewPluginsRpiCamCamerasCameraIdStreamPreviewStopDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'auth',
                type: 'apiKey'
            }
        ],
        url: '/plugins/rpi-cam/cameras/{camera_id}/stream/preview/stop',
        ...options
    });
};

/**
 * Access HLS stream files from camera
 * Fetches and serves HLS stream files (.m3u8, .ts) from the camera
 */
export const hlsFileProxyPluginsRpiCamCamerasCameraIdStreamPreviewHlsFilePathGet = <ThrowOnError extends boolean = false>(options: Options<HlsFileProxyPluginsRpiCamCamerasCameraIdStreamPreviewHlsFilePathGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<HlsFileProxyPluginsRpiCamCamerasCameraIdStreamPreviewHlsFilePathGetResponses, HlsFileProxyPluginsRpiCamCamerasCameraIdStreamPreviewHlsFilePathGetErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'auth',
                type: 'apiKey'
            }
        ],
        url: '/plugins/rpi-cam/cameras/{camera_id}/stream/preview/hls/{file_path}',
        ...options
    });
};

/**
 * Watch preview stream
 * Returns HTML viewer for remote HLS stream.
 */
export const watchPreviewPluginsRpiCamCamerasCameraIdStreamPreviewWatchGet = <ThrowOnError extends boolean = false>(options: Options<WatchPreviewPluginsRpiCamCamerasCameraIdStreamPreviewWatchGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<WatchPreviewPluginsRpiCamCamerasCameraIdStreamPreviewWatchGetResponses, WatchPreviewPluginsRpiCamCamerasCameraIdStreamPreviewWatchGetErrors, ThrowOnError>({
        responseType: 'text',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'auth',
                type: 'apiKey'
            }
        ],
        url: '/plugins/rpi-cam/cameras/{camera_id}/stream/preview/watch',
        ...options
    });
};

/**
 * Initialize camera
 * Initialize camera for a given use mode (photo or video).
 */
export const initCameraPluginsRpiCamCamerasCameraIdOpenPost = <ThrowOnError extends boolean = false>(options: Options<InitCameraPluginsRpiCamCamerasCameraIdOpenPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<InitCameraPluginsRpiCamCamerasCameraIdOpenPostResponses, InitCameraPluginsRpiCamCamerasCameraIdOpenPostErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'auth',
                type: 'apiKey'
            }
        ],
        url: '/plugins/rpi-cam/cameras/{camera_id}/open',
        ...options
    });
};

/**
 * Close camera
 * Close camera and free resources.
 */
export const closeCameraPluginsRpiCamCamerasCameraIdClosePost = <ThrowOnError extends boolean = false>(options: Options<CloseCameraPluginsRpiCamCamerasCameraIdClosePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CloseCameraPluginsRpiCamCamerasCameraIdClosePostResponses, CloseCameraPluginsRpiCamCamerasCameraIdClosePostErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: 'auth',
                type: 'apiKey'
            }
        ],
        url: '/plugins/rpi-cam/cameras/{camera_id}/close',
        ...options
    });
};
