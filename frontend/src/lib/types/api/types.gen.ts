// This file is auto-generated by @hey-api/openapi-ts

/**
 * BearerResponse
 */
export type BearerResponse = {
    /**
     * Access Token
     */
    access_token: string;
    /**
     * Token Type
     */
    token_type: string;
};

/**
 * Body_auth_bearer_login_auth_bearer_login_post
 */
export type BodyAuthBearerLoginAuthBearerLoginPost = {
    /**
     * Grant Type
     */
    grant_type?: string | null;
    /**
     * Username
     */
    username: string;
    /**
     * Password
     */
    password: string;
    /**
     * Scope
     */
    scope?: string;
    /**
     * Client Id
     */
    client_id?: string | null;
    /**
     * Client Secret
     */
    client_secret?: string | null;
};

/**
 * Body_auth_cookie_login_auth_cookie_login_post
 */
export type BodyAuthCookieLoginAuthCookieLoginPost = {
    /**
     * Grant Type
     */
    grant_type?: string | null;
    /**
     * Username
     */
    username: string;
    /**
     * Password
     */
    password: string;
    /**
     * Scope
     */
    scope?: string;
    /**
     * Client Id
     */
    client_id?: string | null;
    /**
     * Client Secret
     */
    client_secret?: string | null;
};

/**
 * Body_capture_image_plugins_rpi_cam_cameras__camera_id__image_post
 */
export type BodyCaptureImagePluginsRpiCamCamerasCameraIdImagePost = {
    /**
     * Product Id
     * ID of product to associate the image with
     */
    product_id: number;
    /**
     * Description
     * Custom description for the image
     */
    description?: string | null;
};

/**
 * Body_start_recording_plugins_rpi_cam_cameras__camera_id__stream_record_start_post
 */
export type BodyStartRecordingPluginsRpiCamCamerasCameraIdStreamRecordStartPost = {
    /**
     * Product Id
     * ID of product to associate the video with
     */
    product_id: number;
    /**
     * Title
     * Custom video title
     */
    title?: string | null;
    /**
     * Description
     * Custom description for the video
     */
    description?: string | null;
    /**
     * Privacy status for the YouTube video
     */
    privacy_status?: YouTubePrivacyStatus;
};

/**
 * Body_upload_file_admin_materials__material_id__files_post
 */
export type BodyUploadFileAdminMaterialsMaterialIdFilesPost = {
    /**
     * File
     * A file to upload
     */
    file: Blob | File;
    /**
     * Description
     */
    description?: string | null;
};

/**
 * Body_upload_file_admin_product_types__product_type_id__files_post
 */
export type BodyUploadFileAdminProductTypesProductTypeIdFilesPost = {
    /**
     * File
     * A file to upload
     */
    file: Blob | File;
    /**
     * Description
     */
    description?: string | null;
};

/**
 * Body_upload_file_products__product_id__files_post
 */
export type BodyUploadFileProductsProductIdFilesPost = {
    /**
     * File
     * A file to upload
     */
    file: Blob | File;
    /**
     * Description
     */
    description?: string | null;
};

/**
 * Body_upload_image_admin_materials__material_id__images_post
 */
export type BodyUploadImageAdminMaterialsMaterialIdImagesPost = {
    /**
     * File
     * An image to upload
     */
    file: Blob | File;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Image Metadata
     */
    image_metadata?: string | null;
};

/**
 * Body_upload_image_admin_product_types__product_type_id__images_post
 */
export type BodyUploadImageAdminProductTypesProductTypeIdImagesPost = {
    /**
     * File
     * An image to upload
     */
    file: Blob | File;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Image Metadata
     */
    image_metadata?: string | null;
};

/**
 * Body_upload_image_products__product_id__images_post
 */
export type BodyUploadImageProductsProductIdImagesPost = {
    /**
     * File
     * An image to upload
     */
    file: Blob | File;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Image Metadata
     */
    image_metadata?: string | null;
};

/**
 * CameraConnectionStatus
 * Camera connection status.
 */
export type CameraConnectionStatus = 'online' | 'offline' | 'unauthorized' | 'forbidden' | 'error';

/**
 * CameraCreate
 * Schema for creating a camera.
 */
export type CameraCreateReadable = {
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Url
     * HTTP(S) URL where the camera API is hosted
     */
    url: string;
    /**
     * Auth Headers
     * List of additional authentication headers for the camera API
     */
    auth_headers?: Array<HeaderCreateReadable> | null;
};

/**
 * CameraCreate
 * Schema for creating a camera.
 */
export type CameraCreateWritable = {
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Url
     * HTTP(S) URL where the camera API is hosted
     */
    url: string;
    /**
     * Auth Headers
     * List of additional authentication headers for the camera API
     */
    auth_headers?: Array<HeaderCreateWritable> | null;
};

/**
 * CameraMode
 * Camera mode.
 */
export type CameraMode = 'photo' | 'video';

/**
 * CameraRead
 * Basic Camera Read schema.
 */
export type CameraRead = {
    /**
     * Created At
     */
    created_at?: string;
    /**
     * Updated At
     */
    updated_at?: string;
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Url
     * HTTP(S) URL where the camera API is hosted
     */
    url: string;
    /**
     * Id
     */
    id: number | string;
    /**
     * Owner Id
     */
    owner_id: string;
};

/**
 * CameraReadWithCredentials
 * Schema for camera read with credentials.
 */
export type CameraReadWithCredentials = {
    /**
     * Created At
     */
    created_at?: string;
    /**
     * Updated At
     */
    updated_at?: string;
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Url
     * HTTP(S) URL where the camera API is hosted
     */
    url: string;
    /**
     * Id
     */
    id: number | string;
    /**
     * Owner Id
     */
    owner_id: string;
    /**
     * Api Key
     */
    api_key: string;
    /**
     * Auth Headers
     */
    auth_headers: {
        [key: string]: string;
    } | null;
};

/**
 * CameraReadWithStatus
 * Schema for camera read with online status.
 */
export type CameraReadWithStatus = {
    /**
     * Created At
     */
    created_at?: string;
    /**
     * Updated At
     */
    updated_at?: string;
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Url
     * HTTP(S) URL where the camera API is hosted
     */
    url: string;
    /**
     * Id
     */
    id: number | string;
    /**
     * Owner Id
     */
    owner_id: string;
    status: CameraStatus;
};

/**
 * CameraStatus
 * Camera connection status and details.
 */
export type CameraStatus = {
    /**
     * Connection status of the camera
     */
    connection: CameraConnectionStatus;
    /**
     * Additional status details from the Raspberry Pi camera API
     */
    details?: CameraStatusDetails | null;
};

/**
 * CameraStatusDetails
 * API response model for camera status.
 */
export type CameraStatusDetails = {
    current_mode?: CameraMode | null;
    stream?: StreamView | null;
};

/**
 * CameraUpdate
 * Schema for updating a camera.
 */
export type CameraUpdateReadable = {
    /**
     * Name
     */
    name?: string | null;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Url
     * HTTP(S) URL where the camera API is hosted
     */
    url?: string | null;
    /**
     * Auth Headers
     * List of additional authentication headers for the camera API
     */
    auth_headers?: Array<HeaderCreateReadable> | null;
    /**
     * Owner Id
     */
    owner_id?: string | null;
};

/**
 * CameraUpdate
 * Schema for updating a camera.
 */
export type CameraUpdateWritable = {
    /**
     * Name
     */
    name?: string | null;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Url
     * HTTP(S) URL where the camera API is hosted
     */
    url?: string | null;
    /**
     * Auth Headers
     * List of additional authentication headers for the camera API
     */
    auth_headers?: Array<HeaderCreateWritable> | null;
    /**
     * Owner Id
     */
    owner_id?: string | null;
};

/**
 * CategoryCreateWithSubCategories
 * Schema for creating a new category, with optional subcategories.
 */
export type CategoryCreateWithSubCategories = {
    /**
     * Name
     * Name of the category
     */
    name: string;
    /**
     * Description
     * Description of the category
     */
    description?: string | null;
    /**
     * External Id
     * ID of the category in the external taxonomy
     */
    external_id?: string | null;
    /**
     * Subcategories
     * List of subcategories
     */
    subcategories?: Array<CategoryCreateWithinCategoryWithSubCategories>;
    /**
     * Supercategory Id
     */
    supercategory_id?: number | null;
    /**
     * Taxonomy Id
     */
    taxonomy_id?: number | null;
};

/**
 * CategoryCreateWithinCategoryWithSubCategories
 * Schema for creating a new category within a category, with optional subcategories.
 */
export type CategoryCreateWithinCategoryWithSubCategories = {
    /**
     * Name
     * Name of the category
     */
    name: string;
    /**
     * Description
     * Description of the category
     */
    description?: string | null;
    /**
     * External Id
     * ID of the category in the external taxonomy
     */
    external_id?: string | null;
    /**
     * Subcategories
     * List of subcategories
     */
    subcategories?: Array<CategoryCreateWithinCategoryWithSubCategories>;
};

/**
 * CategoryCreateWithinTaxonomyWithSubCategories
 * Schema for creating a new category within a taxonomy, with optional subcategories.
 */
export type CategoryCreateWithinTaxonomyWithSubCategories = {
    /**
     * Name
     * Name of the category
     */
    name: string;
    /**
     * Description
     * Description of the category
     */
    description?: string | null;
    /**
     * External Id
     * ID of the category in the external taxonomy
     */
    external_id?: string | null;
    /**
     * Subcategories
     * List of subcategories
     */
    subcategories?: Array<CategoryCreateWithinCategoryWithSubCategories>;
    /**
     * Supercategory Id
     */
    supercategory_id?: number | null;
};

/**
 * CategoryRead
 * Schema for reading flat category information.
 */
export type CategoryRead = {
    /**
     * Name
     * Name of the category
     */
    name: string;
    /**
     * Description
     * Description of the category
     */
    description?: string | null;
    /**
     * External Id
     * ID of the category in the external taxonomy
     */
    external_id?: string | null;
    /**
     * Id
     */
    id: number | string;
    /**
     * Taxonomy Id
     * ID of the taxonomy
     */
    taxonomy_id: number;
    /**
     * Supercategory Id
     */
    supercategory_id?: number | null;
};

/**
 * CategoryReadAsSubCategory
 * Schema for reading subcategory information.
 */
export type CategoryReadAsSubCategory = {
    /**
     * Name
     * Name of the category
     */
    name: string;
    /**
     * Description
     * Description of the category
     */
    description?: string | null;
    /**
     * External Id
     * ID of the category in the external taxonomy
     */
    external_id?: string | null;
    /**
     * Id
     */
    id: number | string;
};

/**
 * CategoryReadAsSubCategoryWithRecursiveSubCategories
 * Schema for reading category information with recursive subcategories.
 */
export type CategoryReadAsSubCategoryWithRecursiveSubCategories = {
    /**
     * Name
     * Name of the category
     */
    name: string;
    /**
     * Description
     * Description of the category
     */
    description?: string | null;
    /**
     * External Id
     * ID of the category in the external taxonomy
     */
    external_id?: string | null;
    /**
     * Id
     */
    id: number | string;
    /**
     * Subcategories
     * List of subcategories
     */
    subcategories?: Array<CategoryReadAsSubCategoryWithRecursiveSubCategories>;
};

/**
 * CategoryReadWithRecursiveSubCategories
 * Schema for reading base category information with recursive subcategories.
 */
export type CategoryReadWithRecursiveSubCategories = {
    /**
     * Name
     * Name of the category
     */
    name: string;
    /**
     * Description
     * Description of the category
     */
    description?: string | null;
    /**
     * External Id
     * ID of the category in the external taxonomy
     */
    external_id?: string | null;
    /**
     * Id
     */
    id: number | string;
    /**
     * Taxonomy Id
     * ID of the taxonomy
     */
    taxonomy_id: number;
    /**
     * Supercategory Id
     */
    supercategory_id?: number | null;
    /**
     * Subcategories
     * List of subcategories
     */
    subcategories?: Array<CategoryReadAsSubCategoryWithRecursiveSubCategories>;
};

/**
 * CategoryReadWithRelationshipsAndFlatSubCategories
 * Schema for reading category information with flat (one level deep) subcategories.
 */
export type CategoryReadWithRelationshipsAndFlatSubCategories = {
    /**
     * Name
     * Name of the category
     */
    name: string;
    /**
     * Description
     * Description of the category
     */
    description?: string | null;
    /**
     * External Id
     * ID of the category in the external taxonomy
     */
    external_id?: string | null;
    /**
     * Id
     */
    id: number | string;
    /**
     * Taxonomy Id
     * ID of the taxonomy
     */
    taxonomy_id: number;
    /**
     * Supercategory Id
     */
    supercategory_id?: number | null;
    /**
     * Materials
     * List of materials linked to the category
     */
    materials?: Array<MaterialRead>;
    /**
     * Product Types
     * List of product types linked to the category
     */
    product_types?: Array<ProductTypeRead>;
    /**
     * Subcategories
     * List of subcategories
     */
    subcategories?: Array<CategoryReadAsSubCategory>;
};

/**
 * CategoryUpdate
 * Schema for the partial update of a category.
 *
 * Updating the parent_id or taxonomy_id is not allowed, as it greatly increases the risk
 * for self-referential loops and other inconsistencies.
 */
export type CategoryUpdate = {
    /**
     * Name
     * Name of the category
     */
    name?: string | null;
    /**
     * Description
     * Description of the category
     */
    description?: string | null;
};

/**
 * ComponentCreateWithComponents
 * Schema for creating a component with optional sub-components.
 *
 * This schema is used for recursive creation of components with sub-components.
 *
 * Owner ID and parent ID are inferred from the parent product within the CRUD layer.
 */
export type ComponentCreateWithComponents = {
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Brand
     */
    brand?: string | null;
    /**
     * Model
     */
    model?: string | null;
    /**
     * Dismantling Notes
     * Notes on the dismantling process of the product.
     */
    dismantling_notes?: string | null;
    /**
     * Dismantling Time Start
     * Start of the dismantling time, in ISO 8601 format with timezone info
     */
    dismantling_time_start?: string;
    /**
     * Dismantling Time End
     * End of the dismantling time, in ISO 8601 format with timezone info
     */
    dismantling_time_end?: string | null;
    /**
     * Product Type Id
     */
    product_type_id?: number | null;
    /**
     * Physical properties of the product
     */
    physical_properties?: PhysicalPropertiesCreate | null;
    /**
     * Videos
     * Disassembly videos
     */
    videos?: Array<VideoCreateWithinProduct>;
    /**
     * Bill Of Materials
     * Bill of materials with quantities and units
     */
    bill_of_materials?: Array<MaterialProductLinkCreateWithinProduct>;
    /**
     * Amount In Parent
     * Quantity within parent product. Required for component products.
     */
    amount_in_parent: number;
    /**
     * Components
     * Set of component products
     */
    components?: Array<ComponentCreateWithComponents>;
};

/**
 * ComponentRead
 * Base schema for reading component information.
 */
export type ComponentRead = {
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Brand
     */
    brand?: string | null;
    /**
     * Model
     */
    model?: string | null;
    /**
     * Dismantling Notes
     * Notes on the dismantling process of the product.
     */
    dismantling_notes?: string | null;
    /**
     * Dismantling Time Start
     */
    dismantling_time_start?: string;
    /**
     * Dismantling Time End
     */
    dismantling_time_end?: string;
    /**
     * Id
     */
    id: number | string;
    /**
     * Product Type Id
     */
    product_type_id?: number | null;
    /**
     * Parent Id
     */
    parent_id?: number | null;
    /**
     * Amount In Parent
     * Quantity within parent product
     */
    amount_in_parent?: number | null;
};

/**
 * ComponentReadWithRecursiveComponents
 * Schema for reading product information with recursive components.
 */
export type ComponentReadWithRecursiveComponents = {
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Brand
     */
    brand?: string | null;
    /**
     * Model
     */
    model?: string | null;
    /**
     * Dismantling Notes
     * Notes on the dismantling process of the product.
     */
    dismantling_notes?: string | null;
    /**
     * Dismantling Time Start
     */
    dismantling_time_start?: string;
    /**
     * Dismantling Time End
     */
    dismantling_time_end?: string;
    /**
     * Id
     */
    id: number | string;
    /**
     * Product Type Id
     */
    product_type_id?: number | null;
    /**
     * Parent Id
     */
    parent_id?: number | null;
    /**
     * Amount In Parent
     * Quantity within parent product
     */
    amount_in_parent?: number | null;
    /**
     * Components
     * List of component products
     */
    components?: Array<ComponentReadWithRecursiveComponents>;
};

/**
 * ErrorModel
 */
export type ErrorModel = {
    /**
     * Detail
     */
    detail: string | {
        [key: string]: string;
    };
};

/**
 * FileParentType
 * Enumeration of types that can have files.
 */
export type FileParentType = 'product' | 'product_type' | 'material';

/**
 * FileRead
 * Schema for reading file information.
 */
export type FileRead = {
    /**
     * Created At
     */
    created_at?: string;
    /**
     * Updated At
     */
    updated_at?: string;
    /**
     * Description
     * Description of the file
     */
    description?: string | null;
    /**
     * Id
     */
    id: number | string;
    /**
     * Filename
     */
    filename: string;
    /**
     * File Url
     */
    file_url: string;
    /**
     * Parent Id
     * ID of the parent object
     */
    parent_id: number;
    /**
     * Type of the parent object, e.g. product, product_type, material
     */
    parent_type: FileParentType;
};

/**
 * FileReadWithinParent
 * Schema for reading file information within a parent object.
 */
export type FileReadWithinParent = {
    /**
     * Created At
     */
    created_at?: string;
    /**
     * Updated At
     */
    updated_at?: string;
    /**
     * Description
     * Description of the file
     */
    description?: string | null;
    /**
     * Id
     */
    id: number | string;
    /**
     * Filename
     */
    filename: string;
    /**
     * File Url
     */
    file_url: string;
};

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
    /**
     * Detail
     */
    detail?: Array<ValidationError>;
};

/**
 * HeaderCreate
 * HTTP header key-value pair with validation.
 */
export type HeaderCreateReadable = {
    /**
     * Key
     * Header key
     */
    key: string;
};

/**
 * HeaderCreate
 * HTTP header key-value pair with validation.
 */
export type HeaderCreateWritable = {
    /**
     * Key
     * Header key
     */
    key: string;
    /**
     * Value
     * Header value
     */
    value: string;
};

/**
 * ImageParentType
 * Enumeration of types that can have images.
 */
export type ImageParentType = 'product' | 'product_type' | 'material';

/**
 * ImageRead
 * Schema for reading image information.
 */
export type ImageRead = {
    /**
     * Created At
     */
    created_at?: string;
    /**
     * Updated At
     */
    updated_at?: string;
    /**
     * Description
     * Description of the image
     */
    description?: string | null;
    /**
     * Image Metadata
     * Image metadata as a JSON dict
     */
    image_metadata?: {
        [key: string]: unknown;
    } | null;
    /**
     * Id
     */
    id: number | string;
    /**
     * Filename
     */
    filename: string;
    /**
     * Image Url
     */
    image_url: string;
    /**
     * Parent Id
     */
    parent_id: number;
    /**
     * Type of the object that the image belongs to, e.g. product, product_type, material
     */
    parent_type: ImageParentType;
};

/**
 * ImageReadWithinParent
 * Schema for reading image information within a parent object.
 */
export type ImageReadWithinParent = {
    /**
     * Created At
     */
    created_at?: string;
    /**
     * Updated At
     */
    updated_at?: string;
    /**
     * Description
     * Description of the image
     */
    description?: string | null;
    /**
     * Image Metadata
     * Image metadata as a JSON dict
     */
    image_metadata?: {
        [key: string]: unknown;
    } | null;
    /**
     * Id
     */
    id: number | string;
    /**
     * Filename
     */
    filename: string;
    /**
     * Image Url
     */
    image_url: string;
};

/**
 * Links
 */
export type Links = {
    /**
     * First
     */
    first?: string | null;
    /**
     * Last
     */
    last?: string | null;
    /**
     * Self
     */
    self?: string | null;
    /**
     * Next
     */
    next?: string | null;
    /**
     * Prev
     */
    prev?: string | null;
};

/**
 * MaterialCreate
 * Schema for creating a material.
 */
export type MaterialCreate = {
    /**
     * Name
     * Name of the Material
     */
    name: string;
    /**
     * Description
     * Description of the Material
     */
    description?: string | null;
    /**
     * Source
     * Source of the material data, e.g. URL, IRI or citation key
     */
    source?: string | null;
    /**
     * Density Kg M3
     * Volumetric density (kg/m³)
     */
    density_kg_m3?: number | null;
    /**
     * Is Crm
     * Is this material a Critical Raw Material (CRM)?
     */
    is_crm?: boolean | null;
};

/**
 * MaterialCreateWithCategories
 * Schema for creating a material with links to existing categories.
 */
export type MaterialCreateWithCategories = {
    /**
     * Name
     * Name of the Material
     */
    name: string;
    /**
     * Description
     * Description of the Material
     */
    description?: string | null;
    /**
     * Source
     * Source of the material data, e.g. URL, IRI or citation key
     */
    source?: string | null;
    /**
     * Density Kg M3
     * Volumetric density (kg/m³)
     */
    density_kg_m3?: number | null;
    /**
     * Is Crm
     * Is this material a Critical Raw Material (CRM)?
     */
    is_crm?: boolean | null;
    /**
     * Category Ids
     * List of category IDs
     */
    category_ids?: Array<number>;
};

/**
 * MaterialProductLinkCreateWithinProduct
 * Schema for creating material-product links from the product side.
 */
export type MaterialProductLinkCreateWithinProduct = {
    /**
     * Quantity
     * Quantity of the material in the product
     */
    quantity: number;
    /**
     * Unit of the quantity, e.g. kg, g, m
     */
    unit?: Unit;
    /**
     * Material Id
     * ID of the material in the product
     */
    material_id: number;
};

/**
 * MaterialProductLinkCreateWithinProductAndMaterial
 * Schema for creating material-product links from the product side, with an external material ID.
 */
export type MaterialProductLinkCreateWithinProductAndMaterial = {
    /**
     * Quantity
     * Quantity of the material in the product
     */
    quantity: number;
    /**
     * Unit of the quantity, e.g. kg, g, m
     */
    unit?: Unit;
};

/**
 * MaterialProductLinkReadWithinMaterial
 * Schema for reading material-product links from the material side.
 */
export type MaterialProductLinkReadWithinMaterial = {
    /**
     * Created At
     */
    created_at?: string;
    /**
     * Updated At
     */
    updated_at?: string;
    /**
     * Quantity
     * Quantity of the material in the product
     */
    quantity: number;
    /**
     * Unit of the quantity, e.g. kg, g, m
     */
    unit?: Unit;
    /**
     * Product Id
     */
    product_id: number;
    product: ProductRead;
};

/**
 * MaterialProductLinkReadWithinProduct
 * Schema for reading material-product links from the product side.
 */
export type MaterialProductLinkReadWithinProduct = {
    /**
     * Created At
     */
    created_at?: string;
    /**
     * Updated At
     */
    updated_at?: string;
    /**
     * Quantity
     * Quantity of the material in the product
     */
    quantity: number;
    /**
     * Unit of the quantity, e.g. kg, g, m
     */
    unit?: Unit;
    /**
     * Material Id
     */
    material_id: number;
    material: MaterialRead;
};

/**
 * MaterialProductLinkUpdate
 * Schema for updating material-product links.
 */
export type MaterialProductLinkUpdate = {
    /**
     * Quantity
     */
    quantity: number | null;
    unit?: Unit | null;
};

/**
 * MaterialRead
 * Schema for reading material information.
 */
export type MaterialRead = {
    /**
     * Name
     * Name of the Material
     */
    name: string;
    /**
     * Description
     * Description of the Material
     */
    description?: string | null;
    /**
     * Source
     * Source of the material data, e.g. URL, IRI or citation key
     */
    source?: string | null;
    /**
     * Density Kg M3
     * Volumetric density (kg/m³)
     */
    density_kg_m3?: number | null;
    /**
     * Is Crm
     * Is this material a Critical Raw Material (CRM)?
     */
    is_crm?: boolean | null;
    /**
     * Id
     */
    id: number | string;
};

/**
 * MaterialReadWithRelationships
 * Schema for reading material information with all relationships.
 */
export type MaterialReadWithRelationships = {
    /**
     * Name
     * Name of the Material
     */
    name: string;
    /**
     * Description
     * Description of the Material
     */
    description?: string | null;
    /**
     * Source
     * Source of the material data, e.g. URL, IRI or citation key
     */
    source?: string | null;
    /**
     * Density Kg M3
     * Volumetric density (kg/m³)
     */
    density_kg_m3?: number | null;
    /**
     * Is Crm
     * Is this material a Critical Raw Material (CRM)?
     */
    is_crm?: boolean | null;
    /**
     * Id
     */
    id: number | string;
    /**
     * Categories
     * List of categories linked to the material
     */
    categories?: Array<CategoryRead>;
    /**
     * Product Links
     * List of products that have this material
     */
    product_links?: Array<MaterialProductLinkReadWithinMaterial>;
    /**
     * Images
     * List of images for the material
     */
    images?: Array<ImageRead>;
    /**
     * Files
     * List of files for the material
     */
    files?: Array<FileRead>;
};

/**
 * MaterialUpdate
 * Schema for a partial update of a material.
 */
export type MaterialUpdate = {
    /**
     * Name
     * Name of the Material
     */
    name?: string | null;
    /**
     * Description
     * Description of the Material
     */
    description?: string | null;
    /**
     * Source
     * Source of the material data, e.g. URL, IRI or citation key
     */
    source?: string | null;
    /**
     * Density Kg M3
     * Volumetric density (kg/m³)
     */
    density_kg_m3?: number | null;
    /**
     * Is Crm
     * Is this material a Critical Raw Material (CRM)?
     */
    is_crm?: boolean | null;
};

/**
 * OAuth2AuthorizeResponse
 */
export type OAuth2AuthorizeResponse = {
    /**
     * Authorization Url
     */
    authorization_url: string;
};

/**
 * OrganizationCreate
 * Create schema for organizations.
 */
export type OrganizationCreate = {
    /**
     * Name
     */
    name: string;
    /**
     * Location
     */
    location?: string | null;
    /**
     * Description
     */
    description?: string | null;
};

/**
 * OrganizationRead
 * Public read schema for organizations.
 */
export type OrganizationRead = {
    /**
     * Name
     */
    name: string;
    /**
     * Location
     */
    location?: string | null;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Owner Id
     * ID of the organization owner.
     */
    owner_id: string;
};

/**
 * OrganizationReadPublic
 * Read schema for organizations.
 */
export type OrganizationReadPublic = {
    /**
     * Created At
     */
    created_at?: string;
    /**
     * Updated At
     */
    updated_at?: string;
    /**
     * Name
     */
    name: string;
    /**
     * Location
     */
    location?: string | null;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Id
     */
    id: number | string;
};

/**
 * OrganizationReadWithRelationships
 * Read schema for organizations, including relationships.
 */
export type OrganizationReadWithRelationships = {
    /**
     * Created At
     */
    created_at?: string;
    /**
     * Updated At
     */
    updated_at?: string;
    /**
     * Name
     */
    name: string;
    /**
     * Location
     */
    location?: string | null;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Id
     */
    id: number | string;
    /**
     * Members
     * List of users in the organization.
     */
    members?: Array<UserRead>;
};

/**
 * OrganizationUpdate
 * Update schema for organizations.
 */
export type OrganizationUpdate = {
    /**
     * Name
     */
    name: string;
    /**
     * Location
     */
    location?: string | null;
    /**
     * Description
     */
    description?: string | null;
};

/**
 * Page[TypeVar]Customized[ProductReadWithRelationshipsAndFlatComponents]
 */
export type PageTypeVarCustomizedProductReadWithRelationshipsAndFlatComponentsReadable = {
    /**
     * Items
     */
    items: Array<ProductReadWithRelationshipsAndFlatComponentsReadable>;
    /**
     * Total
     */
    total?: number | null;
    /**
     * Page
     */
    page: number | null;
    /**
     * Size
     */
    size: number | null;
    /**
     * Pages
     */
    pages?: number | null;
    links: Links;
};

/**
 * Page[TypeVar]Customized[ProductReadWithRelationshipsAndFlatComponents]
 */
export type PageTypeVarCustomizedProductReadWithRelationshipsAndFlatComponentsWritable = {
    /**
     * Items
     */
    items: Array<ProductReadWithRelationshipsAndFlatComponentsWritable>;
    /**
     * Total
     */
    total?: number | null;
    /**
     * Page
     */
    page: number | null;
    /**
     * Size
     */
    size: number | null;
    /**
     * Pages
     */
    pages?: number | null;
    links: Links;
};

/**
 * PhysicalPropertiesCreate
 * Schema for creating physical properties.
 */
export type PhysicalPropertiesCreate = {
    /**
     * Weight Kg
     */
    weight_kg?: number | null;
    /**
     * Height Cm
     */
    height_cm?: number | null;
    /**
     * Width Cm
     */
    width_cm?: number | null;
    /**
     * Depth Cm
     */
    depth_cm?: number | null;
};

/**
 * PhysicalPropertiesRead
 * Schema for reading physical properties.
 */
export type PhysicalPropertiesReadReadable = {
    /**
     * Created At
     */
    created_at?: string;
    /**
     * Updated At
     */
    updated_at?: string;
    /**
     * Weight Kg
     */
    weight_kg?: number | null;
    /**
     * Height Cm
     */
    height_cm?: number | null;
    /**
     * Width Cm
     */
    width_cm?: number | null;
    /**
     * Depth Cm
     */
    depth_cm?: number | null;
    /**
     * Id
     */
    id: number | string;
    /**
     * Volume Cm3
     * Calculate the volume of the product.
     */
    readonly volume_cm3: number;
};

/**
 * PhysicalPropertiesRead
 * Schema for reading physical properties.
 */
export type PhysicalPropertiesReadWritable = {
    /**
     * Created At
     */
    created_at?: string;
    /**
     * Updated At
     */
    updated_at?: string;
    /**
     * Weight Kg
     */
    weight_kg?: number | null;
    /**
     * Height Cm
     */
    height_cm?: number | null;
    /**
     * Width Cm
     */
    width_cm?: number | null;
    /**
     * Depth Cm
     */
    depth_cm?: number | null;
    /**
     * Id
     */
    id: number | string;
};

/**
 * PhysicalPropertiesUpdate
 * Schema for updating physical properties.
 */
export type PhysicalPropertiesUpdate = {
    /**
     * Weight Kg
     */
    weight_kg?: number | null;
    /**
     * Height Cm
     */
    height_cm?: number | null;
    /**
     * Width Cm
     */
    width_cm?: number | null;
    /**
     * Depth Cm
     */
    depth_cm?: number | null;
};

/**
 * ProductCreateWithComponents
 * Schema for creating a base product with optional components.
 */
export type ProductCreateWithComponents = {
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Brand
     */
    brand?: string | null;
    /**
     * Model
     */
    model?: string | null;
    /**
     * Dismantling Notes
     * Notes on the dismantling process of the product.
     */
    dismantling_notes?: string | null;
    /**
     * Dismantling Time Start
     * Start of the dismantling time, in ISO 8601 format with timezone info
     */
    dismantling_time_start?: string;
    /**
     * Dismantling Time End
     * End of the dismantling time, in ISO 8601 format with timezone info
     */
    dismantling_time_end?: string | null;
    /**
     * Product Type Id
     */
    product_type_id?: number | null;
    /**
     * Physical properties of the product
     */
    physical_properties?: PhysicalPropertiesCreate | null;
    /**
     * Videos
     * Disassembly videos
     */
    videos?: Array<VideoCreateWithinProduct>;
    /**
     * Bill Of Materials
     * Bill of materials with quantities and units
     */
    bill_of_materials?: Array<MaterialProductLinkCreateWithinProduct>;
    /**
     * Components
     * Set of component products
     */
    components?: Array<ComponentCreateWithComponents>;
};

/**
 * ProductRead
 * Base schema for reading product information.
 */
export type ProductRead = {
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Brand
     */
    brand?: string | null;
    /**
     * Model
     */
    model?: string | null;
    /**
     * Dismantling Notes
     * Notes on the dismantling process of the product.
     */
    dismantling_notes?: string | null;
    /**
     * Dismantling Time Start
     */
    dismantling_time_start?: string;
    /**
     * Dismantling Time End
     */
    dismantling_time_end?: string;
    /**
     * Id
     */
    id: number | string;
    /**
     * Product Type Id
     */
    product_type_id?: number | null;
};

/**
 * ProductReadWithProperties
 * Schema for reading product information with all properties.
 */
export type ProductReadWithPropertiesReadable = {
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Brand
     */
    brand?: string | null;
    /**
     * Model
     */
    model?: string | null;
    /**
     * Dismantling Notes
     * Notes on the dismantling process of the product.
     */
    dismantling_notes?: string | null;
    /**
     * Dismantling Time Start
     */
    dismantling_time_start?: string;
    /**
     * Dismantling Time End
     */
    dismantling_time_end?: string;
    /**
     * Id
     */
    id: number | string;
    /**
     * Product Type Id
     */
    product_type_id?: number | null;
    physical_properties?: PhysicalPropertiesReadReadable | null;
};

/**
 * ProductReadWithProperties
 * Schema for reading product information with all properties.
 */
export type ProductReadWithPropertiesWritable = {
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Brand
     */
    brand?: string | null;
    /**
     * Model
     */
    model?: string | null;
    /**
     * Dismantling Notes
     * Notes on the dismantling process of the product.
     */
    dismantling_notes?: string | null;
    /**
     * Dismantling Time Start
     */
    dismantling_time_start?: string;
    /**
     * Dismantling Time End
     */
    dismantling_time_end?: string;
    /**
     * Id
     */
    id: number | string;
    /**
     * Product Type Id
     */
    product_type_id?: number | null;
    physical_properties?: PhysicalPropertiesReadWritable | null;
};

/**
 * ProductReadWithRecursiveComponents
 * Schema for reading product information with recursive components.
 */
export type ProductReadWithRecursiveComponentsReadable = {
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Brand
     */
    brand?: string | null;
    /**
     * Model
     */
    model?: string | null;
    /**
     * Dismantling Notes
     * Notes on the dismantling process of the product.
     */
    dismantling_notes?: string | null;
    /**
     * Dismantling Time Start
     */
    dismantling_time_start?: string;
    /**
     * Dismantling Time End
     */
    dismantling_time_end?: string;
    /**
     * Id
     */
    id: number | string;
    /**
     * Product Type Id
     */
    product_type_id?: number | null;
    physical_properties?: PhysicalPropertiesReadReadable | null;
    product_type?: ProductTypeRead | null;
    /**
     * Images
     * Product images
     */
    images?: Array<ImageRead>;
    /**
     * Videos
     * Disassembly videos
     */
    videos?: Array<VideoReadWithinProduct>;
    /**
     * Files
     * Product files
     */
    files?: Array<FileRead>;
    /**
     * Bill Of Materials
     * Bill of materials with quantities and units
     */
    bill_of_materials?: Array<MaterialProductLinkReadWithinProduct>;
    /**
     * Components
     * List of component products
     */
    components?: Array<ComponentReadWithRecursiveComponents>;
};

/**
 * ProductReadWithRecursiveComponents
 * Schema for reading product information with recursive components.
 */
export type ProductReadWithRecursiveComponentsWritable = {
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Brand
     */
    brand?: string | null;
    /**
     * Model
     */
    model?: string | null;
    /**
     * Dismantling Notes
     * Notes on the dismantling process of the product.
     */
    dismantling_notes?: string | null;
    /**
     * Dismantling Time Start
     */
    dismantling_time_start?: string;
    /**
     * Dismantling Time End
     */
    dismantling_time_end?: string;
    /**
     * Id
     */
    id: number | string;
    /**
     * Product Type Id
     */
    product_type_id?: number | null;
    physical_properties?: PhysicalPropertiesReadWritable | null;
    product_type?: ProductTypeRead | null;
    /**
     * Images
     * Product images
     */
    images?: Array<ImageRead>;
    /**
     * Videos
     * Disassembly videos
     */
    videos?: Array<VideoReadWithinProduct>;
    /**
     * Files
     * Product files
     */
    files?: Array<FileRead>;
    /**
     * Bill Of Materials
     * Bill of materials with quantities and units
     */
    bill_of_materials?: Array<MaterialProductLinkReadWithinProduct>;
    /**
     * Components
     * List of component products
     */
    components?: Array<ComponentReadWithRecursiveComponents>;
};

/**
 * ProductReadWithRelationshipsAndFlatComponents
 * Schema for reading product information with one level of components.
 */
export type ProductReadWithRelationshipsAndFlatComponentsReadable = {
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Brand
     */
    brand?: string | null;
    /**
     * Model
     */
    model?: string | null;
    /**
     * Dismantling Notes
     * Notes on the dismantling process of the product.
     */
    dismantling_notes?: string | null;
    /**
     * Dismantling Time Start
     */
    dismantling_time_start?: string;
    /**
     * Dismantling Time End
     */
    dismantling_time_end?: string;
    /**
     * Id
     */
    id: number | string;
    /**
     * Product Type Id
     */
    product_type_id?: number | null;
    physical_properties?: PhysicalPropertiesReadReadable | null;
    product_type?: ProductTypeRead | null;
    /**
     * Images
     * Product images
     */
    images?: Array<ImageRead>;
    /**
     * Videos
     * Disassembly videos
     */
    videos?: Array<VideoReadWithinProduct>;
    /**
     * Files
     * Product files
     */
    files?: Array<FileRead>;
    /**
     * Bill Of Materials
     * Bill of materials with quantities and units
     */
    bill_of_materials?: Array<MaterialProductLinkReadWithinProduct>;
    /**
     * Components
     * List of component products
     */
    components?: Array<ComponentRead>;
};

/**
 * ProductReadWithRelationshipsAndFlatComponents
 * Schema for reading product information with one level of components.
 */
export type ProductReadWithRelationshipsAndFlatComponentsWritable = {
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Brand
     */
    brand?: string | null;
    /**
     * Model
     */
    model?: string | null;
    /**
     * Dismantling Notes
     * Notes on the dismantling process of the product.
     */
    dismantling_notes?: string | null;
    /**
     * Dismantling Time Start
     */
    dismantling_time_start?: string;
    /**
     * Dismantling Time End
     */
    dismantling_time_end?: string;
    /**
     * Id
     */
    id: number | string;
    /**
     * Product Type Id
     */
    product_type_id?: number | null;
    physical_properties?: PhysicalPropertiesReadWritable | null;
    product_type?: ProductTypeRead | null;
    /**
     * Images
     * Product images
     */
    images?: Array<ImageRead>;
    /**
     * Videos
     * Disassembly videos
     */
    videos?: Array<VideoReadWithinProduct>;
    /**
     * Files
     * Product files
     */
    files?: Array<FileRead>;
    /**
     * Bill Of Materials
     * Bill of materials with quantities and units
     */
    bill_of_materials?: Array<MaterialProductLinkReadWithinProduct>;
    /**
     * Components
     * List of component products
     */
    components?: Array<ComponentRead>;
};

/**
 * ProductType
 * Database model for ProductType.
 */
export type ProductType = {
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     * Name of the Product Type.
     */
    name: string;
    /**
     * Description
     * Description of the Product Type.
     */
    description?: string | null;
    /**
     * Id
     */
    id?: number | null;
};

/**
 * ProductTypeCreateWithCategories
 * Schema for creating a product type with links to existing categories.
 */
export type ProductTypeCreateWithCategories = {
    /**
     * Name
     * Name of the Product Type.
     */
    name: string;
    /**
     * Description
     * Description of the Product Type.
     */
    description?: string | null;
    /**
     * Category Ids
     * List of category IDs
     */
    category_ids?: Array<number>;
};

/**
 * ProductTypeRead
 * Schema for reading flat product type information.
 */
export type ProductTypeRead = {
    /**
     * Name
     * Name of the Product Type.
     */
    name: string;
    /**
     * Description
     * Description of the Product Type.
     */
    description?: string | null;
    /**
     * Id
     */
    id: number | string;
};

/**
 * ProductTypeReadWithRelationships
 * Schema for reading product type information with all relationships.
 */
export type ProductTypeReadWithRelationships = {
    /**
     * Name
     * Name of the Product Type.
     */
    name: string;
    /**
     * Description
     * Description of the Product Type.
     */
    description?: string | null;
    /**
     * Id
     */
    id: number | string;
    /**
     * Products
     * List of products that have this product type
     */
    products?: Array<ProductRead>;
    /**
     * Categories
     * List of categories linked to the product type
     */
    categories?: Array<CategoryRead>;
    /**
     * Images
     * List of images for the product type
     */
    images?: Array<ImageRead>;
    /**
     * Files
     * List of files for the product type
     */
    files?: Array<FileRead>;
};

/**
 * ProductTypeUpdate
 * Schema for a partial update of a product type.
 */
export type ProductTypeUpdate = {
    /**
     * Name
     * Name of the Product Type.
     */
    name?: string | null;
    /**
     * Description
     * Description of the Product Type.
     */
    description?: string | null;
};

/**
 * ProductUpdate
 * Schema for updating basic product information.
 */
export type ProductUpdate = {
    /**
     * Name
     */
    name?: string | null;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Brand
     */
    brand?: string | null;
    /**
     * Model
     */
    model?: string | null;
    /**
     * Dismantling Notes
     * Notes on the dismantling process
     */
    dismantling_notes?: string | null;
    /**
     * Dismantling Time Start
     * Start of the dismantling time, in ISO 8601 format with timezone info
     */
    dismantling_time_start?: string;
    /**
     * Dismantling Time End
     * End of the dismantling time, in ISO 8601 format with timezone info
     */
    dismantling_time_end?: string | null;
    /**
     * Product Type Id
     */
    product_type_id?: number | null;
};

/**
 * ProductUpdateWithProperties
 * Schema for a partial update of a product with properties.
 */
export type ProductUpdateWithProperties = {
    /**
     * Name
     */
    name?: string | null;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Brand
     */
    brand?: string | null;
    /**
     * Model
     */
    model?: string | null;
    /**
     * Dismantling Notes
     * Notes on the dismantling process
     */
    dismantling_notes?: string | null;
    /**
     * Dismantling Time Start
     * Start of the dismantling time, in ISO 8601 format with timezone info
     */
    dismantling_time_start?: string;
    /**
     * Dismantling Time End
     * End of the dismantling time, in ISO 8601 format with timezone info
     */
    dismantling_time_end?: string | null;
    /**
     * Product Type Id
     */
    product_type_id?: number | null;
    physical_properties?: PhysicalPropertiesUpdate | null;
};

/**
 * StreamMode
 * Stream mode. Contains ffmpeg stream and URL construction logic for each mode.
 */
export type StreamMode = 'local' | 'youtube';

/**
 * StreamView
 * Pydantic model for active stream information.
 */
export type StreamView = {
    mode: StreamMode;
    /**
     * Url
     */
    url: string;
    /**
     * Started At
     */
    started_at: string;
    youtube_config?: YoutubeStreamConfig | null;
    /**
     * Metadata
     */
    metadata: {
        [key: string]: unknown;
    };
};

/**
 * TaxonomyCreate
 * Schema for creating a new taxonomy without categories.
 */
export type TaxonomyCreate = {
    /**
     * Name
     * Name of the taxonomy
     */
    name: string;
    /**
     * Description
     * Description of the taxonomy
     */
    description?: string | null;
    /**
     * Domains
     * Domains of the taxonomy, e.g. {materials, products, other}
     */
    domains: Array<TaxonomyDomain>;
    /**
     * Source
     * Source of the taxonomy data, e.g. URL, IRI or citation key
     */
    source?: string | null;
};

/**
 * TaxonomyCreateWithCategories
 * Schema for creating a new taxonomy, optionally with new categories.
 */
export type TaxonomyCreateWithCategories = {
    /**
     * Name
     * Name of the taxonomy
     */
    name: string;
    /**
     * Description
     * Description of the taxonomy
     */
    description?: string | null;
    /**
     * Domains
     * Domains of the taxonomy, e.g. {materials, products, other}
     */
    domains: Array<TaxonomyDomain>;
    /**
     * Source
     * Source of the taxonomy data, e.g. URL, IRI or citation key
     */
    source?: string | null;
    /**
     * Categories
     * Set of subcategories
     */
    categories?: Array<CategoryCreateWithinTaxonomyWithSubCategories>;
};

/**
 * TaxonomyDomain
 * Enumeration of taxonomy domains.
 */
export type TaxonomyDomain = 'materials' | 'products' | 'other';

/**
 * TaxonomyRead
 * Schema for reading minimal taxonomy information.
 */
export type TaxonomyRead = {
    /**
     * Name
     * Name of the taxonomy
     */
    name: string;
    /**
     * Description
     * Description of the taxonomy
     */
    description?: string | null;
    /**
     * Domains
     * Domains of the taxonomy, e.g. {materials, products, other}
     */
    domains: Array<TaxonomyDomain>;
    /**
     * Source
     * Source of the taxonomy data, e.g. URL, IRI or citation key
     */
    source?: string | null;
    /**
     * Id
     */
    id: number | string;
};

/**
 * TaxonomyUpdate
 * Schema for the partial update of a taxonomy.
 */
export type TaxonomyUpdate = {
    /**
     * Name
     * Name of the taxonomy
     */
    name?: string | null;
    /**
     * Description
     * Description of the taxonomy
     */
    description?: string | null;
    /**
     * Domains
     * Domains of the taxonomy, e.g. {materials, products, other}
     */
    domains: Array<TaxonomyDomain> | null;
    /**
     * Source
     * Source of the taxonomy data
     */
    source?: string | null;
};

/**
 * Unit
 * Allowed units in the data collection.
 */
export type Unit = 'kg' | 'g' | 'm' | 'cm';

/**
 * UserRead
 * Read schema for users.
 */
export type UserRead = {
    /**
     * Id
     */
    id: string;
    /**
     * Email
     */
    email: string;
    /**
     * Is Active
     */
    is_active?: boolean;
    /**
     * Is Superuser
     */
    is_superuser?: boolean;
    /**
     * Is Verified
     */
    is_verified?: boolean;
    /**
     * Username
     */
    username?: string | null;
};

/**
 * UserReadPublic
 * Public read schema for users.
 */
export type UserReadPublic = {
    /**
     * Username
     */
    username?: string | null;
    /**
     * Email
     */
    email: string;
};

/**
 * UserReadWithOrganization
 * Read schema for users with organization.
 */
export type UserReadWithOrganization = {
    /**
     * Id
     */
    id: string;
    /**
     * Email
     */
    email: string;
    /**
     * Is Active
     */
    is_active?: boolean;
    /**
     * Is Superuser
     */
    is_superuser?: boolean;
    /**
     * Is Verified
     */
    is_verified?: boolean;
    /**
     * Username
     */
    username?: string | null;
    /**
     * Organization the user belongs to.
     */
    organization?: OrganizationRead | null;
};

/**
 * UserReadWithRelationships
 * Read schema for users, including relationships.
 */
export type UserReadWithRelationships = {
    /**
     * Id
     */
    id: string;
    /**
     * Email
     */
    email: string;
    /**
     * Is Active
     */
    is_active?: boolean;
    /**
     * Is Superuser
     */
    is_superuser?: boolean;
    /**
     * Is Verified
     */
    is_verified?: boolean;
    /**
     * Username
     */
    username?: string | null;
    /**
     * Organization the user belongs to.
     */
    organization?: OrganizationRead | null;
    /**
     * Products
     * List of products owned by the user.
     */
    products?: Array<ProductRead>;
};

/**
 * UserUpdate
 * Update schema for users.
 */
export type UserUpdate = {
    /**
     * Password
     */
    password?: string | null;
    /**
     * Email
     */
    email?: string | null;
    /**
     * Is Active
     */
    is_active?: boolean | null;
    /**
     * Is Superuser
     */
    is_superuser?: boolean | null;
    /**
     * Is Verified
     */
    is_verified?: boolean | null;
    /**
     * Username
     */
    username?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
};

/**
 * ValidationError
 */
export type ValidationError = {
    /**
     * Location
     */
    loc: Array<string | number>;
    /**
     * Message
     */
    msg: string;
    /**
     * Error Type
     */
    type: string;
};

/**
 * VideoCreateWithinProduct
 * Schema for creating a video.
 */
export type VideoCreateWithinProduct = {
    /**
     * Url
     * URL linking to the video
     */
    url: string;
    /**
     * Title
     * Title of the video
     */
    title?: string | null;
    /**
     * Description
     * Description of the video
     */
    description?: string | null;
    /**
     * Video Metadata
     * Video metadata as a JSON dict
     */
    video_metadata?: {
        [key: string]: unknown;
    } | null;
};

/**
 * VideoRead
 * Schema for reading video information.
 */
export type VideoRead = {
    /**
     * Created At
     */
    created_at?: string;
    /**
     * Updated At
     */
    updated_at?: string;
    /**
     * Url
     * URL linking to the video
     */
    url: string;
    /**
     * Title
     * Title of the video
     */
    title?: string | null;
    /**
     * Description
     * Description of the video
     */
    description?: string | null;
    /**
     * Video Metadata
     * Video metadata as a JSON dict
     */
    video_metadata?: {
        [key: string]: unknown;
    } | null;
    /**
     * Id
     */
    id: number | string;
    /**
     * Product Id
     */
    product_id: number;
};

/**
 * VideoReadWithinProduct
 * Schema for reading video information.
 */
export type VideoReadWithinProduct = {
    /**
     * Created At
     */
    created_at?: string;
    /**
     * Updated At
     */
    updated_at?: string;
    /**
     * Url
     * URL linking to the video
     */
    url: string;
    /**
     * Title
     * Title of the video
     */
    title?: string | null;
    /**
     * Description
     * Description of the video
     */
    description?: string | null;
    /**
     * Video Metadata
     * Video metadata as a JSON dict
     */
    video_metadata?: {
        [key: string]: unknown;
    } | null;
    /**
     * Id
     */
    id: number | string;
};

/**
 * YouTubePrivacyStatus
 * Enumeration of YouTube privacy statuses.
 */
export type YouTubePrivacyStatus = 'public' | 'private' | 'unlisted';

/**
 * YoutubeStreamConfig
 * YouTube stream configuration.
 */
export type YoutubeStreamConfig = {
    /**
     * Stream Key
     * Stream key for YouTube streaming
     */
    stream_key: string;
    /**
     * Broadcast Key
     * Broadcast key for YouTube streaming
     */
    broadcast_key: string;
};

export type GetCategoriesCategoriesGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Include
         * Relationships to include
         */
        include?: Array<string> | null;
        /**
         * Name  Ilike
         */
        name__ilike?: string | null;
        /**
         * Description  Ilike
         */
        description__ilike?: string | null;
        /**
         * Search
         */
        search?: string | null;
        /**
         * Taxonomy  Name  Ilike
         */
        taxonomy__name__ilike?: string | null;
        /**
         * Taxonomy  Description  Ilike
         */
        taxonomy__description__ilike?: string | null;
        /**
         * Taxonomy  Search
         */
        taxonomy__search?: string | null;
    };
    url: '/categories';
};

export type GetCategoriesCategoriesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetCategoriesCategoriesGetError = GetCategoriesCategoriesGetErrors[keyof GetCategoriesCategoriesGetErrors];

export type GetCategoriesCategoriesGetResponses = {
    /**
     * Response Get Categories Categories Get
     * List of categories
     */
    200: Array<CategoryReadWithRelationshipsAndFlatSubCategories>;
};

export type GetCategoriesCategoriesGetResponse = GetCategoriesCategoriesGetResponses[keyof GetCategoriesCategoriesGetResponses];

export type GetCategoriesTreeCategoriesTreeGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Recursion Depth
         * Maximum recursion depth
         */
        recursion_depth?: number;
        /**
         * Name  Ilike
         */
        name__ilike?: string | null;
        /**
         * Description  Ilike
         */
        description__ilike?: string | null;
        /**
         * Search
         */
        search?: string | null;
        /**
         * Taxonomy  Name  Ilike
         */
        taxonomy__name__ilike?: string | null;
        /**
         * Taxonomy  Description  Ilike
         */
        taxonomy__description__ilike?: string | null;
        /**
         * Taxonomy  Search
         */
        taxonomy__search?: string | null;
    };
    url: '/categories/tree';
};

export type GetCategoriesTreeCategoriesTreeGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetCategoriesTreeCategoriesTreeGetError = GetCategoriesTreeCategoriesTreeGetErrors[keyof GetCategoriesTreeCategoriesTreeGetErrors];

export type GetCategoriesTreeCategoriesTreeGetResponses = {
    /**
     * Response Get Categories Tree Categories Tree Get
     * Category tree with subcategories
     */
    200: Array<CategoryReadWithRecursiveSubCategories>;
};

export type GetCategoriesTreeCategoriesTreeGetResponse = GetCategoriesTreeCategoriesTreeGetResponses[keyof GetCategoriesTreeCategoriesTreeGetResponses];

export type GetCategoryCategoriesCategoryIdGetData = {
    body?: never;
    path: {
        /**
         * Category Id
         */
        category_id: number;
    };
    query?: {
        /**
         * Include
         * Relationships to include
         */
        include?: Array<string> | null;
    };
    url: '/categories/{category_id}';
};

export type GetCategoryCategoriesCategoryIdGetErrors = {
    /**
     * Category not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetCategoryCategoriesCategoryIdGetError = GetCategoryCategoriesCategoryIdGetErrors[keyof GetCategoryCategoriesCategoryIdGetErrors];

export type GetCategoryCategoriesCategoryIdGetResponses = {
    /**
     * Category found
     */
    200: CategoryReadWithRelationshipsAndFlatSubCategories;
};

export type GetCategoryCategoriesCategoryIdGetResponse = GetCategoryCategoriesCategoryIdGetResponses[keyof GetCategoryCategoriesCategoryIdGetResponses];

export type GetSubcategoriesCategoriesCategoryIdSubcategoriesGetData = {
    body?: never;
    path: {
        /**
         * Category Id
         * Category ID
         */
        category_id: number;
    };
    query?: {
        /**
         * Include
         * Relationships to include
         */
        include?: Array<string> | null;
        /**
         * Name  Ilike
         */
        name__ilike?: string | null;
        /**
         * Description  Ilike
         */
        description__ilike?: string | null;
        /**
         * Search
         */
        search?: string | null;
    };
    url: '/categories{category_id}/subcategories';
};

export type GetSubcategoriesCategoriesCategoryIdSubcategoriesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetSubcategoriesCategoriesCategoryIdSubcategoriesGetError = GetSubcategoriesCategoriesCategoryIdSubcategoriesGetErrors[keyof GetSubcategoriesCategoriesCategoryIdSubcategoriesGetErrors];

export type GetSubcategoriesCategoriesCategoryIdSubcategoriesGetResponses = {
    /**
     * Response Get Subcategories Categories Category Id  Subcategories Get
     * Successful Response
     */
    200: Array<CategoryReadWithRelationshipsAndFlatSubCategories>;
};

export type GetSubcategoriesCategoriesCategoryIdSubcategoriesGetResponse = GetSubcategoriesCategoriesCategoryIdSubcategoriesGetResponses[keyof GetSubcategoriesCategoriesCategoryIdSubcategoriesGetResponses];

export type GetCategorySubtreeCategoriesCategoryIdSubcategoriesTreeGetData = {
    body?: never;
    path: {
        /**
         * Category Id
         */
        category_id: number;
    };
    query?: {
        /**
         * Recursion Depth
         * Maximum recursion depth
         */
        recursion_depth?: number;
        /**
         * Name  Ilike
         */
        name__ilike?: string | null;
        /**
         * Description  Ilike
         */
        description__ilike?: string | null;
        /**
         * Search
         */
        search?: string | null;
    };
    url: '/categories/{category_id}/subcategories/tree';
};

export type GetCategorySubtreeCategoriesCategoryIdSubcategoriesTreeGetErrors = {
    /**
     * Category not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetCategorySubtreeCategoriesCategoryIdSubcategoriesTreeGetError = GetCategorySubtreeCategoriesCategoryIdSubcategoriesTreeGetErrors[keyof GetCategorySubtreeCategoriesCategoryIdSubcategoriesTreeGetErrors];

export type GetCategorySubtreeCategoriesCategoryIdSubcategoriesTreeGetResponses = {
    /**
     * Response Get Category Subtree Categories  Category Id  Subcategories Tree Get
     * Category tree with subcategories
     */
    200: Array<CategoryReadWithRecursiveSubCategories>;
};

export type GetCategorySubtreeCategoriesCategoryIdSubcategoriesTreeGetResponse = GetCategorySubtreeCategoriesCategoryIdSubcategoriesTreeGetResponses[keyof GetCategorySubtreeCategoriesCategoryIdSubcategoriesTreeGetResponses];

export type GetSubcategoryCategoriesCategoryIdSubcategoriesSubcategoryIdGetData = {
    body?: never;
    path: {
        /**
         * Category Id
         */
        category_id: number;
        /**
         * Subcategory Id
         */
        subcategory_id: number;
    };
    query?: {
        /**
         * Include
         * Relationships to include
         */
        include?: Array<string> | null;
    };
    url: '/categories/{category_id}/subcategories/{subcategory_id}';
};

export type GetSubcategoryCategoriesCategoryIdSubcategoriesSubcategoryIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetSubcategoryCategoriesCategoryIdSubcategoriesSubcategoryIdGetError = GetSubcategoryCategoriesCategoryIdSubcategoriesSubcategoryIdGetErrors[keyof GetSubcategoryCategoriesCategoryIdSubcategoriesSubcategoryIdGetErrors];

export type GetSubcategoryCategoriesCategoryIdSubcategoriesSubcategoryIdGetResponses = {
    /**
     * Successful Response
     */
    200: CategoryReadWithRelationshipsAndFlatSubCategories;
};

export type GetSubcategoryCategoriesCategoryIdSubcategoriesSubcategoryIdGetResponse = GetSubcategoryCategoriesCategoryIdSubcategoriesSubcategoryIdGetResponses[keyof GetSubcategoryCategoriesCategoryIdSubcategoriesSubcategoryIdGetResponses];

export type GetTaxonomiesTaxonomiesGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Include Base Categories
         * Whether to include base categories
         */
        include_base_categories?: boolean;
        /**
         * Name  Ilike
         */
        name__ilike?: string | null;
        /**
         * Description  Ilike
         */
        description__ilike?: string | null;
        /**
         * Source  Ilike
         */
        source__ilike?: string | null;
        /**
         * Search
         */
        search?: string | null;
    };
    url: '/taxonomies';
};

export type GetTaxonomiesTaxonomiesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetTaxonomiesTaxonomiesGetError = GetTaxonomiesTaxonomiesGetErrors[keyof GetTaxonomiesTaxonomiesGetErrors];

export type GetTaxonomiesTaxonomiesGetResponses = {
    /**
     * Response Get Taxonomies Taxonomies Get
     * List of taxonomies
     */
    200: Array<TaxonomyRead>;
};

export type GetTaxonomiesTaxonomiesGetResponse = GetTaxonomiesTaxonomiesGetResponses[keyof GetTaxonomiesTaxonomiesGetResponses];

export type GetTaxonomyTaxonomiesTaxonomyIdGetData = {
    body?: never;
    path: {
        /**
         * Taxonomy Id
         */
        taxonomy_id: number;
    };
    query?: {
        /**
         * Include Base Categories
         * Whether to include base categories
         */
        include_base_categories?: boolean;
    };
    url: '/taxonomies/{taxonomy_id}';
};

export type GetTaxonomyTaxonomiesTaxonomyIdGetErrors = {
    /**
     * Taxonomy not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetTaxonomyTaxonomiesTaxonomyIdGetError = GetTaxonomyTaxonomiesTaxonomyIdGetErrors[keyof GetTaxonomyTaxonomiesTaxonomyIdGetErrors];

export type GetTaxonomyTaxonomiesTaxonomyIdGetResponses = {
    /**
     * Taxonomy found
     */
    200: TaxonomyRead;
};

export type GetTaxonomyTaxonomiesTaxonomyIdGetResponse = GetTaxonomyTaxonomiesTaxonomyIdGetResponses[keyof GetTaxonomyTaxonomiesTaxonomyIdGetResponses];

export type GetTaxonomyCategoryTreeTaxonomiesTaxonomyIdCategoriesGetData = {
    body?: never;
    path: {
        /**
         * Taxonomy Id
         */
        taxonomy_id: number;
    };
    query?: {
        /**
         * Recursion Depth
         * Maximum recursion depth
         */
        recursion_depth?: number;
        /**
         * Name  Ilike
         */
        name__ilike?: string | null;
        /**
         * Description  Ilike
         */
        description__ilike?: string | null;
        /**
         * Search
         */
        search?: string | null;
    };
    url: '/taxonomies/{taxonomy_id}/categories';
};

export type GetTaxonomyCategoryTreeTaxonomiesTaxonomyIdCategoriesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetTaxonomyCategoryTreeTaxonomiesTaxonomyIdCategoriesGetError = GetTaxonomyCategoryTreeTaxonomiesTaxonomyIdCategoriesGetErrors[keyof GetTaxonomyCategoryTreeTaxonomiesTaxonomyIdCategoriesGetErrors];

export type GetTaxonomyCategoryTreeTaxonomiesTaxonomyIdCategoriesGetResponses = {
    /**
     * Response Get Taxonomy Category Tree Taxonomies  Taxonomy Id  Categories Get
     * Taxonomy with category tree
     */
    200: Array<CategoryReadWithRecursiveSubCategories>;
};

export type GetTaxonomyCategoryTreeTaxonomiesTaxonomyIdCategoriesGetResponse = GetTaxonomyCategoryTreeTaxonomiesTaxonomyIdCategoriesGetResponses[keyof GetTaxonomyCategoryTreeTaxonomiesTaxonomyIdCategoriesGetResponses];

export type GetTaxonomyCategoryTaxonomiesTaxonomyIdCategoriesCategoryIdGetData = {
    body?: never;
    path: {
        /**
         * Taxonomy Id
         */
        taxonomy_id: number;
        /**
         * Category Id
         */
        category_id: number;
    };
    query?: {
        /**
         * Include
         * Relationships to include
         */
        include?: Array<string> | null;
    };
    url: '/taxonomies/{taxonomy_id}/categories/{category_id}';
};

export type GetTaxonomyCategoryTaxonomiesTaxonomyIdCategoriesCategoryIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetTaxonomyCategoryTaxonomiesTaxonomyIdCategoriesCategoryIdGetError = GetTaxonomyCategoryTaxonomiesTaxonomyIdCategoriesCategoryIdGetErrors[keyof GetTaxonomyCategoryTaxonomiesTaxonomyIdCategoriesCategoryIdGetErrors];

export type GetTaxonomyCategoryTaxonomiesTaxonomyIdCategoriesCategoryIdGetResponses = {
    /**
     * Successful Response
     */
    200: CategoryRead;
};

export type GetTaxonomyCategoryTaxonomiesTaxonomyIdCategoriesCategoryIdGetResponse = GetTaxonomyCategoryTaxonomiesTaxonomyIdCategoriesCategoryIdGetResponses[keyof GetTaxonomyCategoryTaxonomiesTaxonomyIdCategoriesCategoryIdGetResponses];

export type GetMaterialsMaterialsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Include
         * Relationships to include
         */
        include?: Array<string> | null;
        /**
         * Name  Ilike
         */
        name__ilike?: string | null;
        /**
         * Description  Ilike
         */
        description__ilike?: string | null;
        /**
         * Density Kg M3  Gte
         */
        density_kg_m3__gte?: number | null;
        /**
         * Density Kg M3  Lte
         */
        density_kg_m3__lte?: number | null;
        /**
         * Is Crm
         */
        is_crm?: boolean | null;
        /**
         * Source  Ilike
         */
        source__ilike?: string | null;
        /**
         * Search
         */
        search?: string | null;
        /**
         * Categories  Name  Ilike
         */
        categories__name__ilike?: string | null;
        /**
         * Categories  Description  Ilike
         */
        categories__description__ilike?: string | null;
        /**
         * Categories  Search
         */
        categories__search?: string | null;
    };
    url: '/materials';
};

export type GetMaterialsMaterialsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetMaterialsMaterialsGetError = GetMaterialsMaterialsGetErrors[keyof GetMaterialsMaterialsGetErrors];

export type GetMaterialsMaterialsGetResponses = {
    /**
     * Response Get Materials Materials Get
     * List of materials
     */
    200: Array<MaterialReadWithRelationships>;
};

export type GetMaterialsMaterialsGetResponse = GetMaterialsMaterialsGetResponses[keyof GetMaterialsMaterialsGetResponses];

export type GetMaterialMaterialsMaterialIdGetData = {
    body?: never;
    path: {
        /**
         * Material Id
         */
        material_id: number;
    };
    query?: {
        /**
         * Include
         * Relationships to include
         */
        include?: Array<string> | null;
    };
    url: '/materials/{material_id}';
};

export type GetMaterialMaterialsMaterialIdGetErrors = {
    /**
     * Material not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetMaterialMaterialsMaterialIdGetError = GetMaterialMaterialsMaterialIdGetErrors[keyof GetMaterialMaterialsMaterialIdGetErrors];

export type GetMaterialMaterialsMaterialIdGetResponses = {
    /**
     * Material found
     */
    200: MaterialReadWithRelationships;
};

export type GetMaterialMaterialsMaterialIdGetResponse = GetMaterialMaterialsMaterialIdGetResponses[keyof GetMaterialMaterialsMaterialIdGetResponses];

export type GetCategoriesForMaterialMaterialsMaterialIdCategoriesGetData = {
    body?: never;
    path: {
        /**
         * Material Id
         */
        material_id: number;
    };
    query: {
        /**
         * Include
         * Relationships to include
         */
        include: Array<string> | null;
        /**
         * Name  Ilike
         */
        name__ilike?: string | null;
        /**
         * Description  Ilike
         */
        description__ilike?: string | null;
        /**
         * Search
         */
        search?: string | null;
    };
    url: '/materials/{material_id}/categories';
};

export type GetCategoriesForMaterialMaterialsMaterialIdCategoriesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetCategoriesForMaterialMaterialsMaterialIdCategoriesGetError = GetCategoriesForMaterialMaterialsMaterialIdCategoriesGetErrors[keyof GetCategoriesForMaterialMaterialsMaterialIdCategoriesGetErrors];

export type GetCategoriesForMaterialMaterialsMaterialIdCategoriesGetResponses = {
    /**
     * Response Get Categories For Material Materials  Material Id  Categories Get
     * Successful Response
     */
    200: Array<CategoryRead>;
};

export type GetCategoriesForMaterialMaterialsMaterialIdCategoriesGetResponse = GetCategoriesForMaterialMaterialsMaterialIdCategoriesGetResponses[keyof GetCategoriesForMaterialMaterialsMaterialIdCategoriesGetResponses];

export type GetCategoryForMaterialMaterialsMaterialIdCategoriesCategoryIdGetData = {
    body?: never;
    path: {
        /**
         * Material Id
         */
        material_id: number;
        /**
         * Category Id
         */
        category_id: number;
    };
    query: {
        /**
         * Include
         * Relationships to include
         */
        include: Array<string> | null;
    };
    url: '/materials/{material_id}/categories/{category_id}';
};

export type GetCategoryForMaterialMaterialsMaterialIdCategoriesCategoryIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetCategoryForMaterialMaterialsMaterialIdCategoriesCategoryIdGetError = GetCategoryForMaterialMaterialsMaterialIdCategoriesCategoryIdGetErrors[keyof GetCategoryForMaterialMaterialsMaterialIdCategoriesCategoryIdGetErrors];

export type GetCategoryForMaterialMaterialsMaterialIdCategoriesCategoryIdGetResponses = {
    /**
     * Successful Response
     */
    200: CategoryRead;
};

export type GetCategoryForMaterialMaterialsMaterialIdCategoriesCategoryIdGetResponse = GetCategoryForMaterialMaterialsMaterialIdCategoriesCategoryIdGetResponses[keyof GetCategoryForMaterialMaterialsMaterialIdCategoriesCategoryIdGetResponses];

export type GetItemsMaterialsMaterialIdFilesGetData = {
    body?: never;
    path: {
        /**
         * Material Id
         * ID of the Material
         */
        material_id: number;
    };
    query?: {
        /**
         * Filename  Ilike
         */
        filename__ilike?: string | null;
        /**
         * Description  Ilike
         */
        description__ilike?: string | null;
        /**
         * Parent Type
         */
        parent_type?: FileParentType | null;
        /**
         * Search
         */
        search?: string | null;
    };
    url: '/materials/{material_id}/files';
};

export type GetItemsMaterialsMaterialIdFilesGetErrors = {
    /**
     * Material not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetItemsMaterialsMaterialIdFilesGetError = GetItemsMaterialsMaterialIdFilesGetErrors[keyof GetItemsMaterialsMaterialIdFilesGetErrors];

export type GetItemsMaterialsMaterialIdFilesGetResponses = {
    /**
     * Response Get Items Materials  Material Id  Files Get
     * List of Files associated with the Material
     */
    200: Array<FileReadWithinParent>;
};

export type GetItemsMaterialsMaterialIdFilesGetResponse = GetItemsMaterialsMaterialIdFilesGetResponses[keyof GetItemsMaterialsMaterialIdFilesGetResponses];

export type GetItemMaterialsMaterialIdFilesFileIdGetData = {
    body?: never;
    path: {
        /**
         * File Id
         * ID of the file
         */
        file_id: string;
        /**
         * Material Id
         * ID of the Material
         */
        material_id: number;
    };
    query?: never;
    url: '/materials/{material_id}/files/{file_id}';
};

export type GetItemMaterialsMaterialIdFilesFileIdGetErrors = {
    /**
     * Material or file not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetItemMaterialsMaterialIdFilesFileIdGetError = GetItemMaterialsMaterialIdFilesFileIdGetErrors[keyof GetItemMaterialsMaterialIdFilesFileIdGetErrors];

export type GetItemMaterialsMaterialIdFilesFileIdGetResponses = {
    /**
     * File found
     */
    200: FileReadWithinParent;
};

export type GetItemMaterialsMaterialIdFilesFileIdGetResponse = GetItemMaterialsMaterialIdFilesFileIdGetResponses[keyof GetItemMaterialsMaterialIdFilesFileIdGetResponses];

export type GetItemsMaterialsMaterialIdImagesGetData = {
    body?: never;
    path: {
        /**
         * Material Id
         * ID of the Material
         */
        material_id: number;
    };
    query?: {
        /**
         * Filename  Ilike
         */
        filename__ilike?: string | null;
        /**
         * Description  Ilike
         */
        description__ilike?: string | null;
        /**
         * Parent Type
         */
        parent_type?: ImageParentType | null;
        /**
         * Search
         */
        search?: string | null;
    };
    url: '/materials/{material_id}/images';
};

export type GetItemsMaterialsMaterialIdImagesGetErrors = {
    /**
     * Material not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetItemsMaterialsMaterialIdImagesGetError = GetItemsMaterialsMaterialIdImagesGetErrors[keyof GetItemsMaterialsMaterialIdImagesGetErrors];

export type GetItemsMaterialsMaterialIdImagesGetResponses = {
    /**
     * Response Get Items Materials  Material Id  Images Get
     * List of Images associated with the Material
     */
    200: Array<ImageReadWithinParent>;
};

export type GetItemsMaterialsMaterialIdImagesGetResponse = GetItemsMaterialsMaterialIdImagesGetResponses[keyof GetItemsMaterialsMaterialIdImagesGetResponses];

export type GetItemMaterialsMaterialIdImagesImageIdGetData = {
    body?: never;
    path: {
        /**
         * Image Id
         * ID of the image
         */
        image_id: string;
        /**
         * Material Id
         * ID of the Material
         */
        material_id: number;
    };
    query?: never;
    url: '/materials/{material_id}/images/{image_id}';
};

export type GetItemMaterialsMaterialIdImagesImageIdGetErrors = {
    /**
     * Material or image not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetItemMaterialsMaterialIdImagesImageIdGetError = GetItemMaterialsMaterialIdImagesImageIdGetErrors[keyof GetItemMaterialsMaterialIdImagesImageIdGetErrors];

export type GetItemMaterialsMaterialIdImagesImageIdGetResponses = {
    /**
     * Image found
     */
    200: ImageReadWithinParent;
};

export type GetItemMaterialsMaterialIdImagesImageIdGetResponse = GetItemMaterialsMaterialIdImagesImageIdGetResponses[keyof GetItemMaterialsMaterialIdImagesImageIdGetResponses];

export type GetProductTypesProductTypesGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Include
         * Relationships to include
         */
        include?: Array<string> | null;
        /**
         * Name  Ilike
         */
        name__ilike?: string | null;
        /**
         * Description  Ilike
         */
        description__ilike?: string | null;
        /**
         * Search
         */
        search?: string | null;
        /**
         * Categories  Name  Ilike
         */
        categories__name__ilike?: string | null;
        /**
         * Categories  Description  Ilike
         */
        categories__description__ilike?: string | null;
        /**
         * Categories  Search
         */
        categories__search?: string | null;
    };
    url: '/product-types';
};

export type GetProductTypesProductTypesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetProductTypesProductTypesGetError = GetProductTypesProductTypesGetErrors[keyof GetProductTypesProductTypesGetErrors];

export type GetProductTypesProductTypesGetResponses = {
    /**
     * Response Get Product Types Product Types Get
     * List of product types
     */
    200: Array<ProductType>;
};

export type GetProductTypesProductTypesGetResponse = GetProductTypesProductTypesGetResponses[keyof GetProductTypesProductTypesGetResponses];

export type GetProductTypeProductTypesProductTypeIdGetData = {
    body?: never;
    path: {
        /**
         * Product Type Id
         */
        product_type_id: number;
    };
    query?: {
        /**
         * Include
         * Relationships to include
         */
        include?: Array<string> | null;
    };
    url: '/product-types/{product_type_id}';
};

export type GetProductTypeProductTypesProductTypeIdGetErrors = {
    /**
     * Product type not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetProductTypeProductTypesProductTypeIdGetError = GetProductTypeProductTypesProductTypeIdGetErrors[keyof GetProductTypeProductTypesProductTypeIdGetErrors];

export type GetProductTypeProductTypesProductTypeIdGetResponses = {
    /**
     * Product type found
     */
    200: ProductTypeReadWithRelationships;
};

export type GetProductTypeProductTypesProductTypeIdGetResponse = GetProductTypeProductTypesProductTypeIdGetResponses[keyof GetProductTypeProductTypesProductTypeIdGetResponses];

export type GetCategoriesForProductTypeProductTypesProductTypeIdCategoriesGetData = {
    body?: never;
    path: {
        /**
         * Product Type Id
         */
        product_type_id: number;
    };
    query: {
        /**
         * Include
         * Relationships to include
         */
        include: Array<string> | null;
        /**
         * Name  Ilike
         */
        name__ilike?: string | null;
        /**
         * Description  Ilike
         */
        description__ilike?: string | null;
        /**
         * Search
         */
        search?: string | null;
    };
    url: '/product-types/{product_type_id}/categories';
};

export type GetCategoriesForProductTypeProductTypesProductTypeIdCategoriesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetCategoriesForProductTypeProductTypesProductTypeIdCategoriesGetError = GetCategoriesForProductTypeProductTypesProductTypeIdCategoriesGetErrors[keyof GetCategoriesForProductTypeProductTypesProductTypeIdCategoriesGetErrors];

export type GetCategoriesForProductTypeProductTypesProductTypeIdCategoriesGetResponses = {
    /**
     * Response Get Categories For Product Type Product Types  Product Type Id  Categories Get
     * Successful Response
     */
    200: Array<CategoryRead>;
};

export type GetCategoriesForProductTypeProductTypesProductTypeIdCategoriesGetResponse = GetCategoriesForProductTypeProductTypesProductTypeIdCategoriesGetResponses[keyof GetCategoriesForProductTypeProductTypesProductTypeIdCategoriesGetResponses];

export type GetCategoryForProductTypeProductTypesProductTypeIdCategoriesCategoryIdGetData = {
    body?: never;
    path: {
        /**
         * Product Type Id
         */
        product_type_id: number;
        /**
         * Category Id
         */
        category_id: number;
    };
    query: {
        /**
         * Include
         * Relationships to include
         */
        include: Array<string> | null;
    };
    url: '/product-types/{product_type_id}/categories/{category_id}';
};

export type GetCategoryForProductTypeProductTypesProductTypeIdCategoriesCategoryIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetCategoryForProductTypeProductTypesProductTypeIdCategoriesCategoryIdGetError = GetCategoryForProductTypeProductTypesProductTypeIdCategoriesCategoryIdGetErrors[keyof GetCategoryForProductTypeProductTypesProductTypeIdCategoriesCategoryIdGetErrors];

export type GetCategoryForProductTypeProductTypesProductTypeIdCategoriesCategoryIdGetResponses = {
    /**
     * Successful Response
     */
    200: CategoryRead;
};

export type GetCategoryForProductTypeProductTypesProductTypeIdCategoriesCategoryIdGetResponse = GetCategoryForProductTypeProductTypesProductTypeIdCategoriesCategoryIdGetResponses[keyof GetCategoryForProductTypeProductTypesProductTypeIdCategoriesCategoryIdGetResponses];

export type GetItemsProductTypesProductTypeIdFilesGetData = {
    body?: never;
    path: {
        /**
         * Product Type Id
         * ID of the Product Type
         */
        product_type_id: number;
    };
    query?: {
        /**
         * Filename  Ilike
         */
        filename__ilike?: string | null;
        /**
         * Description  Ilike
         */
        description__ilike?: string | null;
        /**
         * Parent Type
         */
        parent_type?: FileParentType | null;
        /**
         * Search
         */
        search?: string | null;
    };
    url: '/product-types/{product_type_id}/files';
};

export type GetItemsProductTypesProductTypeIdFilesGetErrors = {
    /**
     * Product Type not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetItemsProductTypesProductTypeIdFilesGetError = GetItemsProductTypesProductTypeIdFilesGetErrors[keyof GetItemsProductTypesProductTypeIdFilesGetErrors];

export type GetItemsProductTypesProductTypeIdFilesGetResponses = {
    /**
     * Response Get Items Product Types  Product Type Id  Files Get
     * List of Files associated with the Product Type
     */
    200: Array<FileReadWithinParent>;
};

export type GetItemsProductTypesProductTypeIdFilesGetResponse = GetItemsProductTypesProductTypeIdFilesGetResponses[keyof GetItemsProductTypesProductTypeIdFilesGetResponses];

export type GetItemProductTypesProductTypeIdFilesFileIdGetData = {
    body?: never;
    path: {
        /**
         * File Id
         * ID of the file
         */
        file_id: string;
        /**
         * Product Type Id
         * ID of the Product Type
         */
        product_type_id: number;
    };
    query?: never;
    url: '/product-types/{product_type_id}/files/{file_id}';
};

export type GetItemProductTypesProductTypeIdFilesFileIdGetErrors = {
    /**
     * Product Type or file not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetItemProductTypesProductTypeIdFilesFileIdGetError = GetItemProductTypesProductTypeIdFilesFileIdGetErrors[keyof GetItemProductTypesProductTypeIdFilesFileIdGetErrors];

export type GetItemProductTypesProductTypeIdFilesFileIdGetResponses = {
    /**
     * File found
     */
    200: FileReadWithinParent;
};

export type GetItemProductTypesProductTypeIdFilesFileIdGetResponse = GetItemProductTypesProductTypeIdFilesFileIdGetResponses[keyof GetItemProductTypesProductTypeIdFilesFileIdGetResponses];

export type GetItemsProductTypesProductTypeIdImagesGetData = {
    body?: never;
    path: {
        /**
         * Product Type Id
         * ID of the Product Type
         */
        product_type_id: number;
    };
    query?: {
        /**
         * Filename  Ilike
         */
        filename__ilike?: string | null;
        /**
         * Description  Ilike
         */
        description__ilike?: string | null;
        /**
         * Parent Type
         */
        parent_type?: ImageParentType | null;
        /**
         * Search
         */
        search?: string | null;
    };
    url: '/product-types/{product_type_id}/images';
};

export type GetItemsProductTypesProductTypeIdImagesGetErrors = {
    /**
     * Product Type not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetItemsProductTypesProductTypeIdImagesGetError = GetItemsProductTypesProductTypeIdImagesGetErrors[keyof GetItemsProductTypesProductTypeIdImagesGetErrors];

export type GetItemsProductTypesProductTypeIdImagesGetResponses = {
    /**
     * Response Get Items Product Types  Product Type Id  Images Get
     * List of Images associated with the Product Type
     */
    200: Array<ImageReadWithinParent>;
};

export type GetItemsProductTypesProductTypeIdImagesGetResponse = GetItemsProductTypesProductTypeIdImagesGetResponses[keyof GetItemsProductTypesProductTypeIdImagesGetResponses];

export type GetItemProductTypesProductTypeIdImagesImageIdGetData = {
    body?: never;
    path: {
        /**
         * Image Id
         * ID of the image
         */
        image_id: string;
        /**
         * Product Type Id
         * ID of the Product Type
         */
        product_type_id: number;
    };
    query?: never;
    url: '/product-types/{product_type_id}/images/{image_id}';
};

export type GetItemProductTypesProductTypeIdImagesImageIdGetErrors = {
    /**
     * Product Type or image not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetItemProductTypesProductTypeIdImagesImageIdGetError = GetItemProductTypesProductTypeIdImagesImageIdGetErrors[keyof GetItemProductTypesProductTypeIdImagesImageIdGetErrors];

export type GetItemProductTypesProductTypeIdImagesImageIdGetResponses = {
    /**
     * Image found
     */
    200: ImageReadWithinParent;
};

export type GetItemProductTypesProductTypeIdImagesImageIdGetResponse = GetItemProductTypesProductTypeIdImagesImageIdGetResponses[keyof GetItemProductTypesProductTypeIdImagesImageIdGetResponses];

export type GetCurrentUserProductsUsersMeProductsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Include
         * Relationships to include
         */
        include?: Array<string> | null;
        /**
         * Name  Ilike
         */
        name__ilike?: string | null;
        /**
         * Description  Ilike
         */
        description__ilike?: string | null;
        /**
         * Brand  Ilike
         */
        brand__ilike?: string | null;
        /**
         * Model  Ilike
         */
        model__ilike?: string | null;
        /**
         * Dismantling Time Start  Gte
         */
        dismantling_time_start__gte?: string | null;
        /**
         * Dismantling Time Start  Lte
         */
        dismantling_time_start__lte?: string | null;
        /**
         * Dismantling Time End  Gte
         */
        dismantling_time_end__gte?: string | null;
        /**
         * Dismantling Time End  Lte
         */
        dismantling_time_end__lte?: string | null;
        /**
         * Search
         */
        search?: string | null;
        /**
         * Physical Properties  Weight Kg  Gte
         */
        physical_properties__weight_kg__gte?: number | null;
        /**
         * Physical Properties  Weight Kg  Lte
         */
        physical_properties__weight_kg__lte?: number | null;
        /**
         * Physical Properties  Height Cm  Gte
         */
        physical_properties__height_cm__gte?: number | null;
        /**
         * Physical Properties  Height Cm  Lte
         */
        physical_properties__height_cm__lte?: number | null;
        /**
         * Physical Properties  Width Cm  Gte
         */
        physical_properties__width_cm__gte?: number | null;
        /**
         * Physical Properties  Width Cm  Lte
         */
        physical_properties__width_cm__lte?: number | null;
        /**
         * Physical Properties  Depth Cm  Gte
         */
        physical_properties__depth_cm__gte?: number | null;
        /**
         * Physical Properties  Depth Cm  Lte
         */
        physical_properties__depth_cm__lte?: number | null;
        /**
         * Product Type  Name  Ilike
         */
        product_type__name__ilike?: string | null;
        /**
         * Product Type  Description  Ilike
         */
        product_type__description__ilike?: string | null;
        /**
         * Product Type  Search
         */
        product_type__search?: string | null;
    };
    url: '/users/me/products';
};

export type GetCurrentUserProductsUsersMeProductsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetCurrentUserProductsUsersMeProductsGetError = GetCurrentUserProductsUsersMeProductsGetErrors[keyof GetCurrentUserProductsUsersMeProductsGetErrors];

export type GetCurrentUserProductsUsersMeProductsGetResponses = {
    /**
     * Response Get Current User Products Users Me Products Get
     * Successful Response
     */
    200: Array<ProductReadWithRelationshipsAndFlatComponentsReadable>;
};

export type GetCurrentUserProductsUsersMeProductsGetResponse = GetCurrentUserProductsUsersMeProductsGetResponses[keyof GetCurrentUserProductsUsersMeProductsGetResponses];

export type GetProductsProductsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Include
         * Relationships to include
         */
        include?: Array<string> | null;
        /**
         * Name  Ilike
         */
        name__ilike?: string | null;
        /**
         * Description  Ilike
         */
        description__ilike?: string | null;
        /**
         * Brand  Ilike
         */
        brand__ilike?: string | null;
        /**
         * Model  Ilike
         */
        model__ilike?: string | null;
        /**
         * Dismantling Time Start  Gte
         */
        dismantling_time_start__gte?: string | null;
        /**
         * Dismantling Time Start  Lte
         */
        dismantling_time_start__lte?: string | null;
        /**
         * Dismantling Time End  Gte
         */
        dismantling_time_end__gte?: string | null;
        /**
         * Dismantling Time End  Lte
         */
        dismantling_time_end__lte?: string | null;
        /**
         * Search
         */
        search?: string | null;
        /**
         * Physical Properties  Weight Kg  Gte
         */
        physical_properties__weight_kg__gte?: number | null;
        /**
         * Physical Properties  Weight Kg  Lte
         */
        physical_properties__weight_kg__lte?: number | null;
        /**
         * Physical Properties  Height Cm  Gte
         */
        physical_properties__height_cm__gte?: number | null;
        /**
         * Physical Properties  Height Cm  Lte
         */
        physical_properties__height_cm__lte?: number | null;
        /**
         * Physical Properties  Width Cm  Gte
         */
        physical_properties__width_cm__gte?: number | null;
        /**
         * Physical Properties  Width Cm  Lte
         */
        physical_properties__width_cm__lte?: number | null;
        /**
         * Physical Properties  Depth Cm  Gte
         */
        physical_properties__depth_cm__gte?: number | null;
        /**
         * Physical Properties  Depth Cm  Lte
         */
        physical_properties__depth_cm__lte?: number | null;
        /**
         * Product Type  Name  Ilike
         */
        product_type__name__ilike?: string | null;
        /**
         * Product Type  Description  Ilike
         */
        product_type__description__ilike?: string | null;
        /**
         * Product Type  Search
         */
        product_type__search?: string | null;
        /**
         * Page
         * Page number
         */
        page?: number;
        /**
         * Size
         * Page size
         */
        size?: number;
    };
    url: '/products';
};

export type GetProductsProductsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetProductsProductsGetError = GetProductsProductsGetErrors[keyof GetProductsProductsGetErrors];

export type GetProductsProductsGetResponses = {
    /**
     * Successful Response
     */
    200: PageTypeVarCustomizedProductReadWithRelationshipsAndFlatComponentsReadable;
};

export type GetProductsProductsGetResponse = GetProductsProductsGetResponses[keyof GetProductsProductsGetResponses];

export type CreateProductProductsPostData = {
    /**
     * Product to create
     */
    body: ProductCreateWithComponents;
    path?: never;
    query?: never;
    url: '/products';
};

export type CreateProductProductsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateProductProductsPostError = CreateProductProductsPostErrors[keyof CreateProductProductsPostErrors];

export type CreateProductProductsPostResponses = {
    /**
     * Successful Response
     */
    201: ProductRead;
};

export type CreateProductProductsPostResponse = CreateProductProductsPostResponses[keyof CreateProductProductsPostResponses];

export type GetProductsTreeProductsTreeGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Recursion Depth
         * Maximum recursion depth
         */
        recursion_depth?: number;
        /**
         * Name  Ilike
         */
        name__ilike?: string | null;
        /**
         * Description  Ilike
         */
        description__ilike?: string | null;
        /**
         * Brand  Ilike
         */
        brand__ilike?: string | null;
        /**
         * Model  Ilike
         */
        model__ilike?: string | null;
        /**
         * Dismantling Time Start  Gte
         */
        dismantling_time_start__gte?: string | null;
        /**
         * Dismantling Time Start  Lte
         */
        dismantling_time_start__lte?: string | null;
        /**
         * Dismantling Time End  Gte
         */
        dismantling_time_end__gte?: string | null;
        /**
         * Dismantling Time End  Lte
         */
        dismantling_time_end__lte?: string | null;
        /**
         * Search
         */
        search?: string | null;
        /**
         * Physical Properties  Weight Kg  Gte
         */
        physical_properties__weight_kg__gte?: number | null;
        /**
         * Physical Properties  Weight Kg  Lte
         */
        physical_properties__weight_kg__lte?: number | null;
        /**
         * Physical Properties  Height Cm  Gte
         */
        physical_properties__height_cm__gte?: number | null;
        /**
         * Physical Properties  Height Cm  Lte
         */
        physical_properties__height_cm__lte?: number | null;
        /**
         * Physical Properties  Width Cm  Gte
         */
        physical_properties__width_cm__gte?: number | null;
        /**
         * Physical Properties  Width Cm  Lte
         */
        physical_properties__width_cm__lte?: number | null;
        /**
         * Physical Properties  Depth Cm  Gte
         */
        physical_properties__depth_cm__gte?: number | null;
        /**
         * Physical Properties  Depth Cm  Lte
         */
        physical_properties__depth_cm__lte?: number | null;
        /**
         * Product Type  Name  Ilike
         */
        product_type__name__ilike?: string | null;
        /**
         * Product Type  Description  Ilike
         */
        product_type__description__ilike?: string | null;
        /**
         * Product Type  Search
         */
        product_type__search?: string | null;
    };
    url: '/products/tree';
};

export type GetProductsTreeProductsTreeGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetProductsTreeProductsTreeGetError = GetProductsTreeProductsTreeGetErrors[keyof GetProductsTreeProductsTreeGetErrors];

export type GetProductsTreeProductsTreeGetResponses = {
    /**
     * Response Get Products Tree Products Tree Get
     * Product tree with components
     */
    200: Array<ProductReadWithRecursiveComponentsReadable>;
};

export type GetProductsTreeProductsTreeGetResponse = GetProductsTreeProductsTreeGetResponses[keyof GetProductsTreeProductsTreeGetResponses];

export type DeleteProductProductsProductIdDeleteData = {
    body?: never;
    path: {
        /**
         * Product Id
         */
        product_id: number;
    };
    query?: never;
    url: '/products/{product_id}';
};

export type DeleteProductProductsProductIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteProductProductsProductIdDeleteError = DeleteProductProductsProductIdDeleteErrors[keyof DeleteProductProductsProductIdDeleteErrors];

export type DeleteProductProductsProductIdDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type DeleteProductProductsProductIdDeleteResponse = DeleteProductProductsProductIdDeleteResponses[keyof DeleteProductProductsProductIdDeleteResponses];

export type GetProductProductsProductIdGetData = {
    body?: never;
    path: {
        /**
         * Product Id
         */
        product_id: number;
    };
    query?: {
        /**
         * Include
         * Relationships to include
         */
        include?: Array<string> | null;
    };
    url: '/products/{product_id}';
};

export type GetProductProductsProductIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetProductProductsProductIdGetError = GetProductProductsProductIdGetErrors[keyof GetProductProductsProductIdGetErrors];

export type GetProductProductsProductIdGetResponses = {
    /**
     * Successful Response
     */
    200: ProductReadWithRelationshipsAndFlatComponentsReadable;
};

export type GetProductProductsProductIdGetResponse = GetProductProductsProductIdGetResponses[keyof GetProductProductsProductIdGetResponses];

export type UpdateProductProductsProductIdPatchData = {
    /**
     * Product Update
     */
    body: ProductUpdate | ProductUpdateWithProperties;
    path: {
        /**
         * Product Id
         */
        product_id: number;
    };
    query?: never;
    url: '/products/{product_id}';
};

export type UpdateProductProductsProductIdPatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateProductProductsProductIdPatchError = UpdateProductProductsProductIdPatchErrors[keyof UpdateProductProductsProductIdPatchErrors];

export type UpdateProductProductsProductIdPatchResponses = {
    /**
     * Successful Response
     */
    200: ProductReadWithPropertiesReadable;
};

export type UpdateProductProductsProductIdPatchResponse = UpdateProductProductsProductIdPatchResponses[keyof UpdateProductProductsProductIdPatchResponses];

export type GetProductSubtreeProductsProductIdComponentsTreeGetData = {
    body?: never;
    path: {
        /**
         * Product Id
         */
        product_id: number;
    };
    query?: {
        /**
         * Recursion Depth
         * Maximum recursion depth
         */
        recursion_depth?: number;
        /**
         * Name  Ilike
         */
        name__ilike?: string | null;
        /**
         * Description  Ilike
         */
        description__ilike?: string | null;
        /**
         * Brand  Ilike
         */
        brand__ilike?: string | null;
        /**
         * Model  Ilike
         */
        model__ilike?: string | null;
        /**
         * Dismantling Time Start  Gte
         */
        dismantling_time_start__gte?: string | null;
        /**
         * Dismantling Time Start  Lte
         */
        dismantling_time_start__lte?: string | null;
        /**
         * Dismantling Time End  Gte
         */
        dismantling_time_end__gte?: string | null;
        /**
         * Dismantling Time End  Lte
         */
        dismantling_time_end__lte?: string | null;
        /**
         * Search
         */
        search?: string | null;
        /**
         * Physical Properties  Weight Kg  Gte
         */
        physical_properties__weight_kg__gte?: number | null;
        /**
         * Physical Properties  Weight Kg  Lte
         */
        physical_properties__weight_kg__lte?: number | null;
        /**
         * Physical Properties  Height Cm  Gte
         */
        physical_properties__height_cm__gte?: number | null;
        /**
         * Physical Properties  Height Cm  Lte
         */
        physical_properties__height_cm__lte?: number | null;
        /**
         * Physical Properties  Width Cm  Gte
         */
        physical_properties__width_cm__gte?: number | null;
        /**
         * Physical Properties  Width Cm  Lte
         */
        physical_properties__width_cm__lte?: number | null;
        /**
         * Physical Properties  Depth Cm  Gte
         */
        physical_properties__depth_cm__gte?: number | null;
        /**
         * Physical Properties  Depth Cm  Lte
         */
        physical_properties__depth_cm__lte?: number | null;
        /**
         * Product Type  Name  Ilike
         */
        product_type__name__ilike?: string | null;
        /**
         * Product Type  Description  Ilike
         */
        product_type__description__ilike?: string | null;
        /**
         * Product Type  Search
         */
        product_type__search?: string | null;
    };
    url: '/products/{product_id}/components/tree';
};

export type GetProductSubtreeProductsProductIdComponentsTreeGetErrors = {
    /**
     * Product not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetProductSubtreeProductsProductIdComponentsTreeGetError = GetProductSubtreeProductsProductIdComponentsTreeGetErrors[keyof GetProductSubtreeProductsProductIdComponentsTreeGetErrors];

export type GetProductSubtreeProductsProductIdComponentsTreeGetResponses = {
    /**
     * Response Get Product Subtree Products  Product Id  Components Tree Get
     * Product tree with components
     */
    200: Array<ComponentReadWithRecursiveComponents>;
};

export type GetProductSubtreeProductsProductIdComponentsTreeGetResponse = GetProductSubtreeProductsProductIdComponentsTreeGetResponses[keyof GetProductSubtreeProductsProductIdComponentsTreeGetResponses];

export type GetProductComponentsProductsProductIdComponentsGetData = {
    body?: never;
    path: {
        /**
         * Product Id
         */
        product_id: number;
    };
    query?: {
        /**
         * Include
         * Relationships to include
         */
        include?: Array<string> | null;
        /**
         * Name  Ilike
         */
        name__ilike?: string | null;
        /**
         * Description  Ilike
         */
        description__ilike?: string | null;
        /**
         * Brand  Ilike
         */
        brand__ilike?: string | null;
        /**
         * Model  Ilike
         */
        model__ilike?: string | null;
        /**
         * Dismantling Time Start  Gte
         */
        dismantling_time_start__gte?: string | null;
        /**
         * Dismantling Time Start  Lte
         */
        dismantling_time_start__lte?: string | null;
        /**
         * Dismantling Time End  Gte
         */
        dismantling_time_end__gte?: string | null;
        /**
         * Dismantling Time End  Lte
         */
        dismantling_time_end__lte?: string | null;
        /**
         * Search
         */
        search?: string | null;
        /**
         * Physical Properties  Weight Kg  Gte
         */
        physical_properties__weight_kg__gte?: number | null;
        /**
         * Physical Properties  Weight Kg  Lte
         */
        physical_properties__weight_kg__lte?: number | null;
        /**
         * Physical Properties  Height Cm  Gte
         */
        physical_properties__height_cm__gte?: number | null;
        /**
         * Physical Properties  Height Cm  Lte
         */
        physical_properties__height_cm__lte?: number | null;
        /**
         * Physical Properties  Width Cm  Gte
         */
        physical_properties__width_cm__gte?: number | null;
        /**
         * Physical Properties  Width Cm  Lte
         */
        physical_properties__width_cm__lte?: number | null;
        /**
         * Physical Properties  Depth Cm  Gte
         */
        physical_properties__depth_cm__gte?: number | null;
        /**
         * Physical Properties  Depth Cm  Lte
         */
        physical_properties__depth_cm__lte?: number | null;
        /**
         * Product Type  Name  Ilike
         */
        product_type__name__ilike?: string | null;
        /**
         * Product Type  Description  Ilike
         */
        product_type__description__ilike?: string | null;
        /**
         * Product Type  Search
         */
        product_type__search?: string | null;
    };
    url: '/products/{product_id}/components';
};

export type GetProductComponentsProductsProductIdComponentsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetProductComponentsProductsProductIdComponentsGetError = GetProductComponentsProductsProductIdComponentsGetErrors[keyof GetProductComponentsProductsProductIdComponentsGetErrors];

export type GetProductComponentsProductsProductIdComponentsGetResponses = {
    /**
     * Response Get Product Components Products  Product Id  Components Get
     * Successful Response
     */
    200: Array<ProductReadWithRelationshipsAndFlatComponentsReadable>;
};

export type GetProductComponentsProductsProductIdComponentsGetResponse = GetProductComponentsProductsProductIdComponentsGetResponses[keyof GetProductComponentsProductsProductIdComponentsGetResponses];

export type AddComponentToProductProductsProductIdComponentsPostData = {
    body: ComponentCreateWithComponents;
    path: {
        /**
         * Product Id
         */
        product_id: number;
    };
    query?: never;
    url: '/products/{product_id}/components';
};

export type AddComponentToProductProductsProductIdComponentsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AddComponentToProductProductsProductIdComponentsPostError = AddComponentToProductProductsProductIdComponentsPostErrors[keyof AddComponentToProductProductsProductIdComponentsPostErrors];

export type AddComponentToProductProductsProductIdComponentsPostResponses = {
    /**
     * Successful Response
     */
    201: ComponentReadWithRecursiveComponents;
};

export type AddComponentToProductProductsProductIdComponentsPostResponse = AddComponentToProductProductsProductIdComponentsPostResponses[keyof AddComponentToProductProductsProductIdComponentsPostResponses];

export type DeleteProductComponentProductsProductIdComponentsComponentIdDeleteData = {
    body?: never;
    path: {
        /**
         * Component Id
         */
        component_id: number;
        /**
         * Product Id
         */
        product_id: number;
    };
    query?: never;
    url: '/products/{product_id}/components/{component_id}';
};

export type DeleteProductComponentProductsProductIdComponentsComponentIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteProductComponentProductsProductIdComponentsComponentIdDeleteError = DeleteProductComponentProductsProductIdComponentsComponentIdDeleteErrors[keyof DeleteProductComponentProductsProductIdComponentsComponentIdDeleteErrors];

export type DeleteProductComponentProductsProductIdComponentsComponentIdDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type DeleteProductComponentProductsProductIdComponentsComponentIdDeleteResponse = DeleteProductComponentProductsProductIdComponentsComponentIdDeleteResponses[keyof DeleteProductComponentProductsProductIdComponentsComponentIdDeleteResponses];

export type GetProductComponentProductsProductIdComponentsComponentIdGetData = {
    body?: never;
    path: {
        /**
         * Product Id
         */
        product_id: number;
        /**
         * Component Id
         */
        component_id: number;
    };
    query?: {
        /**
         * Include
         * Relationships to include
         */
        include?: Array<string> | null;
    };
    url: '/products/{product_id}/components/{component_id}';
};

export type GetProductComponentProductsProductIdComponentsComponentIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetProductComponentProductsProductIdComponentsComponentIdGetError = GetProductComponentProductsProductIdComponentsComponentIdGetErrors[keyof GetProductComponentProductsProductIdComponentsComponentIdGetErrors];

export type GetProductComponentProductsProductIdComponentsComponentIdGetResponses = {
    /**
     * Successful Response
     */
    200: ProductReadWithRelationshipsAndFlatComponentsReadable;
};

export type GetProductComponentProductsProductIdComponentsComponentIdGetResponse = GetProductComponentProductsProductIdComponentsComponentIdGetResponses[keyof GetProductComponentProductsProductIdComponentsComponentIdGetResponses];

export type GetItemsProductsProductIdFilesGetData = {
    body?: never;
    path: {
        /**
         * Product Id
         * ID of the Product
         */
        product_id: number;
    };
    query?: {
        /**
         * Filename  Ilike
         */
        filename__ilike?: string | null;
        /**
         * Description  Ilike
         */
        description__ilike?: string | null;
        /**
         * Parent Type
         */
        parent_type?: FileParentType | null;
        /**
         * Search
         */
        search?: string | null;
    };
    url: '/products/{product_id}/files';
};

export type GetItemsProductsProductIdFilesGetErrors = {
    /**
     * Product not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetItemsProductsProductIdFilesGetError = GetItemsProductsProductIdFilesGetErrors[keyof GetItemsProductsProductIdFilesGetErrors];

export type GetItemsProductsProductIdFilesGetResponses = {
    /**
     * Response Get Items Products  Product Id  Files Get
     * List of Files associated with the Product
     */
    200: Array<FileReadWithinParent>;
};

export type GetItemsProductsProductIdFilesGetResponse = GetItemsProductsProductIdFilesGetResponses[keyof GetItemsProductsProductIdFilesGetResponses];

export type UploadFileProductsProductIdFilesPostData = {
    body: BodyUploadFileProductsProductIdFilesPost;
    path: {
        /**
         * Product Id
         * ID of the Product
         */
        product_id: number;
    };
    query?: never;
    url: '/products/{product_id}/files';
};

export type UploadFileProductsProductIdFilesPostErrors = {
    /**
     * Invalid file data
     */
    400: unknown;
    /**
     * Product not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UploadFileProductsProductIdFilesPostError = UploadFileProductsProductIdFilesPostErrors[keyof UploadFileProductsProductIdFilesPostErrors];

export type UploadFileProductsProductIdFilesPostResponses = {
    /**
     * File successfully uploaded
     */
    200: FileReadWithinParent;
};

export type UploadFileProductsProductIdFilesPostResponse = UploadFileProductsProductIdFilesPostResponses[keyof UploadFileProductsProductIdFilesPostResponses];

export type DeleteItemProductsProductIdFilesFileIdDeleteData = {
    body?: never;
    path: {
        /**
         * File Id
         * ID of the file
         */
        file_id: string;
        /**
         * Product Id
         * ID of the Product
         */
        product_id: number;
    };
    query?: never;
    url: '/products/{product_id}/files/{file_id}';
};

export type DeleteItemProductsProductIdFilesFileIdDeleteErrors = {
    /**
     * Product or file not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteItemProductsProductIdFilesFileIdDeleteError = DeleteItemProductsProductIdFilesFileIdDeleteErrors[keyof DeleteItemProductsProductIdFilesFileIdDeleteErrors];

export type DeleteItemProductsProductIdFilesFileIdDeleteResponses = {
    /**
     * File successfully removed
     */
    200: FileReadWithinParent;
};

export type DeleteItemProductsProductIdFilesFileIdDeleteResponse = DeleteItemProductsProductIdFilesFileIdDeleteResponses[keyof DeleteItemProductsProductIdFilesFileIdDeleteResponses];

export type GetItemProductsProductIdFilesFileIdGetData = {
    body?: never;
    path: {
        /**
         * File Id
         * ID of the file
         */
        file_id: string;
        /**
         * Product Id
         * ID of the Product
         */
        product_id: number;
    };
    query?: never;
    url: '/products/{product_id}/files/{file_id}';
};

export type GetItemProductsProductIdFilesFileIdGetErrors = {
    /**
     * Product or file not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetItemProductsProductIdFilesFileIdGetError = GetItemProductsProductIdFilesFileIdGetErrors[keyof GetItemProductsProductIdFilesFileIdGetErrors];

export type GetItemProductsProductIdFilesFileIdGetResponses = {
    /**
     * File found
     */
    200: FileReadWithinParent;
};

export type GetItemProductsProductIdFilesFileIdGetResponse = GetItemProductsProductIdFilesFileIdGetResponses[keyof GetItemProductsProductIdFilesFileIdGetResponses];

export type GetItemsProductsProductIdImagesGetData = {
    body?: never;
    path: {
        /**
         * Product Id
         * ID of the Product
         */
        product_id: number;
    };
    query?: {
        /**
         * Filename  Ilike
         */
        filename__ilike?: string | null;
        /**
         * Description  Ilike
         */
        description__ilike?: string | null;
        /**
         * Parent Type
         */
        parent_type?: ImageParentType | null;
        /**
         * Search
         */
        search?: string | null;
    };
    url: '/products/{product_id}/images';
};

export type GetItemsProductsProductIdImagesGetErrors = {
    /**
     * Product not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetItemsProductsProductIdImagesGetError = GetItemsProductsProductIdImagesGetErrors[keyof GetItemsProductsProductIdImagesGetErrors];

export type GetItemsProductsProductIdImagesGetResponses = {
    /**
     * Response Get Items Products  Product Id  Images Get
     * List of Images associated with the Product
     */
    200: Array<ImageReadWithinParent>;
};

export type GetItemsProductsProductIdImagesGetResponse = GetItemsProductsProductIdImagesGetResponses[keyof GetItemsProductsProductIdImagesGetResponses];

export type UploadImageProductsProductIdImagesPostData = {
    body: BodyUploadImageProductsProductIdImagesPost;
    path: {
        /**
         * Product Id
         * ID of the Product
         */
        product_id: number;
    };
    query?: never;
    url: '/products/{product_id}/images';
};

export type UploadImageProductsProductIdImagesPostErrors = {
    /**
     * Invalid image data
     */
    400: unknown;
    /**
     * Product not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UploadImageProductsProductIdImagesPostError = UploadImageProductsProductIdImagesPostErrors[keyof UploadImageProductsProductIdImagesPostErrors];

export type UploadImageProductsProductIdImagesPostResponses = {
    /**
     * Image successfully uploaded
     */
    200: ImageReadWithinParent;
};

export type UploadImageProductsProductIdImagesPostResponse = UploadImageProductsProductIdImagesPostResponses[keyof UploadImageProductsProductIdImagesPostResponses];

export type DeleteItemProductsProductIdImagesImageIdDeleteData = {
    body?: never;
    path: {
        /**
         * Image Id
         * ID of the image
         */
        image_id: string;
        /**
         * Product Id
         * ID of the Product
         */
        product_id: number;
    };
    query?: never;
    url: '/products/{product_id}/images/{image_id}';
};

export type DeleteItemProductsProductIdImagesImageIdDeleteErrors = {
    /**
     * Product or image not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteItemProductsProductIdImagesImageIdDeleteError = DeleteItemProductsProductIdImagesImageIdDeleteErrors[keyof DeleteItemProductsProductIdImagesImageIdDeleteErrors];

export type DeleteItemProductsProductIdImagesImageIdDeleteResponses = {
    /**
     * Image successfully removed
     */
    200: ImageReadWithinParent;
};

export type DeleteItemProductsProductIdImagesImageIdDeleteResponse = DeleteItemProductsProductIdImagesImageIdDeleteResponses[keyof DeleteItemProductsProductIdImagesImageIdDeleteResponses];

export type GetItemProductsProductIdImagesImageIdGetData = {
    body?: never;
    path: {
        /**
         * Image Id
         * ID of the image
         */
        image_id: string;
        /**
         * Product Id
         * ID of the Product
         */
        product_id: number;
    };
    query?: never;
    url: '/products/{product_id}/images/{image_id}';
};

export type GetItemProductsProductIdImagesImageIdGetErrors = {
    /**
     * Product or image not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetItemProductsProductIdImagesImageIdGetError = GetItemProductsProductIdImagesImageIdGetErrors[keyof GetItemProductsProductIdImagesImageIdGetErrors];

export type GetItemProductsProductIdImagesImageIdGetResponses = {
    /**
     * Image found
     */
    200: ImageReadWithinParent;
};

export type GetItemProductsProductIdImagesImageIdGetResponse = GetItemProductsProductIdImagesImageIdGetResponses[keyof GetItemProductsProductIdImagesImageIdGetResponses];

export type DeleteProductPhysicalPropertiesProductsProductIdPhysicalPropertiesDeleteData = {
    body?: never;
    path: {
        /**
         * Product Id
         */
        product_id: number;
    };
    query?: never;
    url: '/products/{product_id}/physical_properties';
};

export type DeleteProductPhysicalPropertiesProductsProductIdPhysicalPropertiesDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteProductPhysicalPropertiesProductsProductIdPhysicalPropertiesDeleteError = DeleteProductPhysicalPropertiesProductsProductIdPhysicalPropertiesDeleteErrors[keyof DeleteProductPhysicalPropertiesProductsProductIdPhysicalPropertiesDeleteErrors];

export type DeleteProductPhysicalPropertiesProductsProductIdPhysicalPropertiesDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type DeleteProductPhysicalPropertiesProductsProductIdPhysicalPropertiesDeleteResponse = DeleteProductPhysicalPropertiesProductsProductIdPhysicalPropertiesDeleteResponses[keyof DeleteProductPhysicalPropertiesProductsProductIdPhysicalPropertiesDeleteResponses];

export type GetProductPhysicalPropertiesProductsProductIdPhysicalPropertiesGetData = {
    body?: never;
    path: {
        /**
         * Product Id
         */
        product_id: number;
    };
    query?: never;
    url: '/products/{product_id}/physical_properties';
};

export type GetProductPhysicalPropertiesProductsProductIdPhysicalPropertiesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetProductPhysicalPropertiesProductsProductIdPhysicalPropertiesGetError = GetProductPhysicalPropertiesProductsProductIdPhysicalPropertiesGetErrors[keyof GetProductPhysicalPropertiesProductsProductIdPhysicalPropertiesGetErrors];

export type GetProductPhysicalPropertiesProductsProductIdPhysicalPropertiesGetResponses = {
    /**
     * Successful Response
     */
    200: PhysicalPropertiesReadReadable;
};

export type GetProductPhysicalPropertiesProductsProductIdPhysicalPropertiesGetResponse = GetProductPhysicalPropertiesProductsProductIdPhysicalPropertiesGetResponses[keyof GetProductPhysicalPropertiesProductsProductIdPhysicalPropertiesGetResponses];

export type UpdateProductPhysicalPropertiesProductsProductIdPhysicalPropertiesPatchData = {
    body: PhysicalPropertiesUpdate;
    path: {
        /**
         * Product Id
         */
        product_id: number;
    };
    query?: never;
    url: '/products/{product_id}/physical_properties';
};

export type UpdateProductPhysicalPropertiesProductsProductIdPhysicalPropertiesPatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateProductPhysicalPropertiesProductsProductIdPhysicalPropertiesPatchError = UpdateProductPhysicalPropertiesProductsProductIdPhysicalPropertiesPatchErrors[keyof UpdateProductPhysicalPropertiesProductsProductIdPhysicalPropertiesPatchErrors];

export type UpdateProductPhysicalPropertiesProductsProductIdPhysicalPropertiesPatchResponses = {
    /**
     * Successful Response
     */
    200: PhysicalPropertiesReadReadable;
};

export type UpdateProductPhysicalPropertiesProductsProductIdPhysicalPropertiesPatchResponse = UpdateProductPhysicalPropertiesProductsProductIdPhysicalPropertiesPatchResponses[keyof UpdateProductPhysicalPropertiesProductsProductIdPhysicalPropertiesPatchResponses];

export type CreateProductPhysicalPropertiesProductsProductIdPhysicalPropertiesPostData = {
    body: PhysicalPropertiesCreate;
    path: {
        /**
         * Product Id
         */
        product_id: number;
    };
    query?: never;
    url: '/products/{product_id}/physical_properties';
};

export type CreateProductPhysicalPropertiesProductsProductIdPhysicalPropertiesPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateProductPhysicalPropertiesProductsProductIdPhysicalPropertiesPostError = CreateProductPhysicalPropertiesProductsProductIdPhysicalPropertiesPostErrors[keyof CreateProductPhysicalPropertiesProductsProductIdPhysicalPropertiesPostErrors];

export type CreateProductPhysicalPropertiesProductsProductIdPhysicalPropertiesPostResponses = {
    /**
     * Successful Response
     */
    201: PhysicalPropertiesReadReadable;
};

export type CreateProductPhysicalPropertiesProductsProductIdPhysicalPropertiesPostResponse = CreateProductPhysicalPropertiesProductsProductIdPhysicalPropertiesPostResponses[keyof CreateProductPhysicalPropertiesProductsProductIdPhysicalPropertiesPostResponses];

export type GetProductVideosProductsProductIdVideosGetData = {
    body?: never;
    path: {
        /**
         * Product Id
         */
        product_id: number;
    };
    query?: {
        /**
         * Url  Ilike
         */
        url__ilike?: string | null;
        /**
         * Description  Ilike
         */
        description__ilike?: string | null;
        /**
         * Search
         */
        search?: string | null;
    };
    url: '/products/{product_id}/videos';
};

export type GetProductVideosProductsProductIdVideosGetErrors = {
    /**
     * Product not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetProductVideosProductsProductIdVideosGetError = GetProductVideosProductsProductIdVideosGetErrors[keyof GetProductVideosProductsProductIdVideosGetErrors];

export type GetProductVideosProductsProductIdVideosGetResponses = {
    /**
     * Response Get Product Videos Products  Product Id  Videos Get
     * List of videos
     */
    200: Array<VideoReadWithinProduct>;
};

export type GetProductVideosProductsProductIdVideosGetResponse = GetProductVideosProductsProductIdVideosGetResponses[keyof GetProductVideosProductsProductIdVideosGetResponses];

export type CreateProductVideoProductsProductIdVideosPostData = {
    body: VideoCreateWithinProduct;
    path: {
        /**
         * Product Id
         */
        product_id: number;
    };
    query?: never;
    url: '/products/{product_id}/videos';
};

export type CreateProductVideoProductsProductIdVideosPostErrors = {
    /**
     * Product not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateProductVideoProductsProductIdVideosPostError = CreateProductVideoProductsProductIdVideosPostErrors[keyof CreateProductVideoProductsProductIdVideosPostErrors];

export type CreateProductVideoProductsProductIdVideosPostResponses = {
    /**
     * Video created successfully
     */
    201: VideoReadWithinProduct;
};

export type CreateProductVideoProductsProductIdVideosPostResponse = CreateProductVideoProductsProductIdVideosPostResponses[keyof CreateProductVideoProductsProductIdVideosPostResponses];

export type DeleteProductVideoProductsProductIdVideosVideoIdDeleteData = {
    body?: never;
    path: {
        /**
         * Video Id
         */
        video_id: number;
        /**
         * Product Id
         */
        product_id: number;
    };
    query?: never;
    url: '/products/{product_id}/videos/{video_id}';
};

export type DeleteProductVideoProductsProductIdVideosVideoIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteProductVideoProductsProductIdVideosVideoIdDeleteError = DeleteProductVideoProductsProductIdVideosVideoIdDeleteErrors[keyof DeleteProductVideoProductsProductIdVideosVideoIdDeleteErrors];

export type DeleteProductVideoProductsProductIdVideosVideoIdDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type DeleteProductVideoProductsProductIdVideosVideoIdDeleteResponse = DeleteProductVideoProductsProductIdVideosVideoIdDeleteResponses[keyof DeleteProductVideoProductsProductIdVideosVideoIdDeleteResponses];

export type GetProductVideoProductsProductIdVideosVideoIdGetData = {
    body?: never;
    path: {
        /**
         * Product Id
         */
        product_id: number;
        /**
         * Video Id
         */
        video_id: number;
    };
    query?: never;
    url: '/products/{product_id}/videos/{video_id}';
};

export type GetProductVideoProductsProductIdVideosVideoIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetProductVideoProductsProductIdVideosVideoIdGetError = GetProductVideoProductsProductIdVideosVideoIdGetErrors[keyof GetProductVideoProductsProductIdVideosVideoIdGetErrors];

export type GetProductVideoProductsProductIdVideosVideoIdGetResponses = {
    /**
     * Successful Response
     */
    200: VideoReadWithinProduct;
};

export type GetProductVideoProductsProductIdVideosVideoIdGetResponse = GetProductVideoProductsProductIdVideosVideoIdGetResponses[keyof GetProductVideoProductsProductIdVideosVideoIdGetResponses];

export type RemoveMaterialsFromProductBulkProductsProductIdMaterialsDeleteData = {
    /**
     * Material Ids
     * Material IDs to remove from the product
     */
    body?: Array<number>;
    path: {
        /**
         * Product Id
         */
        product_id: number;
    };
    query?: never;
    url: '/products/{product_id}/materials';
};

export type RemoveMaterialsFromProductBulkProductsProductIdMaterialsDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RemoveMaterialsFromProductBulkProductsProductIdMaterialsDeleteError = RemoveMaterialsFromProductBulkProductsProductIdMaterialsDeleteErrors[keyof RemoveMaterialsFromProductBulkProductsProductIdMaterialsDeleteErrors];

export type RemoveMaterialsFromProductBulkProductsProductIdMaterialsDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type RemoveMaterialsFromProductBulkProductsProductIdMaterialsDeleteResponse = RemoveMaterialsFromProductBulkProductsProductIdMaterialsDeleteResponses[keyof RemoveMaterialsFromProductBulkProductsProductIdMaterialsDeleteResponses];

export type GetProductBillOfMaterialsProductsProductIdMaterialsGetData = {
    body?: never;
    path: {
        /**
         * Product Id
         */
        product_id: number;
    };
    query?: {
        /**
         * Quantity  Gte
         */
        quantity__gte?: number | null;
        /**
         * Quantity  Lte
         */
        quantity__lte?: number | null;
        /**
         * Unit Ilike
         */
        unit_ilike?: string | null;
        /**
         * Material  Name  Ilike
         */
        material__name__ilike?: string | null;
        /**
         * Material  Description  Ilike
         */
        material__description__ilike?: string | null;
        /**
         * Material  Density Kg M3  Gte
         */
        material__density_kg_m3__gte?: number | null;
        /**
         * Material  Density Kg M3  Lte
         */
        material__density_kg_m3__lte?: number | null;
        /**
         * Material  Is Crm
         */
        material__is_crm?: boolean | null;
        /**
         * Material  Source  Ilike
         */
        material__source__ilike?: string | null;
        /**
         * Material  Search
         */
        material__search?: string | null;
    };
    url: '/products/{product_id}/materials';
};

export type GetProductBillOfMaterialsProductsProductIdMaterialsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetProductBillOfMaterialsProductsProductIdMaterialsGetError = GetProductBillOfMaterialsProductsProductIdMaterialsGetErrors[keyof GetProductBillOfMaterialsProductsProductIdMaterialsGetErrors];

export type GetProductBillOfMaterialsProductsProductIdMaterialsGetResponses = {
    /**
     * Response Get Product Bill Of Materials Products  Product Id  Materials Get
     * Successful Response
     */
    200: Array<MaterialProductLinkReadWithinProduct>;
};

export type GetProductBillOfMaterialsProductsProductIdMaterialsGetResponse = GetProductBillOfMaterialsProductsProductIdMaterialsGetResponses[keyof GetProductBillOfMaterialsProductsProductIdMaterialsGetResponses];

export type AddMaterialsToProductProductsProductIdMaterialsPostData = {
    /**
     * Materials
     * List of materials-product links to add to the product
     */
    body: Array<MaterialProductLinkCreateWithinProduct>;
    path: {
        /**
         * Product Id
         */
        product_id: number;
    };
    query?: never;
    url: '/products/{product_id}/materials';
};

export type AddMaterialsToProductProductsProductIdMaterialsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AddMaterialsToProductProductsProductIdMaterialsPostError = AddMaterialsToProductProductsProductIdMaterialsPostErrors[keyof AddMaterialsToProductProductsProductIdMaterialsPostErrors];

export type AddMaterialsToProductProductsProductIdMaterialsPostResponses = {
    /**
     * Response Add Materials To Product Products  Product Id  Materials Post
     * Successful Response
     */
    201: Array<MaterialProductLinkReadWithinProduct>;
};

export type AddMaterialsToProductProductsProductIdMaterialsPostResponse = AddMaterialsToProductProductsProductIdMaterialsPostResponses[keyof AddMaterialsToProductProductsProductIdMaterialsPostResponses];

export type RemoveMaterialFromProductProductsProductIdMaterialsMaterialIdDeleteData = {
    body?: never;
    path: {
        /**
         * Material Id
         * ID of material to remove from the product
         */
        material_id: number;
        /**
         * Product Id
         */
        product_id: number;
    };
    query?: never;
    url: '/products/{product_id}/materials/{material_id}';
};

export type RemoveMaterialFromProductProductsProductIdMaterialsMaterialIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RemoveMaterialFromProductProductsProductIdMaterialsMaterialIdDeleteError = RemoveMaterialFromProductProductsProductIdMaterialsMaterialIdDeleteErrors[keyof RemoveMaterialFromProductProductsProductIdMaterialsMaterialIdDeleteErrors];

export type RemoveMaterialFromProductProductsProductIdMaterialsMaterialIdDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type RemoveMaterialFromProductProductsProductIdMaterialsMaterialIdDeleteResponse = RemoveMaterialFromProductProductsProductIdMaterialsMaterialIdDeleteResponses[keyof RemoveMaterialFromProductProductsProductIdMaterialsMaterialIdDeleteResponses];

export type GetMaterialInProductBillOfMaterialsProductsProductIdMaterialsMaterialIdGetData = {
    body?: never;
    path: {
        /**
         * Product Id
         */
        product_id: number;
        /**
         * Material Id
         */
        material_id: number;
    };
    query?: never;
    url: '/products/{product_id}/materials/{material_id}';
};

export type GetMaterialInProductBillOfMaterialsProductsProductIdMaterialsMaterialIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetMaterialInProductBillOfMaterialsProductsProductIdMaterialsMaterialIdGetError = GetMaterialInProductBillOfMaterialsProductsProductIdMaterialsMaterialIdGetErrors[keyof GetMaterialInProductBillOfMaterialsProductsProductIdMaterialsMaterialIdGetErrors];

export type GetMaterialInProductBillOfMaterialsProductsProductIdMaterialsMaterialIdGetResponses = {
    /**
     * Successful Response
     */
    200: MaterialProductLinkReadWithinProduct;
};

export type GetMaterialInProductBillOfMaterialsProductsProductIdMaterialsMaterialIdGetResponse = GetMaterialInProductBillOfMaterialsProductsProductIdMaterialsMaterialIdGetResponses[keyof GetMaterialInProductBillOfMaterialsProductsProductIdMaterialsMaterialIdGetResponses];

export type UpdateProductBillOfMaterialsProductsProductIdMaterialsMaterialIdPatchData = {
    body: MaterialProductLinkUpdate;
    path: {
        /**
         * Material Id
         */
        material_id: number;
        /**
         * Product Id
         */
        product_id: number;
    };
    query?: never;
    url: '/products/{product_id}/materials/{material_id}';
};

export type UpdateProductBillOfMaterialsProductsProductIdMaterialsMaterialIdPatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateProductBillOfMaterialsProductsProductIdMaterialsMaterialIdPatchError = UpdateProductBillOfMaterialsProductsProductIdMaterialsMaterialIdPatchErrors[keyof UpdateProductBillOfMaterialsProductsProductIdMaterialsMaterialIdPatchErrors];

export type UpdateProductBillOfMaterialsProductsProductIdMaterialsMaterialIdPatchResponses = {
    /**
     * Successful Response
     */
    200: MaterialProductLinkReadWithinProduct;
};

export type UpdateProductBillOfMaterialsProductsProductIdMaterialsMaterialIdPatchResponse = UpdateProductBillOfMaterialsProductsProductIdMaterialsMaterialIdPatchResponses[keyof UpdateProductBillOfMaterialsProductsProductIdMaterialsMaterialIdPatchResponses];

export type AddMaterialToProductProductsProductIdMaterialsMaterialIdPostData = {
    /**
     * Material-product link details
     */
    body: MaterialProductLinkCreateWithinProductAndMaterial;
    path: {
        /**
         * Material Id
         * ID of material to add to the product
         */
        material_id: number;
        /**
         * Product Id
         */
        product_id: number;
    };
    query?: never;
    url: '/products/{product_id}/materials/{material_id}';
};

export type AddMaterialToProductProductsProductIdMaterialsMaterialIdPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AddMaterialToProductProductsProductIdMaterialsMaterialIdPostError = AddMaterialToProductProductsProductIdMaterialsMaterialIdPostErrors[keyof AddMaterialToProductProductsProductIdMaterialsMaterialIdPostErrors];

export type AddMaterialToProductProductsProductIdMaterialsMaterialIdPostResponses = {
    /**
     * Successful Response
     */
    201: MaterialProductLinkReadWithinProduct;
};

export type AddMaterialToProductProductsProductIdMaterialsMaterialIdPostResponse = AddMaterialToProductProductsProductIdMaterialsMaterialIdPostResponses[keyof AddMaterialToProductProductsProductIdMaterialsMaterialIdPostResponses];

export type GetUnitsUnitsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/units';
};

export type GetUnitsUnitsGetResponses = {
    /**
     * Response Get Units Units Get
     * Successful Response
     */
    200: Array<string>;
};

export type GetUnitsUnitsGetResponse = GetUnitsUnitsGetResponses[keyof GetUnitsUnitsGetResponses];

export type AuthBearerLoginAuthBearerLoginPostData = {
    body: BodyAuthBearerLoginAuthBearerLoginPost;
    path?: never;
    query?: never;
    url: '/auth/bearer/login';
};

export type AuthBearerLoginAuthBearerLoginPostErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AuthBearerLoginAuthBearerLoginPostError = AuthBearerLoginAuthBearerLoginPostErrors[keyof AuthBearerLoginAuthBearerLoginPostErrors];

export type AuthBearerLoginAuthBearerLoginPostResponses = {
    /**
     * Successful Response
     */
    200: BearerResponse;
};

export type AuthBearerLoginAuthBearerLoginPostResponse = AuthBearerLoginAuthBearerLoginPostResponses[keyof AuthBearerLoginAuthBearerLoginPostResponses];

export type AuthBearerLogoutAuthBearerLogoutPostData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth/bearer/logout';
};

export type AuthBearerLogoutAuthBearerLogoutPostErrors = {
    /**
     * Missing token or inactive user.
     */
    401: unknown;
};

export type AuthBearerLogoutAuthBearerLogoutPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type AuthCookieLoginAuthCookieLoginPostData = {
    body: BodyAuthCookieLoginAuthCookieLoginPost;
    path?: never;
    query?: never;
    url: '/auth/cookie/login';
};

export type AuthCookieLoginAuthCookieLoginPostErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AuthCookieLoginAuthCookieLoginPostError = AuthCookieLoginAuthCookieLoginPostErrors[keyof AuthCookieLoginAuthCookieLoginPostErrors];

export type AuthCookieLoginAuthCookieLoginPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
    /**
     * No Content
     */
    204: void;
};

export type AuthCookieLoginAuthCookieLoginPostResponse = AuthCookieLoginAuthCookieLoginPostResponses[keyof AuthCookieLoginAuthCookieLoginPostResponses];

export type AuthCookieLogoutAuthCookieLogoutPostData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth/cookie/logout';
};

export type AuthCookieLogoutAuthCookieLogoutPostErrors = {
    /**
     * Missing token or inactive user.
     */
    401: unknown;
};

export type AuthCookieLogoutAuthCookieLogoutPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
    /**
     * No Content
     */
    204: void;
};

export type AuthCookieLogoutAuthCookieLogoutPostResponse = AuthCookieLogoutAuthCookieLogoutPostResponses[keyof AuthCookieLogoutAuthCookieLogoutPostResponses];

export type GetOrganizationsOrganizationsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Name  Ilike
         */
        name__ilike?: string | null;
        /**
         * Location  Ilike
         */
        location__ilike?: string | null;
        /**
         * Description  Ilike
         */
        description__ilike?: string | null;
    };
    url: '/organizations';
};

export type GetOrganizationsOrganizationsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetOrganizationsOrganizationsGetError = GetOrganizationsOrganizationsGetErrors[keyof GetOrganizationsOrganizationsGetErrors];

export type GetOrganizationsOrganizationsGetResponses = {
    /**
     * Response Get Organizations Organizations Get
     * Successful Response
     */
    200: Array<OrganizationReadPublic>;
};

export type GetOrganizationsOrganizationsGetResponse = GetOrganizationsOrganizationsGetResponses[keyof GetOrganizationsOrganizationsGetResponses];

export type CreateOrganizationOrganizationsPostData = {
    body: OrganizationCreate;
    path?: never;
    query?: never;
    url: '/organizations';
};

export type CreateOrganizationOrganizationsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateOrganizationOrganizationsPostError = CreateOrganizationOrganizationsPostErrors[keyof CreateOrganizationOrganizationsPostErrors];

export type CreateOrganizationOrganizationsPostResponses = {
    /**
     * Successful Response
     */
    201: OrganizationRead;
};

export type CreateOrganizationOrganizationsPostResponse = CreateOrganizationOrganizationsPostResponses[keyof CreateOrganizationOrganizationsPostResponses];

export type GetOrganizationOrganizationsOrganizationIdGetData = {
    body?: never;
    path: {
        /**
         * Organization Id
         */
        organization_id: string;
    };
    query?: never;
    url: '/organizations/{organization_id}';
};

export type GetOrganizationOrganizationsOrganizationIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetOrganizationOrganizationsOrganizationIdGetError = GetOrganizationOrganizationsOrganizationIdGetErrors[keyof GetOrganizationOrganizationsOrganizationIdGetErrors];

export type GetOrganizationOrganizationsOrganizationIdGetResponses = {
    /**
     * Successful Response
     */
    200: OrganizationReadPublic;
};

export type GetOrganizationOrganizationsOrganizationIdGetResponse = GetOrganizationOrganizationsOrganizationIdGetResponses[keyof GetOrganizationOrganizationsOrganizationIdGetResponses];

export type GetOrganizationMembersOrganizationsOrganizationIdMembersGetData = {
    body?: never;
    path: {
        /**
         * Organization Id
         */
        organization_id: string;
    };
    query?: never;
    url: '/organizations/{organization_id}/members';
};

export type GetOrganizationMembersOrganizationsOrganizationIdMembersGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetOrganizationMembersOrganizationsOrganizationIdMembersGetError = GetOrganizationMembersOrganizationsOrganizationIdMembersGetErrors[keyof GetOrganizationMembersOrganizationsOrganizationIdMembersGetErrors];

export type GetOrganizationMembersOrganizationsOrganizationIdMembersGetResponses = {
    /**
     * Response Get Organization Members Organizations  Organization Id  Members Get
     * Successful Response
     */
    200: Array<UserReadPublic>;
};

export type GetOrganizationMembersOrganizationsOrganizationIdMembersGetResponse = GetOrganizationMembersOrganizationsOrganizationIdMembersGetResponses[keyof GetOrganizationMembersOrganizationsOrganizationIdMembersGetResponses];

export type JoinOrganizationOrganizationsOrganizationIdMembersMePostData = {
    body?: never;
    path: {
        /**
         * Organization Id
         */
        organization_id: string;
    };
    query?: never;
    url: '/organizations/{organization_id}/members/me';
};

export type JoinOrganizationOrganizationsOrganizationIdMembersMePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type JoinOrganizationOrganizationsOrganizationIdMembersMePostError = JoinOrganizationOrganizationsOrganizationIdMembersMePostErrors[keyof JoinOrganizationOrganizationsOrganizationIdMembersMePostErrors];

export type JoinOrganizationOrganizationsOrganizationIdMembersMePostResponses = {
    /**
     * Successful Response
     */
    201: UserReadWithOrganization;
};

export type JoinOrganizationOrganizationsOrganizationIdMembersMePostResponse = JoinOrganizationOrganizationsOrganizationIdMembersMePostResponses[keyof JoinOrganizationOrganizationsOrganizationIdMembersMePostResponses];

export type UsersCurrentUserUsersMeGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users/me';
};

export type UsersCurrentUserUsersMeGetErrors = {
    /**
     * Missing token or inactive user.
     */
    401: unknown;
};

export type UsersCurrentUserUsersMeGetResponses = {
    /**
     * Successful Response
     */
    200: UserRead;
};

export type UsersCurrentUserUsersMeGetResponse = UsersCurrentUserUsersMeGetResponses[keyof UsersCurrentUserUsersMeGetResponses];

export type UsersPatchCurrentUserUsersMePatchData = {
    body: UserUpdate;
    path?: never;
    query?: never;
    url: '/users/me';
};

export type UsersPatchCurrentUserUsersMePatchErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Missing token or inactive user.
     */
    401: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UsersPatchCurrentUserUsersMePatchError = UsersPatchCurrentUserUsersMePatchErrors[keyof UsersPatchCurrentUserUsersMePatchErrors];

export type UsersPatchCurrentUserUsersMePatchResponses = {
    /**
     * Successful Response
     */
    200: UserRead;
};

export type UsersPatchCurrentUserUsersMePatchResponse = UsersPatchCurrentUserUsersMePatchResponses[keyof UsersPatchCurrentUserUsersMePatchResponses];

export type UsersDeleteUserUsersIdDeleteData = {
    body?: never;
    path: {
        /**
         * Id
         */
        id: string;
    };
    query?: never;
    url: '/users/{id}';
};

export type UsersDeleteUserUsersIdDeleteErrors = {
    /**
     * Missing token or inactive user.
     */
    401: unknown;
    /**
     * Not a superuser.
     */
    403: unknown;
    /**
     * The user does not exist.
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UsersDeleteUserUsersIdDeleteError = UsersDeleteUserUsersIdDeleteErrors[keyof UsersDeleteUserUsersIdDeleteErrors];

export type UsersDeleteUserUsersIdDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type UsersDeleteUserUsersIdDeleteResponse = UsersDeleteUserUsersIdDeleteResponses[keyof UsersDeleteUserUsersIdDeleteResponses];

export type UsersUserUsersIdGetData = {
    body?: never;
    path: {
        /**
         * Id
         */
        id: string;
    };
    query?: never;
    url: '/users/{id}';
};

export type UsersUserUsersIdGetErrors = {
    /**
     * Missing token or inactive user.
     */
    401: unknown;
    /**
     * Not a superuser.
     */
    403: unknown;
    /**
     * The user does not exist.
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UsersUserUsersIdGetError = UsersUserUsersIdGetErrors[keyof UsersUserUsersIdGetErrors];

export type UsersUserUsersIdGetResponses = {
    /**
     * Successful Response
     */
    200: UserRead;
};

export type UsersUserUsersIdGetResponse = UsersUserUsersIdGetResponses[keyof UsersUserUsersIdGetResponses];

export type UsersPatchUserUsersIdPatchData = {
    body: UserUpdate;
    path: {
        /**
         * Id
         */
        id: string;
    };
    query?: never;
    url: '/users/{id}';
};

export type UsersPatchUserUsersIdPatchErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Missing token or inactive user.
     */
    401: unknown;
    /**
     * Not a superuser.
     */
    403: unknown;
    /**
     * The user does not exist.
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UsersPatchUserUsersIdPatchError = UsersPatchUserUsersIdPatchErrors[keyof UsersPatchUserUsersIdPatchErrors];

export type UsersPatchUserUsersIdPatchResponses = {
    /**
     * Successful Response
     */
    200: UserRead;
};

export type UsersPatchUserUsersIdPatchResponse = UsersPatchUserUsersIdPatchResponses[keyof UsersPatchUserUsersIdPatchResponses];

export type DeleteMyOrganizationUsersMeOrganizationDeleteData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users/me/organization';
};

export type DeleteMyOrganizationUsersMeOrganizationDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type DeleteMyOrganizationUsersMeOrganizationDeleteResponse = DeleteMyOrganizationUsersMeOrganizationDeleteResponses[keyof DeleteMyOrganizationUsersMeOrganizationDeleteResponses];

export type GetUserOrganizationUsersMeOrganizationGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users/me/organization';
};

export type GetUserOrganizationUsersMeOrganizationGetResponses = {
    /**
     * Successful Response
     */
    200: OrganizationReadPublic;
};

export type GetUserOrganizationUsersMeOrganizationGetResponse = GetUserOrganizationUsersMeOrganizationGetResponses[keyof GetUserOrganizationUsersMeOrganizationGetResponses];

export type UpdateOrganizationUsersMeOrganizationPatchData = {
    body: OrganizationUpdate;
    path?: never;
    query: {
        /**
         * Organization Id
         */
        organization_id: string;
    };
    url: '/users/me/organization';
};

export type UpdateOrganizationUsersMeOrganizationPatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateOrganizationUsersMeOrganizationPatchError = UpdateOrganizationUsersMeOrganizationPatchErrors[keyof UpdateOrganizationUsersMeOrganizationPatchErrors];

export type UpdateOrganizationUsersMeOrganizationPatchResponses = {
    /**
     * Successful Response
     */
    200: OrganizationRead;
};

export type UpdateOrganizationUsersMeOrganizationPatchResponse = UpdateOrganizationUsersMeOrganizationPatchResponses[keyof UpdateOrganizationUsersMeOrganizationPatchResponses];

export type GetUserOrganizationMembersUsersMeOrganizationMembersGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users/me/organization/members';
};

export type GetUserOrganizationMembersUsersMeOrganizationMembersGetResponses = {
    /**
     * Response Get User Organization Members Users Me Organization Members Get
     * Successful Response
     */
    200: Array<UserReadPublic>;
};

export type GetUserOrganizationMembersUsersMeOrganizationMembersGetResponse = GetUserOrganizationMembersUsersMeOrganizationMembersGetResponses[keyof GetUserOrganizationMembersUsersMeOrganizationMembersGetResponses];

export type LeaveOrganizationUsersMeOrganizationMembershipDeleteData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users/me/organization/membership';
};

export type LeaveOrganizationUsersMeOrganizationMembershipDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type LeaveOrganizationUsersMeOrganizationMembershipDeleteResponse = LeaveOrganizationUsersMeOrganizationMembershipDeleteResponses[keyof LeaveOrganizationUsersMeOrganizationMembershipDeleteResponses];

export type GetUserCamerasPluginsRpiCamCamerasGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Include Status
         * Include camera online status
         */
        include_status?: boolean;
        /**
         * Name  Ilike
         */
        name__ilike?: string | null;
        /**
         * Description  Ilike
         */
        description__ilike?: string | null;
        /**
         * Url  Ilike
         */
        url__ilike?: string | null;
        /**
         * Search
         */
        search?: string | null;
    };
    url: '/plugins/rpi-cam/cameras';
};

export type GetUserCamerasPluginsRpiCamCamerasGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetUserCamerasPluginsRpiCamCamerasGetError = GetUserCamerasPluginsRpiCamCamerasGetErrors[keyof GetUserCamerasPluginsRpiCamCamerasGetErrors];

export type GetUserCamerasPluginsRpiCamCamerasGetResponses = {
    /**
     * Response Get User Cameras Plugins Rpi Cam Cameras Get
     * Successful Response
     */
    200: Array<CameraRead> | Array<CameraReadWithStatus>;
};

export type GetUserCamerasPluginsRpiCamCamerasGetResponse = GetUserCamerasPluginsRpiCamCamerasGetResponses[keyof GetUserCamerasPluginsRpiCamCamerasGetResponses];

export type RegisterUserCameraPluginsRpiCamCamerasPostData = {
    body: CameraCreateWritable;
    path?: never;
    query?: never;
    url: '/plugins/rpi-cam/cameras';
};

export type RegisterUserCameraPluginsRpiCamCamerasPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RegisterUserCameraPluginsRpiCamCamerasPostError = RegisterUserCameraPluginsRpiCamCamerasPostErrors[keyof RegisterUserCameraPluginsRpiCamCamerasPostErrors];

export type RegisterUserCameraPluginsRpiCamCamerasPostResponses = {
    /**
     * Successful Response
     */
    201: CameraReadWithCredentials;
};

export type RegisterUserCameraPluginsRpiCamCamerasPostResponse = RegisterUserCameraPluginsRpiCamCamerasPostResponses[keyof RegisterUserCameraPluginsRpiCamCamerasPostResponses];

export type DeleteUserCameraPluginsRpiCamCamerasCameraIdDeleteData = {
    body?: never;
    path: {
        /**
         * Camera Id
         */
        camera_id: string;
    };
    query?: never;
    url: '/plugins/rpi-cam/cameras/{camera_id}';
};

export type DeleteUserCameraPluginsRpiCamCamerasCameraIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteUserCameraPluginsRpiCamCamerasCameraIdDeleteError = DeleteUserCameraPluginsRpiCamCamerasCameraIdDeleteErrors[keyof DeleteUserCameraPluginsRpiCamCamerasCameraIdDeleteErrors];

export type DeleteUserCameraPluginsRpiCamCamerasCameraIdDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type DeleteUserCameraPluginsRpiCamCamerasCameraIdDeleteResponse = DeleteUserCameraPluginsRpiCamCamerasCameraIdDeleteResponses[keyof DeleteUserCameraPluginsRpiCamCamerasCameraIdDeleteResponses];

export type GetUserCameraPluginsRpiCamCamerasCameraIdGetData = {
    body?: never;
    path: {
        /**
         * Camera Id
         */
        camera_id: string;
    };
    query?: {
        /**
         * Include Status
         * Include camera online status
         */
        include_status?: boolean;
    };
    url: '/plugins/rpi-cam/cameras/{camera_id}';
};

export type GetUserCameraPluginsRpiCamCamerasCameraIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetUserCameraPluginsRpiCamCamerasCameraIdGetError = GetUserCameraPluginsRpiCamCamerasCameraIdGetErrors[keyof GetUserCameraPluginsRpiCamCamerasCameraIdGetErrors];

export type GetUserCameraPluginsRpiCamCamerasCameraIdGetResponses = {
    /**
     * Response Get User Camera Plugins Rpi Cam Cameras  Camera Id  Get
     * Successful Response
     */
    200: CameraRead | CameraReadWithStatus;
};

export type GetUserCameraPluginsRpiCamCamerasCameraIdGetResponse = GetUserCameraPluginsRpiCamCamerasCameraIdGetResponses[keyof GetUserCameraPluginsRpiCamCamerasCameraIdGetResponses];

export type UpdateUserCameraPluginsRpiCamCamerasCameraIdPatchData = {
    body: CameraUpdateWritable;
    path: {
        /**
         * Camera Id
         */
        camera_id: string;
    };
    query?: never;
    url: '/plugins/rpi-cam/cameras/{camera_id}';
};

export type UpdateUserCameraPluginsRpiCamCamerasCameraIdPatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateUserCameraPluginsRpiCamCamerasCameraIdPatchError = UpdateUserCameraPluginsRpiCamCamerasCameraIdPatchErrors[keyof UpdateUserCameraPluginsRpiCamCamerasCameraIdPatchErrors];

export type UpdateUserCameraPluginsRpiCamCamerasCameraIdPatchResponses = {
    /**
     * Successful Response
     */
    200: CameraRead;
};

export type UpdateUserCameraPluginsRpiCamCamerasCameraIdPatchResponse = UpdateUserCameraPluginsRpiCamCamerasCameraIdPatchResponses[keyof UpdateUserCameraPluginsRpiCamCamerasCameraIdPatchResponses];

export type GetUserCameraStatusPluginsRpiCamCamerasCameraIdStatusGetData = {
    body?: never;
    path: {
        /**
         * Camera Id
         */
        camera_id: string;
    };
    query?: {
        /**
         * Force Refresh
         * Force a refresh of the status by bypassing the cache
         */
        force_refresh?: boolean;
    };
    url: '/plugins/rpi-cam/cameras/{camera_id}/status';
};

export type GetUserCameraStatusPluginsRpiCamCamerasCameraIdStatusGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetUserCameraStatusPluginsRpiCamCamerasCameraIdStatusGetError = GetUserCameraStatusPluginsRpiCamCamerasCameraIdStatusGetErrors[keyof GetUserCameraStatusPluginsRpiCamCamerasCameraIdStatusGetErrors];

export type GetUserCameraStatusPluginsRpiCamCamerasCameraIdStatusGetResponses = {
    /**
     * Successful Response
     */
    200: CameraStatus;
};

export type GetUserCameraStatusPluginsRpiCamCamerasCameraIdStatusGetResponse = GetUserCameraStatusPluginsRpiCamCamerasCameraIdStatusGetResponses[keyof GetUserCameraStatusPluginsRpiCamCamerasCameraIdStatusGetResponses];

export type RegenerateApiKeyPluginsRpiCamCamerasCameraIdRegenerateApiKeyPostData = {
    body?: never;
    path: {
        /**
         * Camera Id
         */
        camera_id: string;
    };
    query?: never;
    url: '/plugins/rpi-cam/cameras/{camera_id}/regenerate-api-key';
};

export type RegenerateApiKeyPluginsRpiCamCamerasCameraIdRegenerateApiKeyPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RegenerateApiKeyPluginsRpiCamCamerasCameraIdRegenerateApiKeyPostError = RegenerateApiKeyPluginsRpiCamCamerasCameraIdRegenerateApiKeyPostErrors[keyof RegenerateApiKeyPluginsRpiCamCamerasCameraIdRegenerateApiKeyPostErrors];

export type RegenerateApiKeyPluginsRpiCamCamerasCameraIdRegenerateApiKeyPostResponses = {
    /**
     * Successful Response
     */
    201: CameraReadWithCredentials;
};

export type RegenerateApiKeyPluginsRpiCamCamerasCameraIdRegenerateApiKeyPostResponse = RegenerateApiKeyPluginsRpiCamCamerasCameraIdRegenerateApiKeyPostResponses[keyof RegenerateApiKeyPluginsRpiCamCamerasCameraIdRegenerateApiKeyPostResponses];

export type CaptureImagePluginsRpiCamCamerasCameraIdImagePostData = {
    body: BodyCaptureImagePluginsRpiCamCamerasCameraIdImagePost;
    path: {
        /**
         * Camera Id
         */
        camera_id: string;
    };
    query?: never;
    url: '/plugins/rpi-cam/cameras/{camera_id}/image';
};

export type CaptureImagePluginsRpiCamCamerasCameraIdImagePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CaptureImagePluginsRpiCamCamerasCameraIdImagePostError = CaptureImagePluginsRpiCamCamerasCameraIdImagePostErrors[keyof CaptureImagePluginsRpiCamCamerasCameraIdImagePostErrors];

export type CaptureImagePluginsRpiCamCamerasCameraIdImagePostResponses = {
    /**
     * Successful Response
     */
    201: ImageRead;
};

export type CaptureImagePluginsRpiCamCamerasCameraIdImagePostResponse = CaptureImagePluginsRpiCamCamerasCameraIdImagePostResponses[keyof CaptureImagePluginsRpiCamCamerasCameraIdImagePostResponses];

export type GetCameraStreamStatusPluginsRpiCamCamerasCameraIdStreamStatusGetData = {
    body?: never;
    path: {
        /**
         * Camera Id
         */
        camera_id: string;
    };
    query?: never;
    url: '/plugins/rpi-cam/cameras/{camera_id}/stream/status';
};

export type GetCameraStreamStatusPluginsRpiCamCamerasCameraIdStreamStatusGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetCameraStreamStatusPluginsRpiCamCamerasCameraIdStreamStatusGetError = GetCameraStreamStatusPluginsRpiCamCamerasCameraIdStreamStatusGetErrors[keyof GetCameraStreamStatusPluginsRpiCamCamerasCameraIdStreamStatusGetErrors];

export type GetCameraStreamStatusPluginsRpiCamCamerasCameraIdStreamStatusGetResponses = {
    /**
     * Successful Response
     */
    200: StreamView;
};

export type GetCameraStreamStatusPluginsRpiCamCamerasCameraIdStreamStatusGetResponse = GetCameraStreamStatusPluginsRpiCamCamerasCameraIdStreamStatusGetResponses[keyof GetCameraStreamStatusPluginsRpiCamCamerasCameraIdStreamStatusGetResponses];

export type StopAllStreamsPluginsRpiCamCamerasCameraIdStreamStopDeleteData = {
    body?: never;
    path: {
        /**
         * Camera Id
         */
        camera_id: string;
    };
    query?: never;
    url: '/plugins/rpi-cam/cameras/{camera_id}/stream/stop';
};

export type StopAllStreamsPluginsRpiCamCamerasCameraIdStreamStopDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type StopAllStreamsPluginsRpiCamCamerasCameraIdStreamStopDeleteError = StopAllStreamsPluginsRpiCamCamerasCameraIdStreamStopDeleteErrors[keyof StopAllStreamsPluginsRpiCamCamerasCameraIdStreamStopDeleteErrors];

export type StopAllStreamsPluginsRpiCamCamerasCameraIdStreamStopDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type StopAllStreamsPluginsRpiCamCamerasCameraIdStreamStopDeleteResponse = StopAllStreamsPluginsRpiCamCamerasCameraIdStreamStopDeleteResponses[keyof StopAllStreamsPluginsRpiCamCamerasCameraIdStreamStopDeleteResponses];

export type StartRecordingPluginsRpiCamCamerasCameraIdStreamRecordStartPostData = {
    body: BodyStartRecordingPluginsRpiCamCamerasCameraIdStreamRecordStartPost;
    path: {
        /**
         * Camera Id
         */
        camera_id: string;
    };
    query?: never;
    url: '/plugins/rpi-cam/cameras/{camera_id}/stream/record/start';
};

export type StartRecordingPluginsRpiCamCamerasCameraIdStreamRecordStartPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type StartRecordingPluginsRpiCamCamerasCameraIdStreamRecordStartPostError = StartRecordingPluginsRpiCamCamerasCameraIdStreamRecordStartPostErrors[keyof StartRecordingPluginsRpiCamCamerasCameraIdStreamRecordStartPostErrors];

export type StartRecordingPluginsRpiCamCamerasCameraIdStreamRecordStartPostResponses = {
    /**
     * Successful Response
     */
    201: VideoRead;
};

export type StartRecordingPluginsRpiCamCamerasCameraIdStreamRecordStartPostResponse = StartRecordingPluginsRpiCamCamerasCameraIdStreamRecordStartPostResponses[keyof StartRecordingPluginsRpiCamCamerasCameraIdStreamRecordStartPostResponses];

export type StopRecordingPluginsRpiCamCamerasCameraIdStreamRecordStopDeleteData = {
    body?: never;
    path: {
        /**
         * Camera Id
         */
        camera_id: string;
    };
    query?: never;
    url: '/plugins/rpi-cam/cameras/{camera_id}/stream/record/stop';
};

export type StopRecordingPluginsRpiCamCamerasCameraIdStreamRecordStopDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type StopRecordingPluginsRpiCamCamerasCameraIdStreamRecordStopDeleteError = StopRecordingPluginsRpiCamCamerasCameraIdStreamRecordStopDeleteErrors[keyof StopRecordingPluginsRpiCamCamerasCameraIdStreamRecordStopDeleteErrors];

export type StopRecordingPluginsRpiCamCamerasCameraIdStreamRecordStopDeleteResponses = {
    /**
     * Response Stop Recording Plugins Rpi Cam Cameras  Camera Id  Stream Record Stop Delete
     * Successful Response
     */
    200: {
        [key: string]: string;
    };
};

export type StopRecordingPluginsRpiCamCamerasCameraIdStreamRecordStopDeleteResponse = StopRecordingPluginsRpiCamCamerasCameraIdStreamRecordStopDeleteResponses[keyof StopRecordingPluginsRpiCamCamerasCameraIdStreamRecordStopDeleteResponses];

export type StartPreviewPluginsRpiCamCamerasCameraIdStreamPreviewStartPostData = {
    body?: never;
    path: {
        /**
         * Camera Id
         */
        camera_id: string;
    };
    query?: never;
    url: '/plugins/rpi-cam/cameras/{camera_id}/stream/preview/start';
};

export type StartPreviewPluginsRpiCamCamerasCameraIdStreamPreviewStartPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type StartPreviewPluginsRpiCamCamerasCameraIdStreamPreviewStartPostError = StartPreviewPluginsRpiCamCamerasCameraIdStreamPreviewStartPostErrors[keyof StartPreviewPluginsRpiCamCamerasCameraIdStreamPreviewStartPostErrors];

export type StartPreviewPluginsRpiCamCamerasCameraIdStreamPreviewStartPostResponses = {
    /**
     * Successful Response
     */
    201: StreamView;
};

export type StartPreviewPluginsRpiCamCamerasCameraIdStreamPreviewStartPostResponse = StartPreviewPluginsRpiCamCamerasCameraIdStreamPreviewStartPostResponses[keyof StartPreviewPluginsRpiCamCamerasCameraIdStreamPreviewStartPostResponses];

export type StopPreviewPluginsRpiCamCamerasCameraIdStreamPreviewStopDeleteData = {
    body?: never;
    path: {
        /**
         * Camera Id
         */
        camera_id: string;
    };
    query?: never;
    url: '/plugins/rpi-cam/cameras/{camera_id}/stream/preview/stop';
};

export type StopPreviewPluginsRpiCamCamerasCameraIdStreamPreviewStopDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type StopPreviewPluginsRpiCamCamerasCameraIdStreamPreviewStopDeleteError = StopPreviewPluginsRpiCamCamerasCameraIdStreamPreviewStopDeleteErrors[keyof StopPreviewPluginsRpiCamCamerasCameraIdStreamPreviewStopDeleteErrors];

export type StopPreviewPluginsRpiCamCamerasCameraIdStreamPreviewStopDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type StopPreviewPluginsRpiCamCamerasCameraIdStreamPreviewStopDeleteResponse = StopPreviewPluginsRpiCamCamerasCameraIdStreamPreviewStopDeleteResponses[keyof StopPreviewPluginsRpiCamCamerasCameraIdStreamPreviewStopDeleteResponses];

export type HlsFileProxyPluginsRpiCamCamerasCameraIdStreamPreviewHlsFilePathGetData = {
    body?: never;
    path: {
        /**
         * Camera Id
         */
        camera_id: string;
        /**
         * File Path
         */
        file_path: string;
    };
    query?: never;
    url: '/plugins/rpi-cam/cameras/{camera_id}/stream/preview/hls/{file_path}';
};

export type HlsFileProxyPluginsRpiCamCamerasCameraIdStreamPreviewHlsFilePathGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type HlsFileProxyPluginsRpiCamCamerasCameraIdStreamPreviewHlsFilePathGetError = HlsFileProxyPluginsRpiCamCamerasCameraIdStreamPreviewHlsFilePathGetErrors[keyof HlsFileProxyPluginsRpiCamCamerasCameraIdStreamPreviewHlsFilePathGetErrors];

export type HlsFileProxyPluginsRpiCamCamerasCameraIdStreamPreviewHlsFilePathGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type WatchPreviewPluginsRpiCamCamerasCameraIdStreamPreviewWatchGetData = {
    body?: never;
    path: {
        /**
         * Camera Id
         */
        camera_id: string;
    };
    query?: never;
    url: '/plugins/rpi-cam/cameras/{camera_id}/stream/preview/watch';
};

export type WatchPreviewPluginsRpiCamCamerasCameraIdStreamPreviewWatchGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type WatchPreviewPluginsRpiCamCamerasCameraIdStreamPreviewWatchGetError = WatchPreviewPluginsRpiCamCamerasCameraIdStreamPreviewWatchGetErrors[keyof WatchPreviewPluginsRpiCamCamerasCameraIdStreamPreviewWatchGetErrors];

export type WatchPreviewPluginsRpiCamCamerasCameraIdStreamPreviewWatchGetResponses = {
    /**
     * Successful Response
     */
    200: string;
};

export type WatchPreviewPluginsRpiCamCamerasCameraIdStreamPreviewWatchGetResponse = WatchPreviewPluginsRpiCamCamerasCameraIdStreamPreviewWatchGetResponses[keyof WatchPreviewPluginsRpiCamCamerasCameraIdStreamPreviewWatchGetResponses];

export type InitCameraPluginsRpiCamCamerasCameraIdOpenPostData = {
    body?: never;
    path: {
        /**
         * Camera Id
         */
        camera_id: string;
    };
    query?: {
        /**
         * Camera mode (photo or video)
         */
        mode?: CameraMode;
    };
    url: '/plugins/rpi-cam/cameras/{camera_id}/open';
};

export type InitCameraPluginsRpiCamCamerasCameraIdOpenPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type InitCameraPluginsRpiCamCamerasCameraIdOpenPostError = InitCameraPluginsRpiCamCamerasCameraIdOpenPostErrors[keyof InitCameraPluginsRpiCamCamerasCameraIdOpenPostErrors];

export type InitCameraPluginsRpiCamCamerasCameraIdOpenPostResponses = {
    /**
     * Successful Response
     */
    200: CameraStatus;
};

export type InitCameraPluginsRpiCamCamerasCameraIdOpenPostResponse = InitCameraPluginsRpiCamCamerasCameraIdOpenPostResponses[keyof InitCameraPluginsRpiCamCamerasCameraIdOpenPostResponses];

export type CloseCameraPluginsRpiCamCamerasCameraIdClosePostData = {
    body?: never;
    path: {
        /**
         * Camera Id
         */
        camera_id: string;
    };
    query?: never;
    url: '/plugins/rpi-cam/cameras/{camera_id}/close';
};

export type CloseCameraPluginsRpiCamCamerasCameraIdClosePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CloseCameraPluginsRpiCamCamerasCameraIdClosePostError = CloseCameraPluginsRpiCamCamerasCameraIdClosePostErrors[keyof CloseCameraPluginsRpiCamCamerasCameraIdClosePostErrors];

export type CloseCameraPluginsRpiCamCamerasCameraIdClosePostResponses = {
    /**
     * Successful Response
     */
    200: CameraStatus;
};

export type CloseCameraPluginsRpiCamCamerasCameraIdClosePostResponse = CloseCameraPluginsRpiCamCamerasCameraIdClosePostResponses[keyof CloseCameraPluginsRpiCamCamerasCameraIdClosePostResponses];

export type ClientOptions = {
    baseURL: 'http://localhost:8001' | (string & {});
};
