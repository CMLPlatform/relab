"""Public user management routes."""

from fastapi import APIRouter, HTTPException, Security

from app.api.auth import crud
from app.api.auth.dependencies import CurrentActiveVerifiedUserDep, OrgAsOwner, current_active_user
from app.api.auth.exceptions import UserHasNoOrgError
from app.api.auth.models import Organization, User
from app.api.auth.schemas import (
    OrganizationRead,
    OrganizationReadPublic,
    OrganizationUpdate,
    UserRead,
    UserReadPublic,
    UserUpdate,
)
from app.api.auth.services.user_manager import fastapi_user_manager
from app.api.common.routers.dependencies import AsyncSessionDep
from app.api.common.routers.openapi import mark_router_routes_public

### User self-management routes ###

router = APIRouter(prefix="/users", tags=["users"], dependencies=[Security(current_active_user)])

# Include autogenerated user management routes (for self-management)
router.include_router(
    fastapi_user_manager.get_users_router(UserRead, UserUpdate),
)


## User organization routes ##
@router.get(
    "/me/organization", response_model=OrganizationReadPublic, summary="Get the organization of the current user"
)
async def get_user_organization(current_user: CurrentActiveVerifiedUserDep) -> Organization:
    """Get the organization of the current user."""
    if not current_user.organization:
        raise UserHasNoOrgError(user_id=current_user.id)
    return current_user.organization


@router.get(
    "/me/organization/members",
    response_model=list[UserReadPublic],
    summary="Get the members of the organization of the current user",
)
async def get_user_organization_members(
    current_user: CurrentActiveVerifiedUserDep,
    session: AsyncSessionDep,
) -> list[User]:
    """Get the members of the organization of the current user."""
    if current_user.organization_id is None:
        raise HTTPException(status_code=404, detail="User does not belong to an organization.")
    return await crud.get_organization_members(session, current_user.organization_id, current_user)


@router.patch("/me/organization", response_model=OrganizationRead, summary="Update your organization")
async def update_organization(
    db_organization: OrgAsOwner,
    organization_in: OrganizationUpdate,
    session: AsyncSessionDep,
) -> Organization:
    """Update organization as owner."""
    db_org = await crud.update_user_organization(session, db_organization, organization_in)

    return db_org


@router.delete("/me/organization", status_code=204, summary="Delete your organization as owner")
async def delete_my_organization(
    session: AsyncSessionDep,
    current_user: CurrentActiveVerifiedUserDep,
) -> None:
    """Delete organization as owner. Fails if organization has members."""
    return await crud.delete_organization_as_owner(session, current_user)


@router.delete("/me/organization/membership", status_code=204, summary="Leave current organization")
async def leave_organization(
    session: AsyncSessionDep,
    current_user: CurrentActiveVerifiedUserDep,
) -> None:
    """Leave current organization. Cannot be used by organization owner."""
    await crud.leave_organization(session, current_user)


# TODO: Initializing as PublicRouter doesn't seem to work, need to manually mark all routes as public. Investigate why.
mark_router_routes_public(router)
