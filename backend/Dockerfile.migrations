# --- Builder stage ---
FROM ghcr.io/astral-sh/uv:0.8-python3.13-trixie-slim AS builder

WORKDIR /opt/relab/backend_migrations

# Install git for custom dependencies (fastapi-users-db-sqlmodel)
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    apt-get update && apt-get install -y --no-install-recommends \
    git \
    && apt-get dist-clean

# Create needed directories data uploads for seeding example images and files
RUN mkdir -p data/uploads/files data/uploads/images

# uv optimizations (see https://docs.astral.sh/uv/guides/integration/docker/#optimizations)
ENV UV_COMPILE_BYTECODE=1 \
    UV_LINK_MODE=copy \
    UV_PYTHON_DOWNLOADS=0

# Copy dependency files
COPY .python-version pyproject.toml uv.lock ./

# Install dependencies
# Ref: https://docs.astral.sh/uv/guides/integration/docker/#intermediate-layers
RUN --mount=type=cache,target=/root/.cache/uv \
    uv sync --frozen --no-default-groups --group=migrations --no-install-project

# Copy alembic migrations, scripts, and source code
COPY alembic.ini ./
COPY alembic/ alembic/
COPY scripts/ scripts/
COPY app/ app/

# --- Final runtime stage ---
FROM python:3.13-slim

# Build arguments
ARG WORKDIR=/opt/relab/backend_migrations
ARG APP_USER=appuser

# Set up a non-root user
RUN useradd $APP_USER

# Copy built app and environment from builder
COPY --from=builder --chown=$APP_USER:$APP_USER $WORKDIR $WORKDIR

WORKDIR $WORKDIR

# Set Python variables
ENV PYTHONPATH=$WORKDIR \
    PYTHONUNBUFFERED=1 \
    PATH="$WORKDIR/.venv/bin:$PATH"

# Switch to non-root user
USER $APP_USER

# Run the entrypoint
ENTRYPOINT [". scripts/seed/migrations_entrypoint.sh"]
