"""initial

Revision ID: 33b00b31e537
Revises:
Create Date: 2025-06-29 18:10:44.514384

"""

from collections.abc import Sequence
from typing import Union

import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql

import app.api.common.models.custom_types
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "33b00b31e537"
down_revision: str | None = None
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum("MATERIALS", "PRODUCTS", "OTHER", name="taxonomydomain").create(op.get_bind())
    sa.Enum("PRODUCT", "PRODUCT_TYPE", "MATERIAL", name="imageparenttype").create(op.get_bind())
    sa.Enum("PRODUCT", "PRODUCT_TYPE", "MATERIAL", name="fileparenttype").create(op.get_bind())
    sa.Enum("KILOGRAM", "GRAM", "METER", "CENTIMETER", name="unit").create(op.get_bind())
    sa.Enum("OWNER", "MEMBER", name="organizationrole").create(op.get_bind())
    op.create_table(
        "material",
        sa.Column("created_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("updated_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
        sa.Column("source", sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
        sa.Column("density_kg_m3", sa.Float(), nullable=True),
        sa.Column("is_crm", sa.Boolean(), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_material_name"), "material", ["name"], unique=False)
    op.create_table(
        "newslettersubscriber",
        sa.Column("created_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("updated_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("email", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("is_confirmed", sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_newslettersubscriber_email"), "newslettersubscriber", ["email"], unique=True)
    op.create_table(
        "organization",
        sa.Column("created_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("updated_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
        sa.Column("location", sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("owner_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(["owner_id"], ["user.id"], name="fk_organization_owner", use_alter=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_organization_name"), "organization", ["name"], unique=True)
    op.create_table(
        "producttype",
        sa.Column("created_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("updated_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_producttype_name"), "producttype", ["name"], unique=False)
    op.create_table(
        "taxonomy",
        sa.Column("created_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("updated_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
        sa.Column(
            "domains",
            postgresql.ARRAY(
                postgresql.ENUM("MATERIALS", "PRODUCTS", "OTHER", name="taxonomydomain", create_type=False)
            ),
            nullable=True,
        ),
        sa.Column("source", sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_taxonomy_name"), "taxonomy", ["name"], unique=False)
    op.create_table(
        "user",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("email", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("hashed_password", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("is_superuser", sa.Boolean(), nullable=False),
        sa.Column("is_verified", sa.Boolean(), nullable=False),
        sa.Column("created_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("updated_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("username", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("organization_id", sa.Uuid(), nullable=True),
        sa.Column(
            "organization_role",
            postgresql.ENUM("OWNER", "MEMBER", name="organizationrole", create_type=False),
            nullable=True,
        ),
        sa.ForeignKeyConstraint(["organization_id"], ["organization.id"], name="fk_user_organization", use_alter=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_user_email"), "user", ["email"], unique=True)
    op.create_index(op.f("ix_user_username"), "user", ["username"], unique=True)
    op.create_table(
        "camera",
        sa.Column("created_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("updated_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
        sa.Column("url", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("encrypted_api_key", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("encrypted_auth_headers", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("owner_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(
            ["owner_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_camera_name"), "camera", ["name"], unique=False)
    op.create_table(
        "category",
        sa.Column("created_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("updated_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(length=250), nullable=False),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
        sa.Column("external_id", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("supercategory_id", sa.Integer(), nullable=True),
        sa.Column("taxonomy_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["supercategory_id"],
            ["category.id"],
        ),
        sa.ForeignKeyConstraint(
            ["taxonomy_id"],
            ["taxonomy.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_category_name"), "category", ["name"], unique=False)
    op.create_table(
        "oauthaccount",
        sa.Column("created_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("updated_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("user_id", sa.Uuid(), nullable=False),
        sa.Column("oauth_name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("access_token", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("expires_at", sa.Integer(), nullable=True),
        sa.Column("refresh_token", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("account_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("account_email", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_oauthaccount_account_id"), "oauthaccount", ["account_id"], unique=False)
    op.create_index(op.f("ix_oauthaccount_oauth_name"), "oauthaccount", ["oauth_name"], unique=False)
    op.create_table(
        "product",
        sa.Column("created_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("updated_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
        sa.Column("brand", sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
        sa.Column("model", sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
        sa.Column("dismantling_notes", sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
        sa.Column("dismantling_time_start", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("dismantling_time_end", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("parent_id", sa.Integer(), nullable=True),
        sa.Column("amount_in_parent", sa.Integer(), nullable=True),
        sa.Column("owner_id", sa.Uuid(), nullable=False),
        sa.Column("product_type_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["owner_id"],
            ["user.id"],
        ),
        sa.ForeignKeyConstraint(
            ["parent_id"],
            ["product.id"],
        ),
        sa.ForeignKeyConstraint(
            ["product_type_id"],
            ["producttype.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_product_name"), "product", ["name"], unique=False)
    op.create_table(
        "categorymateriallink",
        sa.Column("category_id", sa.Integer(), nullable=False),
        sa.Column("material_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["category_id"],
            ["category.id"],
        ),
        sa.ForeignKeyConstraint(
            ["material_id"],
            ["material.id"],
        ),
        sa.PrimaryKeyConstraint("category_id", "material_id"),
    )
    op.create_table(
        "categoryproducttypelink",
        sa.Column("category_id", sa.Integer(), nullable=False),
        sa.Column("product_type_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["category_id"],
            ["category.id"],
        ),
        sa.ForeignKeyConstraint(
            ["product_type_id"],
            ["producttype.id"],
        ),
        sa.PrimaryKeyConstraint("category_id", "product_type_id"),
    )
    op.create_table(
        "file",
        sa.Column("created_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("updated_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("filename", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("file", app.api.file_storage.models.custom_types.FileType(), nullable=False),
        sa.Column(
            "parent_type",
            postgresql.ENUM("PRODUCT", "PRODUCT_TYPE", "MATERIAL", name="fileparenttype", create_type=False),
            nullable=False,
        ),
        sa.Column("product_id", sa.Integer(), nullable=True),
        sa.Column("material_id", sa.Integer(), nullable=True),
        sa.Column("product_type_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["material_id"],
            ["material.id"],
        ),
        sa.ForeignKeyConstraint(
            ["product_id"],
            ["product.id"],
        ),
        sa.ForeignKeyConstraint(
            ["product_type_id"],
            ["producttype.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "image",
        sa.Column("created_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("updated_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
        sa.Column("image_metadata", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("filename", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("file", app.api.file_storage.models.custom_types.ImageType(), nullable=False),
        sa.Column(
            "parent_type",
            postgresql.ENUM("PRODUCT", "PRODUCT_TYPE", "MATERIAL", name="imageparenttype", create_type=False),
            nullable=False,
        ),
        sa.Column("product_id", sa.Integer(), nullable=True),
        sa.Column("material_id", sa.Integer(), nullable=True),
        sa.Column("product_type_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["material_id"],
            ["material.id"],
        ),
        sa.ForeignKeyConstraint(
            ["product_id"],
            ["product.id"],
        ),
        sa.ForeignKeyConstraint(
            ["product_type_id"],
            ["producttype.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "materialproductlink",
        sa.Column("created_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("updated_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("quantity", sa.Float(), nullable=False),
        sa.Column(
            "unit",
            postgresql.ENUM("KILOGRAM", "GRAM", "METER", "CENTIMETER", name="unit", create_type=False),
            nullable=True,
        ),
        sa.Column("material_id", sa.Integer(), nullable=False),
        sa.Column("product_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["material_id"],
            ["material.id"],
        ),
        sa.ForeignKeyConstraint(
            ["product_id"],
            ["product.id"],
        ),
        sa.PrimaryKeyConstraint("material_id", "product_id"),
    )
    op.create_table(
        "physicalproperties",
        sa.Column("created_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("updated_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("weight_kg", sa.Float(), nullable=True),
        sa.Column("height_cm", sa.Float(), nullable=True),
        sa.Column("width_cm", sa.Float(), nullable=True),
        sa.Column("depth_cm", sa.Float(), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("product_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["product_id"],
            ["product.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "video",
        sa.Column("created_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("updated_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("url", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("title", sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
        sa.Column("video_metadata", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("product_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["product_id"],
            ["product.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("video")
    op.drop_table("physicalproperties")
    op.drop_table("materialproductlink")
    op.drop_table("image")
    op.drop_table("file")
    op.drop_table("categoryproducttypelink")
    op.drop_table("categorymateriallink")
    op.drop_index(op.f("ix_product_name"), table_name="product")
    op.drop_table("product")
    op.drop_index(op.f("ix_oauthaccount_oauth_name"), table_name="oauthaccount")
    op.drop_index(op.f("ix_oauthaccount_account_id"), table_name="oauthaccount")
    op.drop_table("oauthaccount")
    op.drop_index(op.f("ix_category_name"), table_name="category")
    op.drop_table("category")
    op.drop_index(op.f("ix_camera_name"), table_name="camera")
    op.drop_table("camera")
    op.drop_index(op.f("ix_user_username"), table_name="user")
    op.drop_index(op.f("ix_user_email"), table_name="user")
    op.drop_table("user")
    op.drop_index(op.f("ix_taxonomy_name"), table_name="taxonomy")
    op.drop_table("taxonomy")
    op.drop_index(op.f("ix_producttype_name"), table_name="producttype")
    op.drop_table("producttype")
    op.drop_index(op.f("ix_organization_name"), table_name="organization")
    op.drop_table("organization")
    op.drop_index(op.f("ix_newslettersubscriber_email"), table_name="newslettersubscriber")
    op.drop_table("newslettersubscriber")
    op.drop_index(op.f("ix_material_name"), table_name="material")
    op.drop_table("material")
    sa.Enum("OWNER", "MEMBER", name="organizationrole").drop(op.get_bind())
    sa.Enum("KILOGRAM", "GRAM", "METER", "CENTIMETER", name="unit").drop(op.get_bind())
    sa.Enum("PRODUCT", "PRODUCT_TYPE", "MATERIAL", name="fileparenttype").drop(op.get_bind())
    sa.Enum("PRODUCT", "PRODUCT_TYPE", "MATERIAL", name="imageparenttype").drop(op.get_bind())
    sa.Enum("MATERIALS", "PRODUCTS", "OTHER", name="taxonomydomain").drop(op.get_bind())
    # ### end Alembic commands ###
