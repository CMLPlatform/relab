# Use the official UV image with Python 3.13
FROM ghcr.io/astral-sh/uv:0.8-python3.13-bookworm@sha256:f186432a4feb5c60a625664e3082d2cf836a79913c3505f722c155652ccdfc22

# Set the working directory inside the container
WORKDIR /app/

# Add working directory to the PYTHONPATH to allow local imports, and unbuffer python output for easier debugging
ENV PYTHONPATH=./
ENV PYTHONUNBUFFERED=1

# uv optimizations
# Ref: https://docs.astral.sh/uv/guides/integration/docker/#optimizations
ENV UV_COMPILE_BYTECODE=1
ENV UV_LINK_MODE=copy

# Copy dependency files
COPY .python-version pyproject.toml uv.lock ./

# Install dependencies
# Ref: https://docs.astral.sh/uv/guides/integration/docker/#intermediate-layers
RUN --mount=type=cache,target=/root/.cache/uv \
    --mount=type=bind,source=uv.lock,target=uv.lock \
    --mount=type=bind,source=pyproject.toml,target=pyproject.toml \
    uv sync --frozen --no-default-groups --group=api --no-install-project

# Copy configuration files
COPY .env ./

# Copy application code
COPY ./app ./app

# Sync the project
# Ref: https://docs.astral.sh/uv/guides/integration/docker/#intermediate-layers
RUN --mount=type=cache,target=/root/.cache/uv \
    uv sync --frozen --no-default-groups --group=api

# Run the application
# HACK: "--forwarded-allow-ips=*" ensures ssl links in generated urls, but is a security risk
# TODO: Improve this when setting up reverse proxy
CMD [".venv/bin/uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--forwarded-allow-ips=*"]
